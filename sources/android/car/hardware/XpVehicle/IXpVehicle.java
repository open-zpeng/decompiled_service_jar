package android.car.hardware.XpVehicle;

import android.car.hardware.eps.IEpsEventListener;
import android.car.hardware.scu.IScuEventListener;
import android.car.hardware.vcu.IVcuEventListener;
import android.os.Binder;
import android.os.IBinder;
import android.os.IInterface;
import android.os.Parcel;
import android.os.RemoteException;

/* loaded from: classes.dex */
public interface IXpVehicle extends IInterface {
    void SetFcwAebSensitivitySwitchStatus(int i) throws RemoteException;

    void activateAndroidLluControl() throws RemoteException;

    void beginTboxOTA() throws RemoteException;

    void calibrateTpmsTirePressure() throws RemoteException;

    void deactivateAndroidLluControl() throws RemoteException;

    int getAccStatus() throws RemoteException;

    int[] getAllSrsCrashOutputStatus() throws RemoteException;

    int[] getAlsInitializationStudyAndErrorState() throws RemoteException;

    int getAlsInitializationStudyState() throws RemoteException;

    int getAmpA2BLinkStatus() throws RemoteException;

    int getAmpDyn3DEffectLevel() throws RemoteException;

    int getAmpDynSdvcLevel() throws RemoteException;

    int getAmpEffectStatus() throws RemoteException;

    int[] getAmpFreqGainGroupControlValue() throws RemoteException;

    int getAmpMusicScene() throws RemoteException;

    int getAmpMusicStyle() throws RemoteException;

    int getAmpPowerRequestSwitchStatus() throws RemoteException;

    int getAmpSdsscLevel() throws RemoteException;

    int getAmpSoundFieldMode() throws RemoteException;

    int getAmpSoundSourceDolbyFormat() throws RemoteException;

    int getAmpSoundStyle() throws RemoteException;

    int getAmpSoundTrackMode() throws RemoteException;

    int getAmpVolume() throws RemoteException;

    int[] getApmAllChannelSoundSource() throws RemoteException;

    int[] getApmAllChannelVolume() throws RemoteException;

    int getApmAudioEffect() throws RemoteException;

    int getArsFaultState() throws RemoteException;

    int getArsInitState() throws RemoteException;

    int getArsPosition() throws RemoteException;

    int getArsWorkingMode() throws RemoteException;

    int getArsWorkingState() throws RemoteException;

    int getAtlDowOpen() throws RemoteException;

    int[] getAtlLrPowerRequestSwitchStatus() throws RemoteException;

    int getAtlOpen() throws RemoteException;

    int getAtlReady() throws RemoteException;

    int getAtlSwitchStatus() throws RemoteException;

    String getAudioDspStatus() throws RemoteException;

    int[] getAudioMode() throws RemoteException;

    int getAutoBrightness() throws RemoteException;

    int getAutoParkErrorCode() throws RemoteException;

    int getAutoParkSwitch() throws RemoteException;

    int getAutoWindowLockSw() throws RemoteException;

    int getAvasAcChargingSoundState() throws RemoteException;

    int getAvasChargeSoundSpeedVolume() throws RemoteException;

    int getAvasChargeSoundSwitchStatus() throws RemoteException;

    int getAvasDcChargingSoundState() throws RemoteException;

    int getAvasDisconnectChargingSoundState() throws RemoteException;

    int getAvasExternalVolume() throws RemoteException;

    int getAvasFaultStatus() throws RemoteException;

    int getAvasFriendlySayHiSound() throws RemoteException;

    int getAvasFullChargeWaitForWakeUpSoundState() throws RemoteException;

    int getAvasLockSoundEffect() throws RemoteException;

    int getAvasLockUnlockSoundSwitchStatus() throws RemoteException;

    int getAvasLowSpeedSoundEffect() throws RemoteException;

    int getAvasLowSpeedSoundSwitch() throws RemoteException;

    int getAvasLowSpeedVolume() throws RemoteException;

    int getAvasMcuAvasRunnningStatus() throws RemoteException;

    int getAvasPhotoSoundSwitch() throws RemoteException;

    int getAvasSleepSoundState() throws RemoteException;

    int getAvasSocSoundSpeedVolume() throws RemoteException;

    int getAvasSocSoundSwitchStatus() throws RemoteException;

    int getAvasUnlockSoundEffect() throws RemoteException;

    int getAvasUnlockSoundSpeedVolume() throws RemoteException;

    int getAvasWaitForWakeUpSoundState() throws RemoteException;

    int getAvm3603dAngle() throws RemoteException;

    int getAvmCalibrationMode() throws RemoteException;

    int getAvmCameraAngle() throws RemoteException;

    int getAvmCameraDisplayMode() throws RemoteException;

    int getAvmCameraInitState() throws RemoteException;

    int[] getAvmCamerasFaultStates() throws RemoteException;

    int getAvmFineTuneMode() throws RemoteException;

    int getAvmOverlayWorkSt() throws RemoteException;

    int getAvmRoofCameraHeightStatus() throws RemoteException;

    int getAvmRoofCameraPosition() throws RemoteException;

    int getAvmRoofCameraState() throws RemoteException;

    int getAvmTransBodySwitchStatus() throws RemoteException;

    int getAvmTransparentChassisState() throws RemoteException;

    int getAvmWorkState() throws RemoteException;

    float getBattOutWaterTempature() throws RemoteException;

    int getBatteryKeepTempMode() throws RemoteException;

    int getBcmActualAsHeightLvlConfigValue() throws RemoteException;

    int[] getBcmAllWindowsActionFeedbackStatus() throws RemoteException;

    float[] getBcmAllWindowsPos() throws RemoteException;

    float[] getBcmAsAcceleratedSpeed() throws RemoteException;

    int getBcmAsAutoLevelingResult() throws RemoteException;

    int getBcmAsAutoLevelingResultValue() throws RemoteException;

    int getBcmAsCampingModeSwitchStatus() throws RemoteException;

    int getBcmAsDrivingMode() throws RemoteException;

    int getBcmAsEspPataRequestStatus() throws RemoteException;

    int getBcmAsHeightChangingStatus() throws RemoteException;

    int getBcmAsLeopardModeSwitchStatus() throws RemoteException;

    int getBcmAsLockModeStatus() throws RemoteException;

    int getBcmAsModeAllowedCampingStatus() throws RemoteException;

    int getBcmAsRedLampRequest() throws RemoteException;

    int getBcmAsTargetHeight() throws RemoteException;

    int getBcmAsWelcomeModeStatus() throws RemoteException;

    int[] getBcmAsWheelPositionHeightAll() throws RemoteException;

    int getBcmAsYellowLampRequest() throws RemoteException;

    int getBcmAtwsState() throws RemoteException;

    int getBcmAutoLightState() throws RemoteException;

    int getBcmBackDefrostMode() throws RemoteException;

    int getBcmBackMirrorHeatMode() throws RemoteException;

    int getBcmBonnetStatus() throws RemoteException;

    int getBcmBreakPedalStatus() throws RemoteException;

    int getBcmChairWelcomeMode() throws RemoteException;

    int getBcmChargeGunLockSt() throws RemoteException;

    int getBcmChargePortStatus(int i) throws RemoteException;

    int getBcmChildLockCfg() throws RemoteException;

    int getBcmColumnHorizonalPosition() throws RemoteException;

    int getBcmColumnVerticalPosition() throws RemoteException;

    int getBcmCoverPlateStatus() throws RemoteException;

    int getBcmCwcSwitchState() throws RemoteException;

    int getBcmDayLightMode() throws RemoteException;

    int[] getBcmDaytimeRunningLightsOutputStatus() throws RemoteException;

    int getBcmDomeLightBrightLevel() throws RemoteException;

    int getBcmDomeLightCfg() throws RemoteException;

    int getBcmDomeLightModeStatus() throws RemoteException;

    int getBcmDoorLockState() throws RemoteException;

    int getBcmDoorUnlockRequestSource() throws RemoteException;

    int[] getBcmDoorsState() throws RemoteException;

    int getBcmDriverBeltWarning() throws RemoteException;

    int getBcmEasyLoadingState() throws RemoteException;

    int getBcmEngineeringModeStatus() throws RemoteException;

    int getBcmEnvironmentMode() throws RemoteException;

    int getBcmFRCwcSwitchState() throws RemoteException;

    int getBcmFWiperMotorErr() throws RemoteException;

    int getBcmFarLampState() throws RemoteException;

    int getBcmFollowMeHomeCfg() throws RemoteException;

    int getBcmFollowMeTime() throws RemoteException;

    int getBcmFootKickSwitchStatus() throws RemoteException;

    int getBcmFrontLampMode() throws RemoteException;

    int getBcmFrontLeftDomeLightSwitchStatus() throws RemoteException;

    float getBcmFrontLeftWinPos() throws RemoteException;

    int getBcmFrontMirrorHeatSwitchStatus() throws RemoteException;

    int getBcmFrontRightDomeLightSwitchStatus() throws RemoteException;

    float getBcmFrontRightWinPos() throws RemoteException;

    int getBcmFrontWiperActiveStatus() throws RemoteException;

    int[] getBcmGroupLedBrigntness() throws RemoteException;

    int[] getBcmGroupLedColor() throws RemoteException;

    int[] getBcmGroupLedControlStatus() throws RemoteException;

    int[] getBcmGroupLedTemperature() throws RemoteException;

    int getBcmHandleAutoState() throws RemoteException;

    int getBcmHeadLampCtrlLevel() throws RemoteException;

    int getBcmHeadLampLevelingCtrlMode() throws RemoteException;

    int getBcmHeadLampLevelingReqValue() throws RemoteException;

    int getBcmHeightLvlConfigValue() throws RemoteException;

    int getBcmHoistModeSwitchStatus() throws RemoteException;

    int getBcmIgStatus() throws RemoteException;

    int getBcmKeyAuthState() throws RemoteException;

    int[] getBcmLRMirrorHeatSwitchStatus() throws RemoteException;

    int[] getBcmLeftAndRightTurnLampStatus() throws RemoteException;

    int getBcmLeftChargePortLockState() throws RemoteException;

    int getBcmLeftChildLockSwitchStatus() throws RemoteException;

    int getBcmLeftMirrorHorizPos() throws RemoteException;

    int getBcmLeftMirrorVerticalPos() throws RemoteException;

    int[] getBcmLeftRightRearMirrorFoldOutputStatus() throws RemoteException;

    int getBcmLeftSdcDenormalizeState() throws RemoteException;

    int getBcmLeftSdcDoorPosition() throws RemoteException;

    int getBcmLeftSdcHazzardRequest() throws RemoteException;

    int getBcmLeftSdcMoveCommand() throws RemoteException;

    int getBcmLeftSdcPsdMotorState() throws RemoteException;

    int getBcmLeftSdcSystemErrorState() throws RemoteException;

    int getBcmLeftSdcSystemRunningState() throws RemoteException;

    int getBcmLeftSdcWindowsAutoDownSwitchState() throws RemoteException;

    int getBcmLeftTurnLampStatus() throws RemoteException;

    int getBcmLightMeHomeMode() throws RemoteException;

    int getBcmLockAvasSwitchStatus() throws RemoteException;

    int getBcmLockHazardLightSwitchStatus() throws RemoteException;

    int getBcmLockHornSwitchStatus() throws RemoteException;

    int getBcmLowBeamOffConfirmSt() throws RemoteException;

    int getBcmMaintainModeSwitchStatus() throws RemoteException;

    int getBcmManualFrontLeftWinStatus() throws RemoteException;

    int getBcmManualFrontRightWinStatus() throws RemoteException;

    int getBcmManualRearLeftWinStatus() throws RemoteException;

    int getBcmManualRearRightWinStatus() throws RemoteException;

    int getBcmMirrorAutoFoldSwitchStatus() throws RemoteException;

    int getBcmNearLampState() throws RemoteException;

    int getBcmNfcCardAuthStatus() throws RemoteException;

    byte[] getBcmNfcCardIdInfo() throws RemoteException;

    int getBcmNfcCardSwitchState() throws RemoteException;

    int getBcmParkLightRelatedFMBLightConfigState() throws RemoteException;

    int[] getBcmParkingLampsStates() throws RemoteException;

    int[] getBcmPassengerSeatBeltSbrWarningStatus() throws RemoteException;

    int getBcmPassengerSeatBlowLevel() throws RemoteException;

    int getBcmPollingOpenCfg() throws RemoteException;

    int getBcmPowerMode() throws RemoteException;

    int getBcmPowerOffSource() throws RemoteException;

    int getBcmPsnSeatHeatLevel() throws RemoteException;

    int getBcmRLCwcSwitchState() throws RemoteException;

    int getBcmRRCwcSwitchState() throws RemoteException;

    int getBcmReadyEnableState() throws RemoteException;

    int getBcmRearLeftDomeLightSwitchStatus() throws RemoteException;

    int getBcmRearLeftHeaterErrorState() throws RemoteException;

    int getBcmRearLeftSeatHeatState() throws RemoteException;

    float getBcmRearLeftWinPos() throws RemoteException;

    int getBcmRearRightDomeLightSwitchStatus() throws RemoteException;

    int getBcmRearRightHeaterErrorState() throws RemoteException;

    int getBcmRearRightSeatHeatState() throws RemoteException;

    float getBcmRearRightWinPos() throws RemoteException;

    int getBcmRearViewAutoDownCfg() throws RemoteException;

    int[] getBcmRearViewMirrorsAdjustStates() throws RemoteException;

    int getBcmRearWiperMotorStatus() throws RemoteException;

    int getBcmRearWiperServiceSwitchStatus() throws RemoteException;

    int getBcmReverseMirrorCfgCmd() throws RemoteException;

    int getBcmRightChargePortLockState() throws RemoteException;

    int getBcmRightChildLockSwitchStatus() throws RemoteException;

    int getBcmRightMirrorHorizPos() throws RemoteException;

    int getBcmRightMirrorVerticalPos() throws RemoteException;

    int getBcmRightSdcDenormalizeState() throws RemoteException;

    int getBcmRightSdcDoorPosition() throws RemoteException;

    int getBcmRightSdcHazzardRequest() throws RemoteException;

    int getBcmRightSdcMoveCommand() throws RemoteException;

    int getBcmRightSdcPsdMotorState() throws RemoteException;

    int getBcmRightSdcSystemErrorState() throws RemoteException;

    int getBcmRightSdcSystemRunningState() throws RemoteException;

    int getBcmRightSdcWindowsAutoDownSwitchState() throws RemoteException;

    int getBcmRightTurnLampStatus() throws RemoteException;

    int getBcmSaberLightSwitchStatus() throws RemoteException;

    int getBcmScAntiPinchStatus() throws RemoteException;

    int getBcmScEcuStatus() throws RemoteException;

    int getBcmScIceBreakMode() throws RemoteException;

    int getBcmScLinStatus() throws RemoteException;

    int getBcmScSwitchStatus() throws RemoteException;

    int getBcmScThermalProtectSt() throws RemoteException;

    int getBcmSdcBrakeCloseDoorCfg() throws RemoteException;

    int getBcmSdcKeyCloseCtrlCfg() throws RemoteException;

    int getBcmSdcKeyOpenCtrlCfg() throws RemoteException;

    int getBcmSdcMaxAutoDoorOpeningAngle() throws RemoteException;

    int getBcmSeatBlowLevel() throws RemoteException;

    int getBcmSeatHeatErrStatus() throws RemoteException;

    int getBcmSeatHeatLevel() throws RemoteException;

    int getBcmShadeControllerInitializationSt() throws RemoteException;

    int getBcmShadeControllerMotorStatus() throws RemoteException;

    int getBcmShadeControllerPosition() throws RemoteException;

    int getBcmSoftLvlConfigValue() throws RemoteException;

    int getBcmSteeringWheelHeatingStatus() throws RemoteException;

    int getBcmSuspenWelcomeSwitchState() throws RemoteException;

    int getBcmTargetAsHeightLvlConfigValue() throws RemoteException;

    int getBcmTemporaryStopLockActivateStatus() throws RemoteException;

    int getBcmTrailerHitchSwitchStatus() throws RemoteException;

    int getBcmTrunkActualPosition() throws RemoteException;

    int getBcmTrunkDoorHeight() throws RemoteException;

    int getBcmTrunkOpennerStatus() throws RemoteException;

    int getBcmTrunkSetPositionResponcePosition() throws RemoteException;

    int getBcmTrunkStatus() throws RemoteException;

    int getBcmTrunkWorkModeStatus() throws RemoteException;

    int getBcmTtmDenormalizeStatus() throws RemoteException;

    int getBcmTtmHookMotorStatus() throws RemoteException;

    int getBcmTtmLampConnectStatus() throws RemoteException;

    int getBcmTtmLampFaultStatus() throws RemoteException;

    int getBcmTtmSystemErrorStatus() throws RemoteException;

    int getBcmUnlockResponseMode() throws RemoteException;

    int getBcmWindowLockState() throws RemoteException;

    float getBcmWindowMovePosition(int i) throws RemoteException;

    int[] getBcmWindowsInitSignalLostRequestStatus() throws RemoteException;

    int getBcmWiperInterval() throws RemoteException;

    int getBcmWiperRainDetectSensitivity() throws RemoteException;

    int getBcmWiperServiceMode() throws RemoteException;

    int getBcmWiperSpeedSwitchState() throws RemoteException;

    int[] getBcmWiperSpeedSwitchesStatus() throws RemoteException;

    int[] getBcmXPortAsSystemAllStatus() throws RemoteException;

    int getBlindAreaDetectionWarning() throws RemoteException;

    int getBlindAreaLeftWarning() throws RemoteException;

    int getBlindAreaRightWarning() throws RemoteException;

    int getBmsAcChargeStopReason() throws RemoteException;

    float getBmsAcMaxCurrent() throws RemoteException;

    int getBmsBatteryCapacity() throws RemoteException;

    int getBmsBatteryChargeStatus() throws RemoteException;

    int getBmsBatteryChipSwVersion() throws RemoteException;

    float getBmsBatteryCurrent() throws RemoteException;

    float getBmsBatteryTotalVolt() throws RemoteException;

    int getBmsBatteryType() throws RemoteException;

    float getBmsCellTempMaxNum() throws RemoteException;

    float getBmsCellTempMinNum() throws RemoteException;

    float getBmsChargeCompleteTime() throws RemoteException;

    int getBmsChargeMode() throws RemoteException;

    int getBmsColdestCellNum() throws RemoteException;

    int getBmsDcChargeStopReason() throws RemoteException;

    float getBmsDcCurrent() throws RemoteException;

    float getBmsDcVolt() throws RemoteException;

    int getBmsDtcChargeCurrentOver() throws RemoteException;

    int getBmsDtcErrorStopCurrent() throws RemoteException;

    int getBmsFailureLvl() throws RemoteException;

    int getBmsHottestCellNum() throws RemoteException;

    int getBmsInsulationResistance() throws RemoteException;

    int getBmsIsErrorStatus() throws RemoteException;

    int getBmsMaxTemp() throws RemoteException;

    int getBmsScoIsLowStatus() throws RemoteException;

    float getBmsVoltMax() throws RemoteException;

    int getBmsVoltMaxNum() throws RemoteException;

    float getBmsVoltMin() throws RemoteException;

    int getBmsVoltMinNum() throws RemoteException;

    int getBrightnessLevel() throws RemoteException;

    int getCFChildLockState() throws RemoteException;

    int getCFKeepTempRemainTime() throws RemoteException;

    int getCFKeepTempState() throws RemoteException;

    int getCFKeepTempTime() throws RemoteException;

    int getCFKeepTempWorkState() throws RemoteException;

    int getCFPowerState() throws RemoteException;

    int getCFTempValue() throws RemoteException;

    int getCFWorkMode() throws RemoteException;

    byte[] getCNGPCityMapCtrlResp() throws RemoteException;

    int getCarFridgeDoorState() throws RemoteException;

    float[] getCarPositionInfo() throws RemoteException;

    int getCarpetLightWelcomeState() throws RemoteException;

    int getCcsFaultInfo() throws RemoteException;

    int getCdcFunctionMode() throws RemoteException;

    int[] getChairDirection() throws RemoteException;

    int[] getChairLocationValue() throws RemoteException;

    int[] getChargeAppointTime() throws RemoteException;

    int getChargeHighVoltageLockState() throws RemoteException;

    int getCiuAutoLockSt() throws RemoteException;

    int getCiuCarWash() throws RemoteException;

    int getCiuConfigurationActive() throws RemoteException;

    int getCiuDelayOff() throws RemoteException;

    int getCiuDeleteFaceIdResult() throws RemoteException;

    int getCiuDeliveryUploadMode() throws RemoteException;

    int getCiuDistractionLevel() throws RemoteException;

    int getCiuDistractionStatus() throws RemoteException;

    int getCiuDmsStatus() throws RemoteException;

    int getCiuDvrFormatStatus() throws RemoteException;

    int getCiuDvrLockFb() throws RemoteException;

    int getCiuDvrMode() throws RemoteException;

    int getCiuDvrStatus() throws RemoteException;

    int getCiuErrorType() throws RemoteException;

    int getCiuFaceAction() throws RemoteException;

    int getCiuFaceIDSwitchStatus() throws RemoteException;

    int getCiuFaceIdPrimalStatus() throws RemoteException;

    int getCiuFaceIdStatus() throws RemoteException;

    int getCiuFaceShieldStatus() throws RemoteException;

    int getCiuFatigueLevel() throws RemoteException;

    int getCiuFatigueStatus() throws RemoteException;

    int getCiuLightIntensity() throws RemoteException;

    int getCiuRainSw() throws RemoteException;

    int getCiuSdStatus() throws RemoteException;

    int getCiuStatus() throws RemoteException;

    int getCiuUid() throws RemoteException;

    int getCiuValid() throws RemoteException;

    float getCpuTemperature() throws RemoteException;

    int getCtrlCurr() throws RemoteException;

    int getCtrlTemp() throws RemoteException;

    int getCtrlVolt() throws RemoteException;

    int getCutLinePreventSw() throws RemoteException;

    int getCwcChargeErrorSt() throws RemoteException;

    int getCwcChargeSt() throws RemoteException;

    int getDcdcFailStInfo() throws RemoteException;

    float getDcdcInputCurrent() throws RemoteException;

    int getDcdcInputVoltage() throws RemoteException;

    int getDcdcStatus() throws RemoteException;

    int getDischargeHighVoltageLockState() throws RemoteException;

    int getDoorOpenWarning() throws RemoteException;

    int getDoubleThemeColor() throws RemoteException;

    float getDriveTotalMileage() throws RemoteException;

    int getDriverDoorState() throws RemoteException;

    float getDvTestBatTemp() throws RemoteException;

    float getDvTestMcuTemp() throws RemoteException;

    float getDvTestPcbTemp() throws RemoteException;

    int getDvrEnableState() throws RemoteException;

    float[] getEnvCharacterInfo() throws RemoteException;

    float getEpsSteeringAngle() throws RemoteException;

    float getEpsSteeringAngleSpeed() throws RemoteException;

    int getEpsTorqControlStatus() throws RemoteException;

    float getEpsTorsionBarTorque() throws RemoteException;

    int getEpsWorkMode() throws RemoteException;

    int getEspAbsWorkStatus() throws RemoteException;

    float[] getEspAllWheelSpeed() throws RemoteException;

    int getEspApbSystemDisplayMessage() throws RemoteException;

    int getEspApbSystemStatus() throws RemoteException;

    float getEspCarSpeed() throws RemoteException;

    int getEspDtcFaultStatus() throws RemoteException;

    int getEspEpbDriverOffWarningMsg() throws RemoteException;

    int getEspEpbWarningLampStatus() throws RemoteException;

    int getEspEpsWarninglampStatus() throws RemoteException;

    int getEspHbcRequestStatus() throws RemoteException;

    int getEspIbsBrakeMode() throws RemoteException;

    float getEspIbtBrakeTravelDistance() throws RemoteException;

    int getEspIbtFailureLampRequest() throws RemoteException;

    int getEspInterventionStatus() throws RemoteException;

    int getEspIpuFrontActualRotateSpeed() throws RemoteException;

    float getEspIpuFrontActualTorque() throws RemoteException;

    int getEspIpuFrontMotorActualTemperature() throws RemoteException;

    int getEspIpuRearActualRotateSpeed() throws RemoteException;

    float getEspIpuRearActualTorque() throws RemoteException;

    int getEspIpuRearMotorActualTemperature() throws RemoteException;

    float getEspMasterCylinderPressure() throws RemoteException;

    int getEspOffRoadSwitchStatus() throws RemoteException;

    int getEspTcsWorkStatus() throws RemoteException;

    int getEspTsmFaultStatus() throws RemoteException;

    int getEspTsmSwitchStatus() throws RemoteException;

    int getEspVdcWorkStatus() throws RemoteException;

    int getEspWorkMode() throws RemoteException;

    int getFRCwcChargeErrorSt() throws RemoteException;

    int getFRCwcChargeSt() throws RemoteException;

    int getFarLampAutoSwitch() throws RemoteException;

    int getFatigueDetectionSw() throws RemoteException;

    int getFcwAebSensitivitySwitchStatus() throws RemoteException;

    int getFinishCopyTboxLogResponse() throws RemoteException;

    int getFrontCollisionSecurity() throws RemoteException;

    float[] getFrontRadarData() throws RemoteException;

    int[] getFrontRadarFaultSt() throws RemoteException;

    int[] getFrontRadarLevel() throws RemoteException;

    int[] getGSensorOffset() throws RemoteException;

    int[] getGpsAntPowerControlResponse() throws RemoteException;

    int getGpsResetResp() throws RemoteException;

    float getGpsSpeed() throws RemoteException;

    int getHardwareVersion() throws RemoteException;

    int getHavcCompressorConsumePower() throws RemoteException;

    int getHavcHvhConsumePower() throws RemoteException;

    int getHighSpeedNavigation() throws RemoteException;

    int getHvacAcCtrlType() throws RemoteException;

    int getHvacAcState() throws RemoteException;

    int getHvacAirCirculationPeriod() throws RemoteException;

    int getHvacAirCirculationType() throws RemoteException;

    int getHvacAirCycleMode() throws RemoteException;

    int getHvacAirDistributionAutoControlStatus() throws RemoteException;

    int getHvacAirInTakeAutoControlStatus() throws RemoteException;

    int getHvacAirPurgeSwitchState() throws RemoteException;

    int getHvacAqsSensitivity() throws RemoteException;

    int getHvacAqsSwitchState() throws RemoteException;

    int getHvacAutoDefogSwitchStatus() throws RemoteException;

    int getHvacAutoDefogWorkSt() throws RemoteException;

    int getHvacAutoModePreference() throws RemoteException;

    int getHvacAutoModeState() throws RemoteException;

    int getHvacBlowerCtrlType() throws RemoteException;

    int getHvacCoConcentrationStatus() throws RemoteException;

    int getHvacDefrostMode() throws RemoteException;

    int getHvacDeodorizeSwitchStatus() throws RemoteException;

    int getHvacDisinfSwitchStatus() throws RemoteException;

    int getHvacDrvLeftFanHorPos() throws RemoteException;

    int getHvacDrvLeftFanVerPos() throws RemoteException;

    int getHvacDrvRightFanHorPos() throws RemoteException;

    int getHvacDrvRightFanVerPos() throws RemoteException;

    float getHvacDrvSeatTempValue() throws RemoteException;

    int getHvacEavDrvWindMode() throws RemoteException;

    int getHvacEavPsnWindMode() throws RemoteException;

    int getHvacEconState() throws RemoteException;

    int getHvacErrorStatus() throws RemoteException;

    float getHvacExternalTemp() throws RemoteException;

    int getHvacFanPosition() throws RemoteException;

    int getHvacFanSpeedLevel() throws RemoteException;

    int getHvacFrogingRiskStatus() throws RemoteException;

    float getHvacInnerTemp() throws RemoteException;

    int getHvacLonizerState() throws RemoteException;

    int getHvacMachineStateSwitch() throws RemoteException;

    int getHvacMaxWindSpeedLevel() throws RemoteException;

    int getHvacMinWindSpeedLevel() throws RemoteException;

    int getHvacNewFreshSwitchStatus() throws RemoteException;

    int getHvacOutsideAirQualityLevel() throws RemoteException;

    int getHvacOutsideAirQualityStatus() throws RemoteException;

    int getHvacPm25Value() throws RemoteException;

    int getHvacPowerState() throws RemoteException;

    int getHvacPsnLeftFanHorPos() throws RemoteException;

    int getHvacPsnLeftFanVerPos() throws RemoteException;

    int getHvacPsnRightFanHorPos() throws RemoteException;

    int getHvacPsnRightFanVerPos() throws RemoteException;

    float getHvacPsnSeatTempValue() throws RemoteException;

    int getHvacRearAirDistributionAutoControlStatus() throws RemoteException;

    int getHvacRearAutoModeState() throws RemoteException;

    int getHvacRearFanSpeedLevel() throws RemoteException;

    int getHvacRearWindLessSwitch() throws RemoteException;

    int getHvacRearWindSpeedAutoControlStatus() throws RemoteException;

    int getHvacSelfDrySwStatus() throws RemoteException;

    int getHvacSfsChannel() throws RemoteException;

    int getHvacSfsConcentrationStatus() throws RemoteException;

    int getHvacSfsSwitchStatus() throws RemoteException;

    int[] getHvacSfsTypeInChannels() throws RemoteException;

    int getHvacSweepWindStatus() throws RemoteException;

    int getHvacTempColor() throws RemoteException;

    int getHvacTempLeftSyncState() throws RemoteException;

    int getHvacTempRightSyncState() throws RemoteException;

    float getHvacTempSecRowLeftValue() throws RemoteException;

    float getHvacTempSecRowRightValue() throws RemoteException;

    int getHvacTempSyncMode() throws RemoteException;

    float getHvacTempThirdRowValue() throws RemoteException;

    int getHvacThirdRowWindBlowMode() throws RemoteException;

    int getHvacWarpSpeedCoolingSwitchStatus() throws RemoteException;

    int getHvacWarpSpeedWarmingSwitchStatus() throws RemoteException;

    int getHvacWindSpeedAutoControlStatus() throws RemoteException;

    int getIcmAlarmVolume() throws RemoteException;

    int getIcmBrakeFluidLevelWarningMessage() throws RemoteException;

    int getIcmBrightness() throws RemoteException;

    int getIcmCabinAiFeedback() throws RemoteException;

    int getIcmConnectionState() throws RemoteException;

    String getIcmCrashInfo() throws RemoteException;

    String getIcmDashboardLightsStatus() throws RemoteException;

    int getIcmDayNightSwitch() throws RemoteException;

    String getIcmDiagnosisInfo() throws RemoteException;

    float getIcmDriverTempValue() throws RemoteException;

    String getIcmEcuUpdateResult() throws RemoteException;

    String getIcmLogCompressInformation() throws RemoteException;

    int getIcmMediaSource() throws RemoteException;

    int getIcmNavigation() throws RemoteException;

    int getIcmScreenLight() throws RemoteException;

    int getIcmTemperature() throws RemoteException;

    int getIcmTimeFormat() throws RemoteException;

    int getIcmUpdateProgress() throws RemoteException;

    String getIcmUpdateResponse() throws RemoteException;

    int getIcmUpdateResult() throws RemoteException;

    String getIcmUpdatingPartitionAndProgress() throws RemoteException;

    int getIcmWindBlowMode() throws RemoteException;

    int getIcmWindLevel() throws RemoteException;

    int getIcmWindMode() throws RemoteException;

    int getIcmWindPower() throws RemoteException;

    int getImsAutoVisionSt() throws RemoteException;

    int getImsBrightLevel() throws RemoteException;

    int getImsModeState() throws RemoteException;

    int getImsSystemSt() throws RemoteException;

    int getImsVisionAngleLevl() throws RemoteException;

    int getImsVisionVerticalLevel() throws RemoteException;

    long[] getImuAddData() throws RemoteException;

    int[] getImuDiagMessage() throws RemoteException;

    float[] getImuNavigationData() throws RemoteException;

    float[] getImuNavigationDataFromCan() throws RemoteException;

    int getImuNavigationSatellitesRssi() throws RemoteException;

    float[] getImuQuatData() throws RemoteException;

    int getImuSatellitesNumber() throws RemoteException;

    float[] getImuSystemState() throws RemoteException;

    float[] getImuSystemStateAndSpeed() throws RemoteException;

    float[] getImuSystemStateAndSpeedFromCan() throws RemoteException;

    float[] getImuSystemStateFromCan() throws RemoteException;

    int[] getImuTboxPackGgaData() throws RemoteException;

    float[] getImuUbxPvtData1() throws RemoteException;

    float[] getImuUbxPvtData2() throws RemoteException;

    float[] getImuUbxRawXData() throws RemoteException;

    float[] getImuUbxSfrbxData() throws RemoteException;

    int getInsulativeResistanceValue() throws RemoteException;

    int getIntelligentCallButton() throws RemoteException;

    int getIntelligentSpeedLimit() throws RemoteException;

    int getIpuFailStInfo() throws RemoteException;

    int getIsHvCutOffStatus() throws RemoteException;

    int getKeyRemoteSMButton() throws RemoteException;

    int getKeyRemoteType() throws RemoteException;

    int getLCMSAutoBrightSwSt() throws RemoteException;

    int getLCMSBright() throws RemoteException;

    int[] getLCMSBrightWithSource() throws RemoteException;

    int getLCMSDanObjectRecSwSt() throws RemoteException;

    int getLCMSHighSpeedViewSwSt() throws RemoteException;

    int getLCMSLowSpeedViewSwSt() throws RemoteException;

    int getLCMSReverseAssitSwSt() throws RemoteException;

    int getLCMSTurnExtSwSt() throws RemoteException;

    int getLCMSViewRecoverySt() throws RemoteException;

    float[] getLRCMSAllExteriorMirrorsPositions() throws RemoteException;

    int getLRCMSStoreBrightSource() throws RemoteException;

    int getLRCMSViewAngle() throws RemoteException;

    int getLaneAlignmentAssist() throws RemoteException;

    int getLaneChangeAssist() throws RemoteException;

    int getLaneDepartureWarning() throws RemoteException;

    int getLaneSupportSystemStateAndWarning() throws RemoteException;

    float getLastChargeMileage() throws RemoteException;

    float getLastStartUpMileage() throws RemoteException;

    int getLeavePollingLockSw() throws RemoteException;

    int[] getLeftAndRightTurnLampsActiveStatus() throws RemoteException;

    int[] getLeftFrontDoorOpened() throws RemoteException;

    int getLeftSdcIndexN() throws RemoteException;

    int getLeftSlideDoorLockSt() throws RemoteException;

    int getLeftSlideDoorMoode() throws RemoteException;

    int getLeftSlideDoorStatus() throws RemoteException;

    int getLluAcChargeMode() throws RemoteException;

    int getLluAcChargingCfg() throws RemoteException;

    int getLluBreathMode() throws RemoteException;

    int getLluChargingSwitch() throws RemoteException;

    int getLluCurrentFunction() throws RemoteException;

    int getLluDcChargeMode() throws RemoteException;

    int getLluDcChargingCfg() throws RemoteException;

    int getLluEnableStatus() throws RemoteException;

    int getLluFindCarSwitchState() throws RemoteException;

    int getLluLockSocDspSwitch() throws RemoteException;

    int getLluLockUnlockSocDspSwitchState() throws RemoteException;

    int getLluPhotoMode() throws RemoteException;

    int getLluPhotoSwitch() throws RemoteException;

    int getLluScriptStResponse() throws RemoteException;

    int getLluShowOffMode() throws RemoteException;

    int getLluShowOffSwitch() throws RemoteException;

    int getLluSleepMode() throws RemoteException;

    int getLluSleepSwitch() throws RemoteException;

    int getLluSpeedLimitCfg() throws RemoteException;

    int getLluUnLockSocDspSwitch() throws RemoteException;

    int getLluWakeWaitMode() throws RemoteException;

    int getLluWakeWaitSwitch() throws RemoteException;

    int getMaxHavcTemperature() throws RemoteException;

    int getMcuAtlsState() throws RemoteException;

    int getMcuAutoPowerOffSwitchState() throws RemoteException;

    int getMcuBacklightIcDriverState() throws RemoteException;

    int getMcuBacklightTemperature() throws RemoteException;

    int getMcuBatteryStatus() throws RemoteException;

    byte[] getMcuBleAccountData() throws RemoteException;

    int getMcuBurglarAlarmState() throws RemoteException;

    int getMcuCameraStatus() throws RemoteException;

    int getMcuChairWelcomeMode() throws RemoteException;

    int getMcuChargeStatus() throws RemoteException;

    int getMcuCidState() throws RemoteException;

    int getMcuCiuState() throws RemoteException;

    int[] getMcuDtcReportEv() throws RemoteException;

    byte[] getMcuDvBattMsg() throws RemoteException;

    int getMcuFaceIdMode() throws RemoteException;

    int getMcuFaceIdSwState() throws RemoteException;

    String getMcuFactoryDisplayTypeMsgToMcu() throws RemoteException;

    int getMcuFactoryModeSwitchStatus() throws RemoteException;

    byte[] getMcuFaultInfo() throws RemoteException;

    String getMcuHardWareId() throws RemoteException;

    int getMcuIgState() throws RemoteException;

    int getMcuKeyStartStatus() throws RemoteException;

    int getMcuLampStatus() throws RemoteException;

    int getMcuLluChargingSwitch() throws RemoteException;

    int getMcuLluEnableStatus() throws RemoteException;

    int getMcuLluPhotoSwitch() throws RemoteException;

    int getMcuLluPowerRequestSwitchStatus() throws RemoteException;

    int getMcuLluShowOffSwitch() throws RemoteException;

    int getMcuLluSleepSwitch() throws RemoteException;

    int getMcuLluWakeWaitSwitch() throws RemoteException;

    int getMcuLluWorkStatus() throws RemoteException;

    int getMcuMonitorState() throws RemoteException;

    int getMcuOcuState() throws RemoteException;

    int getMcuPowerOffCountdownNotice() throws RemoteException;

    int[] getMcuPsuOtaFeedbackMsg() throws RemoteException;

    int getMcuPsuTestResult() throws RemoteException;

    int getMcuRemindWarningStatus() throws RemoteException;

    int getMcuRequestedMessage() throws RemoteException;

    long getMcuRtcTime() throws RemoteException;

    int getMcuRvcEnable() throws RemoteException;

    int getMcuTemporaryFactoryStatus() throws RemoteException;

    int getMcuTrunkPowerOffDelay() throws RemoteException;

    int getMcuTrunkPowerOnRequest() throws RemoteException;

    int getMcuTrunkPowerStatus() throws RemoteException;

    int getMcuUpdateReqStatus() throws RemoteException;

    String getMcuVersion() throws RemoteException;

    int getMcuWifiHotspotRequest() throws RemoteException;

    float getMeterMileageA() throws RemoteException;

    float getMeterMileageB() throws RemoteException;

    float[] getMileageExtraParams() throws RemoteException;

    int getMinHavcTemperature() throws RemoteException;

    int getMotorStatus() throws RemoteException;

    int getMotorTemp() throws RemoteException;

    int getMsmDriverHeadrestStatus() throws RemoteException;

    int getMsmDriverSeatCushTiltPosition() throws RemoteException;

    int getMsmDriverSeatLegHorzPosition() throws RemoteException;

    int getMsmDriverSeatLumberSwitchCenterPressStatus() throws RemoteException;

    int getMsmDriverSeatLumberSwitchMode() throws RemoteException;

    int[] getMsmDriverSeatMassgElem() throws RemoteException;

    int getMsmDriverSeatMassgErrorStatus() throws RemoteException;

    int getMsmDriverSeatMassgIntensity() throws RemoteException;

    int getMsmDriverSeatMassgProgMode() throws RemoteException;

    int getMsmDrvSeatBackPosition() throws RemoteException;

    int getMsmDrvSeatHorizPosition() throws RemoteException;

    int getMsmDrvSeatLegPosition() throws RemoteException;

    int getMsmDrvSeatVertiPosition() throws RemoteException;

    int getMsmPassengerHeadrestStatus() throws RemoteException;

    int getMsmPassengerSeatBackPosition() throws RemoteException;

    int getMsmPassengerSeatCushExtPosition() throws RemoteException;

    int getMsmPassengerSeatHorizontalPosition() throws RemoteException;

    int getMsmPassengerSeatLegHorzPosition() throws RemoteException;

    int getMsmPassengerSeatLumberSwitchCenterPressStatus() throws RemoteException;

    int getMsmPassengerSeatLumberSwitchMode() throws RemoteException;

    int[] getMsmPassengerSeatMassgElem() throws RemoteException;

    int getMsmPassengerSeatMassgErrorStatus() throws RemoteException;

    int getMsmPassengerSeatMassgIntensity() throws RemoteException;

    int getMsmPassengerSeatMassgProgMode() throws RemoteException;

    int getMsmPassengerSeatVerticalPosition() throws RemoteException;

    int getMsmPassengerWelcomeSwitch() throws RemoteException;

    int getMsmSecRowLeftSeatCushExtPosition() throws RemoteException;

    int getMsmSecRowLeftSeatLegHorzPosition() throws RemoteException;

    int[] getMsmSecRowLeftSeatMassgElem() throws RemoteException;

    int getMsmSecRowLeftSeatMassgErrorStatus() throws RemoteException;

    int getMsmSecRowLeftSeatMassgIntensity() throws RemoteException;

    int getMsmSecRowLeftSeatMassgProgMode() throws RemoteException;

    int getMsmSecRowRightSeatCushExtPosition() throws RemoteException;

    int getMsmSecRowRightSeatLegHorzPosition() throws RemoteException;

    int[] getMsmSecRowRightSeatMassgElem() throws RemoteException;

    int getMsmSecRowRightSeatMassgErrorStatus() throws RemoteException;

    int getMsmSecRowRightSeatMassgIntensity() throws RemoteException;

    int getMsmSecRowRightSeatMassgProgMode() throws RemoteException;

    int getMsmSecrowLtSeatTiltPosition() throws RemoteException;

    int getMsmSecrowRtSeatTiltPosition() throws RemoteException;

    int getMsmtLeftSeatFoldFunSt() throws RemoteException;

    int getMsmtRightSeatFoldFunSt() throws RemoteException;

    int getMsmtSeatStowFunSt() throws RemoteException;

    String getNaviBmpInfoRequiredByIcm() throws RemoteException;

    int getNearePollingUnLockSw() throws RemoteException;

    int getNearestEnableRadar() throws RemoteException;

    int getNetWorkType() throws RemoteException;

    int getOTAProgress() throws RemoteException;

    int getOtaMcuReqUpdatefile() throws RemoteException;

    int getOtaMcuUpdateStatus() throws RemoteException;

    float[] getParkSlotInfo() throws RemoteException;

    int getParkingStatus() throws RemoteException;

    int getPhoneParkType() throws RemoteException;

    byte[] getPhoneRemoteAPInformation() throws RemoteException;

    int getPhoneSMButton() throws RemoteException;

    int getPmStatus() throws RemoteException;

    byte[] getPmStatusWithParameter() throws RemoteException;

    int getPollingWelcomeState() throws RemoteException;

    int getQuitNgpOddSt() throws RemoteException;

    int getRLCwcChargeErrorSt() throws RemoteException;

    int getRLCwcChargeSt() throws RemoteException;

    int getRRCwcChargeErrorSt() throws RemoteException;

    int getRRCwcChargeSt() throws RemoteException;

    float[] getRadarDataInfo() throws RemoteException;

    int getRadarWarningVoiceStatus() throws RemoteException;

    int[] getRadioFrequency() throws RemoteException;

    String getRadioStatus() throws RemoteException;

    int getRadioVolumeAutoFocus() throws RemoteException;

    int getRearCollisionSecurity() throws RemoteException;

    int getRearCrossEmergencyWarning() throws RemoteException;

    int getRearCrossLeftWarning() throws RemoteException;

    int getRearCrossRightWarning() throws RemoteException;

    int getRearHvacFanPosition() throws RemoteException;

    int getRearHvacPowerState() throws RemoteException;

    int getRearLogLight() throws RemoteException;

    int getRemoteDiagCaptureRequest() throws RemoteException;

    int getRightRightSdcIndexN() throws RemoteException;

    int getRightSlideDoorLockSt() throws RemoteException;

    int getRightSlideDoorMoode() throws RemoteException;

    int getRightSlideDoorStatus() throws RemoteException;

    int getRollSpeed() throws RemoteException;

    int getRoutingForTboxResponse() throws RemoteException;

    String getSRHeartBeatInfo() throws RemoteException;

    int[] getScreenTempValue() throws RemoteException;

    int[] getScu322LogData() throws RemoteException;

    int[] getScu322LogDataD20() throws RemoteException;

    int[] getScu3FDLogData() throws RemoteException;

    int[] getScu3FELogData() throws RemoteException;

    int getScuAccExitReason() throws RemoteException;

    int getScuAccLkaWarning() throws RemoteException;

    int getScuAebAlarmSwitchState() throws RemoteException;

    int getScuAlarmFaultStatus() throws RemoteException;

    int getScuAlcCtrlRemindInfo() throws RemoteException;

    int[] getScuAllSrrRadarEmissStatus() throws RemoteException;

    float[] getScuAltimeter() throws RemoteException;

    int getScuAssLineChanged() throws RemoteException;

    int getScuBsdStatus() throws RemoteException;

    int getScuCutInPreventionWarning() throws RemoteException;

    int getScuDisplayCruiseSpeed() throws RemoteException;

    int getScuDoorsLRadarDisplayLevel() throws RemoteException;

    int getScuDoorsLRadarDistance() throws RemoteException;

    int[] getScuDoorsObstacleDetectionSt() throws RemoteException;

    int getScuDoorsRRadarDisplayLevel() throws RemoteException;

    int getScuDoorsRRadarDistance() throws RemoteException;

    int[] getScuDoorsRadarDisplayLevel() throws RemoteException;

    int[] getScuDoorsRadarDistance() throws RemoteException;

    int getScuDsmPrompt() throws RemoteException;

    int getScuDsmStatus() throws RemoteException;

    int getScuElkSwitchState() throws RemoteException;

    int getScuErrorTips() throws RemoteException;

    int getScuExtraLatCtrlRemindInfo() throws RemoteException;

    int getScuFishEyeCamFailureSt() throws RemoteException;

    int getScuFrontMinDistance() throws RemoteException;

    int getScuFsdSwitchState() throws RemoteException;

    int getScuHmiDopRemind() throws RemoteException;

    int getScuKeyPark() throws RemoteException;

    float[] getScuLAvmData() throws RemoteException;

    int getScuLccExitReason() throws RemoteException;

    int getScuLdwLkaSwitchStatus() throws RemoteException;

    int getScuLdwStatus() throws RemoteException;

    int getScuLeftDoorOpenWarning() throws RemoteException;

    int[] getScuLeftRightBlindSpotDetectionSwitchStatus() throws RemoteException;

    int[] getScuLeftRightDoorOpenWarningSwitchStatus() throws RemoteException;

    int[] getScuLeftRightRearCollisionSwitchStatus() throws RemoteException;

    int[] getScuLeftRightRearCrossTrafficAlertStatus() throws RemoteException;

    int getScuLeftSdcBlindStatus() throws RemoteException;

    int getScuLeftSdcRadarDistance() throws RemoteException;

    int getScuLeftSdcRadarErrorStatus() throws RemoteException;

    int getScuLeftSdcRadarHallCounter() throws RemoteException;

    int getScuLeftSdcRadarPeakLevel() throws RemoteException;

    int getScuLeftSdcRadarRt() throws RemoteException;

    int getScuLeftSdcRadarStatus() throws RemoteException;

    int getScuLeftSdcRadarStatusCcp() throws RemoteException;

    int getScuLeftSdcRadarTof() throws RemoteException;

    int getScuLeftSdcRadarWaveWidth() throws RemoteException;

    int getScuLeftSdcSceneStatus() throws RemoteException;

    int getScuLeftSdcURadarDistance() throws RemoteException;

    int getScuLkaState() throws RemoteException;

    int getScuLkaSwitchState() throws RemoteException;

    float[] getScuLocatData() throws RemoteException;

    float[] getScuLocatDataWithZ() throws RemoteException;

    int getScuMainCamFailureSt() throws RemoteException;

    int getScuMemoryParkingState() throws RemoteException;

    int getScuModeIndex() throws RemoteException;

    int[] getScuMrrAssistSystemStates() throws RemoteException;

    int getScuMrrFailureSt() throws RemoteException;

    int getScuMrrRadarEmissStatus() throws RemoteException;

    int getScuNarrowCamFailureSt() throws RemoteException;

    int getScuNgpAvoidTruckSwSt() throws RemoteException;

    int getScuNgpDriverConfirmLaneChangeSwSt() throws RemoteException;

    int getScuNgpInfoTips1() throws RemoteException;

    int getScuNgpLaneChangeMode() throws RemoteException;

    int getScuNgpLcTips1() throws RemoteException;

    int getScuNgpModeStatus() throws RemoteException;

    int getScuNgpOperationButtonSt() throws RemoteException;

    int getScuNgpPreferFastLaneSwSt() throws RemoteException;

    int getScuNgpRemindMode() throws RemoteException;

    int getScuNgpTipsWindowsSwSt() throws RemoteException;

    int getScuOperationTips() throws RemoteException;

    int getScuParkByMemorySwSt() throws RemoteException;

    float[] getScuParkingProgress() throws RemoteException;

    int getScuPhoneSmMode() throws RemoteException;

    float[] getScuRAvmData() throws RemoteException;

    int getScuRadarDisplayActive() throws RemoteException;

    int getScuRadarVoiceActive() throws RemoteException;

    int getScuRadarVoiceTone() throws RemoteException;

    int getScuRctaStatus() throws RemoteException;

    int getScuRearCollisionWarning() throws RemoteException;

    int getScuRearMinDistance() throws RemoteException;

    int getScuRearMirrorControlState() throws RemoteException;

    int getScuRemoteFlag() throws RemoteException;

    int getScuRightDoorOpenWarning() throws RemoteException;

    int getScuRightSdcBlindStatus() throws RemoteException;

    int getScuRightSdcRadarDistance() throws RemoteException;

    int getScuRightSdcRadarErrorStatus() throws RemoteException;

    int getScuRightSdcRadarHallCounter() throws RemoteException;

    int getScuRightSdcRadarPeakLevel() throws RemoteException;

    int getScuRightSdcRadarRt() throws RemoteException;

    int getScuRightSdcRadarStatus() throws RemoteException;

    int getScuRightSdcRadarStatusCcp() throws RemoteException;

    int getScuRightSdcRadarTof() throws RemoteException;

    int getScuRightSdcRadarWaveWidth() throws RemoteException;

    int getScuRightSdcSceneStatus() throws RemoteException;

    int getScuRightSdcURadarDistance() throws RemoteException;

    int getScuRoadVoiceTips() throws RemoteException;

    int getScuSdcAutoModeStatus() throws RemoteException;

    int getScuSdcCtrlIndex1() throws RemoteException;

    int getScuSdcCtrlIndex2() throws RemoteException;

    int[] getScuSdcRadarFusion() throws RemoteException;

    int getScuSdcTips() throws RemoteException;

    int getScuSdcTts() throws RemoteException;

    int getScuSdcUltrasonicRadarVoiceTone() throws RemoteException;

    float[] getScuSensorData() throws RemoteException;

    int[] getScuSideCamsFailureSt() throws RemoteException;

    int getScuSlaAlarmSwitchState() throws RemoteException;

    int getScuSlaStatus() throws RemoteException;

    float[] getScuSlotData() throws RemoteException;

    float[] getScuSlotForPark() throws RemoteException;

    int[] getScuSlotTheta() throws RemoteException;

    int getScuSlotsNumber() throws RemoteException;

    int getScuSpeedLimitControlSystemState() throws RemoteException;

    int getScuSpeedLimitDriverConfirmStatus() throws RemoteException;

    int getScuSpeedLimitRange() throws RemoteException;

    int getScuSpeedLimitRemindVoice() throws RemoteException;

    int getScuSpeedLimitSwitchState() throws RemoteException;

    int getScuSteeringWheelEps() throws RemoteException;

    int getScuSuperParkMode() throws RemoteException;

    int[] getScuTargetParkingPosition() throws RemoteException;

    float[] getScuURadarDataInfo() throws RemoteException;

    int getScuXpilot3Status() throws RemoteException;

    int getSeatErrorState() throws RemoteException;

    int getSecRowLeftBlowLevel() throws RemoteException;

    int getSecRowLeftSeatFuncSt() throws RemoteException;

    int[] getSecRowLeftSeatPos() throws RemoteException;

    int getSecRowLtSeatAnglePos() throws RemoteException;

    int getSecRowLtSeatHeadHorzPos() throws RemoteException;

    int getSecRowLtSeatHeadVerticalPos() throws RemoteException;

    int getSecRowLtSeatHorzPos() throws RemoteException;

    int getSecRowLtSeatLegVerticalPos() throws RemoteException;

    int getSecRowLtSeatState() throws RemoteException;

    int getSecRowRightBlowLevel() throws RemoteException;

    int getSecRowRightSeatFuncSt() throws RemoteException;

    int[] getSecRowRightSeatPos() throws RemoteException;

    int getSecRowRtSeatAnglePos() throws RemoteException;

    int getSecRowRtSeatHeadHorzPos() throws RemoteException;

    int getSecRowRtSeatHeadVerticalPos() throws RemoteException;

    int getSecRowRtSeatHorzPos() throws RemoteException;

    int getSecRowRtSeatLegVerticalPos() throws RemoteException;

    int getSecRowRtSeatState() throws RemoteException;

    int getSfmAnglePos() throws RemoteException;

    int getSfmCtrlState() throws RemoteException;

    int getSideReversingWarning() throws RemoteException;

    void getSimStatusAsync() throws RemoteException;

    float getSpcGrossEnergyGeneration() throws RemoteException;

    float getSpcRecentEnergyGeneration() throws RemoteException;

    float getSpcSolarPower() throws RemoteException;

    int getSpcSolarWorkSt() throws RemoteException;

    int getSpdLimitWarnType() throws RemoteException;

    int getSpeedLimitWarningSwitch() throws RemoteException;

    int getSpeedLimitWarningValue() throws RemoteException;

    int getSpeedUpChargeMode() throws RemoteException;

    int getSrsAirbagFaultStatus() throws RemoteException;

    int getSrsBackLeftBeltFastenStatus() throws RemoteException;

    int getSrsBackMiddleBeltFastenStatus() throws RemoteException;

    int getSrsBackRightBeltFastenStatus() throws RemoteException;

    int getSrsCrashOutputStatus() throws RemoteException;

    int getSrsDrvBeltFastenStatus() throws RemoteException;

    int getSrsPassengerCrashOccurSwSt() throws RemoteException;

    int getSrsPsnBeltFastenStatus() throws RemoteException;

    int getSrsRearLeftSeatOccupancyStatus() throws RemoteException;

    int getSrsRearMiddleSeatOccupancyStatus() throws RemoteException;

    int getSrsRearRightSeatOccupancyStatus() throws RemoteException;

    int getSrsSelfCheckStatus() throws RemoteException;

    int getStartCopyTboxLogResponse() throws RemoteException;

    String getStartTboxOTAResponse() throws RemoteException;

    void getStealthMode() throws RemoteException;

    float getSteerWheelRotationAngle() throws RemoteException;

    String getStopTboxOTAResponse() throws RemoteException;

    int[] getSwsButtonsRawData() throws RemoteException;

    String getTBoxBandModem() throws RemoteException;

    int getTBoxChargeLimitValue() throws RemoteException;

    int getTBoxConnectionStatus() throws RemoteException;

    String getTBoxLastApnMsg() throws RemoteException;

    int getTBoxLastBandModemMsg() throws RemoteException;

    String getTBoxLastModemMsg() throws RemoteException;

    String getTBoxModemInfo() throws RemoteException;

    float[] getTailRadarData() throws RemoteException;

    int[] getTailRadarFaultSt() throws RemoteException;

    int[] getTailRadarLevel() throws RemoteException;

    int getTbox4GUpgradingProgress() throws RemoteException;

    int getTboxACChargeUnlockST() throws RemoteException;

    int getTboxAutoPowerOffSt() throws RemoteException;

    int getTboxAvpStartStatus() throws RemoteException;

    int[] getTboxBatteryKeepTempAppointTime() throws RemoteException;

    String getTboxCanControlMsg() throws RemoteException;

    int getTboxCancelPowerOffSt() throws RemoteException;

    String getTboxDvBattMsg() throws RemoteException;

    String getTboxDvTempMsg() throws RemoteException;

    int getTboxEcallMuteRequest() throws RemoteException;

    int getTboxEcallState() throws RemoteException;

    String getTboxFactoryPreCert() throws RemoteException;

    int getTboxGpsMgaResponse() throws RemoteException;

    int getTboxIOTBusinessType() throws RemoteException;

    int getTboxModemCaptureResponse() throws RemoteException;

    String getTboxMultiBleRenewalResponse() throws RemoteException;

    String getTboxNetmConfInfo() throws RemoteException;

    String getTboxPigeonNotification() throws RemoteException;

    int[] getTboxPowerOffCountdown() throws RemoteException;

    String getTboxPsuMsg() throws RemoteException;

    int getTboxRemoteBatteryKeepTempReq() throws RemoteException;

    int getTboxRemoteLluMode() throws RemoteException;

    String getTboxRenewalPartsResponse() throws RemoteException;

    int getTboxRepairModeState() throws RemoteException;

    long getTboxRtcTimeStamp() throws RemoteException;

    int[] getTboxSoldierGsensorData() throws RemoteException;

    int getTboxSoldierSwState() throws RemoteException;

    int getTboxSoldierWorkState() throws RemoteException;

    int getTboxSoliderCameraState() throws RemoteException;

    int getTboxSoliderEnableState() throws RemoteException;

    int getTboxTmcuUpgradingProgress() throws RemoteException;

    int getTboxToggleGpsLogSwitchResult() throws RemoteException;

    String getTboxUpgradePrepareResponse() throws RemoteException;

    void getTboxVersionInfoAsync() throws RemoteException;

    String getTboxVersionInfoResponse() throws RemoteException;

    int getThemeFirstColor() throws RemoteException;

    int getThemeSecondColor() throws RemoteException;

    float getTorque() throws RemoteException;

    int getTpmsAbnormalTirePressureWarnLampStatus() throws RemoteException;

    int[] getTpmsAllSensorStatus() throws RemoteException;

    int[] getTpmsAllTirePressureWarnings() throws RemoteException;

    int[] getTpmsAllTireTemperature() throws RemoteException;

    int[] getTpmsAllTireTemperatureWarnings() throws RemoteException;

    int getTpmsSystemFaultWarnLampStatus() throws RemoteException;

    int getTpmsTirePressureStatus() throws RemoteException;

    float getTpmsTirePressureValue(int i) throws RemoteException;

    int getTpmsTirePressureWarningInfo(int i) throws RemoteException;

    int[] getTpmsllTirePerssureSensorStatus() throws RemoteException;

    int getTrafficSignRecognition() throws RemoteException;

    int getTrdLeftDomeLightSwitchStatus() throws RemoteException;

    int getTrdRightDomeLightSwitchStatus() throws RemoteException;

    int getTrdRowLeftSeatTiltState() throws RemoteException;

    int getTrdRowLtSeatHeadMoveState() throws RemoteException;

    int getTrdRowLtSeatHeadVerticalPos() throws RemoteException;

    int getTrdRowLtSeatTiltPos() throws RemoteException;

    int getTrdRowMidSeatHeadMoveState() throws RemoteException;

    int getTrdRowMidSeatHeadVerticalPos() throws RemoteException;

    int getTrdRowRightSeatTiltState() throws RemoteException;

    int getTrdRowRtSeatHeadMoveState() throws RemoteException;

    int getTrdRowRtSeatHeadVerticalPos() throws RemoteException;

    int getTrdRowRtSeatTiltPos() throws RemoteException;

    int[] getTrdRowSeatAllPos() throws RemoteException;

    int getTrdRowSeatStowState() throws RemoteException;

    String getUpgradingTboxByUdiskResponse() throws RemoteException;

    int getV2LDischargeErrorReason() throws RemoteException;

    int getVCUAWDModeSw() throws RemoteException;

    int getVMCRwsSwitchState() throws RemoteException;

    int getVMCSystemState() throws RemoteException;

    int getVMCZWalkModeState() throws RemoteException;

    int getVcuAcChargCurrentMaxLimitedValue() throws RemoteException;

    float getVcuAcChargeCur() throws RemoteException;

    float getVcuAcChargeCurAfterVoltBoosted() throws RemoteException;

    float getVcuAcChargeVolt() throws RemoteException;

    float getVcuAcChargeVoltAfterVoltBoosted() throws RemoteException;

    int getVcuAcInputStatus() throws RemoteException;

    float getVcuAcPowerConsume() throws RemoteException;

    int getVcuAccPedalStatus() throws RemoteException;

    int getVcuAsDriveModeStatus() throws RemoteException;

    int getVcuAutoEasyLoadingSwitchStatus() throws RemoteException;

    int getVcuAvalibleDrivingDistance() throws RemoteException;

    float getVcuAvalibleDrivingDistanceFloat() throws RemoteException;

    float getVcuAvgVehiclePowerConsume() throws RemoteException;

    int getVcuBatBumpRecrdRequest() throws RemoteException;

    int getVcuBatteryCoolingState() throws RemoteException;

    float getVcuBatteryCur() throws RemoteException;

    int getVcuBatteryLevelPercent() throws RemoteException;

    float getVcuBatteryMinTemperature() throws RemoteException;

    float getVcuBatteryVolt() throws RemoteException;

    int getVcuBatteryWarmingStatus() throws RemoteException;

    float getVcuBatteryWastageStatus() throws RemoteException;

    float getVcuBmsActualSocValue() throws RemoteException;

    int getVcuBmsBatteryAverageTemperature() throws RemoteException;

    float getVcuBmsBatteryCurrent() throws RemoteException;

    int getVcuBmsBatteryVoltage() throws RemoteException;

    int getVcuBmsChargeStatus() throws RemoteException;

    float getVcuBmsCurrentBatterySocDisp() throws RemoteException;

    float getVcuBmsMaximumAvailChargePower() throws RemoteException;

    float getVcuBmsMaximumAvailDischargePower() throws RemoteException;

    int getVcuBrakeLightOnOffStatus() throws RemoteException;

    int getVcuBreakPedalStatus() throws RemoteException;

    int getVcuCarStationaryStatus() throws RemoteException;

    int getVcuCdcuChargeGunStatus() throws RemoteException;

    float getVcuChargeDischargePower() throws RemoteException;

    int getVcuChargeError() throws RemoteException;

    float getVcuChargeHighVoltageLoadPower() throws RemoteException;

    int getVcuChargeMode() throws RemoteException;

    int getVcuChargeRemainingTime() throws RemoteException;

    int getVcuChargeSocQuantity() throws RemoteException;

    float getVcuChargeSocQuantityFloat() throws RemoteException;

    int getVcuChargeStatus() throws RemoteException;

    int getVcuChargerLowVolSt() throws RemoteException;

    int getVcuChargingPlugStatus() throws RemoteException;

    int getVcuCltcAvailableDrivingDistance() throws RemoteException;

    float getVcuCltcAvailableDrivingDistanceFloat() throws RemoteException;

    int getVcuCruiseControlStatus() throws RemoteException;

    float getVcuDcChargeCur() throws RemoteException;

    float getVcuDcChargeVolt() throws RemoteException;

    int getVcuDcPreWarmInStatus() throws RemoteException;

    int getVcuDcPreWarmRequestStatus() throws RemoteException;

    int getVcuDcPreWarmSwitchStatus() throws RemoteException;

    int getVcuDepolarizeStatus() throws RemoteException;

    int getVcuDisCargeLimit() throws RemoteException;

    int getVcuDischargeQuantity() throws RemoteException;

    float getVcuDischargeQuantityFloat() throws RemoteException;

    int getVcuDriveMileIncreaseStatus() throws RemoteException;

    int getVcuDrivingMode() throws RemoteException;

    float getVcuDynamicAvailableDrivingDistance() throws RemoteException;

    int getVcuEbsBatterySoc() throws RemoteException;

    int getVcuElectricQuantityPercent() throws RemoteException;

    int getVcuEnduranceMileageMode() throws RemoteException;

    int getVcuEnergyRecycleLevel() throws RemoteException;

    int getVcuErhDebugInfo() throws RemoteException;

    int getVcuEvErrLampDsp() throws RemoteException;

    int getVcuEvErrMsgDsp() throws RemoteException;

    int getVcuEvsysReadyState() throws RemoteException;

    int getVcuExhibModeSwitchStatus() throws RemoteException;

    int getVcuExtremeFastChargingSt() throws RemoteException;

    int getVcuGearState() throws RemoteException;

    int getVcuKeyBatteryStatus() throws RemoteException;

    float getVcuLastHundredKmAverageVehConsume() throws RemoteException;

    float getVcuLastTwentyKmAverageVehConsume() throws RemoteException;

    float getVcuLastTwoPointFiveKmAverageVehConsume() throws RemoteException;

    int getVcuMotorPowerMode() throws RemoteException;

    int getVcuNGearWarningSwitchStatus() throws RemoteException;

    float getVcuNedcAvalibleDrivingDistanceFloat() throws RemoteException;

    float getVcuObcAcCurrent() throws RemoteException;

    float getVcuObcAcVoltage() throws RemoteException;

    int getVcuObcAcVoltageStatus() throws RemoteException;

    int getVcuObcFaultPhaseLossStatus() throws RemoteException;

    int getVcuPowerResponseMode() throws RemoteException;

    int getVcuPureDriveModeFeedback() throws RemoteException;

    float getVcuRawCarSpeed() throws RemoteException;

    int getVcuRealGearLevel() throws RemoteException;

    int getVcuResHeatManaTime() throws RemoteException;

    int getVcuSecondaryPowerOffResponce() throws RemoteException;

    int getVcuSnowMode() throws RemoteException;

    int getVcuSpecialDrivingMode() throws RemoteException;

    int getVcuSsaSwitchStatus() throws RemoteException;

    int getVcuStopChargeReason() throws RemoteException;

    int getVcuSupDebugInfo() throws RemoteException;

    int getVcuSuperChargeDiffIncreaseRange() throws RemoteException;

    int getVcuSuperChargeFlag() throws RemoteException;

    int getVcuTrailerModeSwitchStatus() throws RemoteException;

    float getVcuVehLast100mConsume() throws RemoteException;

    int getVcuVirtualAccPedalStatus() throws RemoteException;

    int getVcuWltpAvailableDrivingDistance() throws RemoteException;

    float getVcuWltpAvailableDrivingDistanceFloat() throws RemoteException;

    float[] getVcuXPortIntellCalcCfg() throws RemoteException;

    float[] getVcuXPortIntellCalcCfg20Hz() throws RemoteException;

    float[] getVcuXPortIntellCalcCfg50Hz() throws RemoteException;

    int getVcuXpedalCtrlMode() throws RemoteException;

    int getVcuXpedalModeSwitchStatus() throws RemoteException;

    int getVcuXsportMode() throws RemoteException;

    int getVpmLdwLeftWarningStatus() throws RemoteException;

    int getVpmLdwRightWarningStatus() throws RemoteException;

    int getVpmRdpLeftWarningStatus() throws RemoteException;

    int getVpmRdpRightWarningStatus() throws RemoteException;

    int getWasherFluidWarning() throws RemoteException;

    int getWelcomeModeBackStatus() throws RemoteException;

    int getWindowRemoteCtrlCfg() throws RemoteException;

    int getXpilotStatus() throws RemoteException;

    int getXpuApRemoteSw() throws RemoteException;

    int getXpuAsLockScenario() throws RemoteException;

    int getXpuAsTargetMaximumHeightRequest() throws RemoteException;

    int getXpuAsTargetMinimumHeightRequest() throws RemoteException;

    int getXpuAutoParkingTipsType() throws RemoteException;

    int getXpuBrightness() throws RemoteException;

    int getXpuCityNgpSwitchStatus() throws RemoteException;

    int getXpuConnectionStatus() throws RemoteException;

    int getXpuDriverHeadFaceArea() throws RemoteException;

    int[] getXpuHeadPoseData() throws RemoteException;

    int getXpuHmiDopRemind() throws RemoteException;

    int getXpuISLCDriverSet() throws RemoteException;

    int getXpuIntelligentChargePortSystemStatus() throws RemoteException;

    int getXpuIntelligentChargePortSystemToneType() throws RemoteException;

    int getXpuIntelligentChargePortTipsType() throws RemoteException;

    int getXpuIntelligentChargePortTtsBroadcastType() throws RemoteException;

    int getXpuLLCCDetourSw() throws RemoteException;

    int getXpuLatCtrlRemind() throws RemoteException;

    int getXpuLccLStraightSw() throws RemoteException;

    int getXpuLongCtrlRemind() throws RemoteException;

    byte[] getXpuLongLatPeriodData() throws RemoteException;

    int getXpuLssSensitivitySwitchStatus() throws RemoteException;

    int getXpuModeIndexDefine() throws RemoteException;

    byte[] getXpuNaviConfirmProto() throws RemoteException;

    int getXpuNedcSwitchStatus() throws RemoteException;

    int getXpuNgpCustomSpeedCountLever() throws RemoteException;

    int getXpuNgpCustomSpeedCountPercent() throws RemoteException;

    int getXpuNgpCustomSpeedSwitchStatus() throws RemoteException;

    int getXpuNgpModeIndexMode() throws RemoteException;

    int getXpuNgpOptimalLaneSw() throws RemoteException;

    int getXpuNgpSwitchTransitionStatus() throws RemoteException;

    int getXpuNgpULCSwMode() throws RemoteException;

    int getXpuNraControlStatus() throws RemoteException;

    int getXpuNraSwitchStatus() throws RemoteException;

    int getXpuRaebActiveStatus() throws RemoteException;

    int getXpuRaebSwitchStatus() throws RemoteException;

    int getXpuScpChargePortCommandStatus() throws RemoteException;

    int getXpuScpSwitchStatus() throws RemoteException;

    int getXpuSlaSpeedWarningStatus() throws RemoteException;

    int getXpuSlifSoundStatus() throws RemoteException;

    int getXpuSlwfVoiceStatus() throws RemoteException;

    int getXpuUpdateProgress() throws RemoteException;

    String getXpuUpdateResponse() throws RemoteException;

    int getXpuUpdateResult() throws RemoteException;

    byte[] getXpuVehLocationProto() throws RemoteException;

    int getXpuXmartPigeonMode() throws RemoteException;

    int hasEspAvhFault() throws RemoteException;

    int hasEspFault() throws RemoteException;

    int hasEspHdcFault() throws RemoteException;

    int hasRoofCamera() throws RemoteException;

    int isAmpMute() throws RemoteException;

    int isAmpStandByEnabled() throws RemoteException;

    int isBcmBonnetOpened() throws RemoteException;

    int isBcmDriverOnSeat() throws RemoteException;

    int isBcmDrvAutoLockEnabled() throws RemoteException;

    int isBcmElectricSeatBeltEnabled() throws RemoteException;

    int isBcmEmergencyBrakeWarningEnabled() throws RemoteException;

    int isBcmInternalLightOn() throws RemoteException;

    int isBcmOutlineMarkerLampsOn() throws RemoteException;

    int isBcmParkingAutoUnlockEnabled() throws RemoteException;

    int isBcmRearFogLampOn() throws RemoteException;

    int isBcmRearSeatBeltWarningEnabled() throws RemoteException;

    int isDhcDoorknobAutoOpenEnabled() throws RemoteException;

    int isEspAvhEnabled() throws RemoteException;

    int isEspHdcEnabled() throws RemoteException;

    int isMsbEnabled() throws RemoteException;

    int isSrsBackBeltWarningEnabled() throws RemoteException;

    int isSrsPsnOnSeat() throws RemoteException;

    int isVcuBatteryCold() throws RemoteException;

    int isVcuChargeSpeedSlow() throws RemoteException;

    int isVcuParkingGearValid() throws RemoteException;

    void notifyScuRearViewMirrorAdjustmentPageState(int i) throws RemoteException;

    void openBcmBonnet() throws RemoteException;

    void registerEpsListener(IEpsEventListener iEpsEventListener) throws RemoteException;

    void registerScuListener(IScuEventListener iScuEventListener) throws RemoteException;

    void registerVcuListener(IVcuEventListener iVcuEventListener) throws RemoteException;

    void requestIcmDashboardLightsStatus() throws RemoteException;

    void requestTBoxBandModemStatus() throws RemoteException;

    void requestTBoxModemStatus() throws RemoteException;

    void resetIcmMeterMileageA() throws RemoteException;

    void resetIcmMeterMileageB() throws RemoteException;

    void resetTbox() throws RemoteException;

    void saveMsmDAllPositionsToMcu(int i, int i2, int i3, int i4, int i5) throws RemoteException;

    void saveMsmDriverAllPositionsToMcu(int i, int i2, int i3, int i4) throws RemoteException;

    void saveMsmPassengerAllPositionsToMcu(int i, int i2, int i3, int i4) throws RemoteException;

    void sendBcmSeatBeltRequest(int i) throws RemoteException;

    void sendCNGPCityMapCtrlReq(byte[] bArr) throws RemoteException;

    void sendCduVolumeToAmp(int i) throws RemoteException;

    void sendChargeCompleteTimeToMcu(int i) throws RemoteException;

    void sendContacts(byte[] bArr) throws RemoteException;

    void sendDiagnoseMsgToMcu(int[] iArr) throws RemoteException;

    void sendDisplayTypeMsgToMcu(int i) throws RemoteException;

    void sendDugReqMsgToMcu(int[] iArr) throws RemoteException;

    void sendFinishCopyTboxLogRequest() throws RemoteException;

    void sendGpsInfoMsgToMcu(int[] iArr) throws RemoteException;

    void sendIcmLogCompressRequest(String str) throws RemoteException;

    void sendIcmRandisDisplayType(String str) throws RemoteException;

    void sendIcmUpdateRequest(String str) throws RemoteException;

    void sendLCMSLogCtrlReq(int i) throws RemoteException;

    void sendMcuBleAccountDataFeedback(int i) throws RemoteException;

    void sendMcuBmsMsgToMcu(int i) throws RemoteException;

    void sendMcuGeofenceStatus(int i) throws RemoteException;

    void sendMcuMapVersion(String str) throws RemoteException;

    void sendMcuOpenWifiHotspotResponse(int i) throws RemoteException;

    void sendMcuOtaUpdateFile(String str) throws RemoteException;

    void sendMcuTboxVBusControlCommand(int i) throws RemoteException;

    void sendOta1MsgToMcu(int[] iArr) throws RemoteException;

    void sendPhoneRemoteAPEvent(String str) throws RemoteException;

    void sendPigeonAndXPURemoteAPHeartBeat(String str) throws RemoteException;

    void sendPmSilentMsgToMcu(int i) throws RemoteException;

    void sendPsuOtaMsgToMcu(int[] iArr) throws RemoteException;

    void sendPwrDebugMsgToMcu(int[] iArr) throws RemoteException;

    void sendRCMSLogCtrlReq(int i) throws RemoteException;

    void sendRequestWakeToMcu(int i) throws RemoteException;

    void sendReset4gMsgToMcu(int[] iArr) throws RemoteException;

    void sendResetModemMsgToMcu(int i) throws RemoteException;

    void sendRomBinMsg(int i, byte[] bArr, byte[] bArr2) throws RemoteException;

    void sendRoutingForTboxRequest(int i) throws RemoteException;

    void sendSRHeartBeatInfoRequest(String str) throws RemoteException;

    void sendSRLagLogHeartBeatFeedBackRequest(String str) throws RemoteException;

    void sendScuNaviLoadLinkType(int i) throws RemoteException;

    void sendSecretKeyToMcu(byte[] bArr) throws RemoteException;

    void sendStartCopyTboxLogRequest(int i) throws RemoteException;

    void sendTboxApnTrafficInfo(long j, long j2, long j3, long j4) throws RemoteException;

    void sendTboxBleAccountLoginFeedback(int i) throws RemoteException;

    void sendTboxEmergencyWifiBleMessage(String str) throws RemoteException;

    void sendTboxFactoryPreCert(String str) throws RemoteException;

    void sendTboxGpsAntPowerControlReq(int i) throws RemoteException;

    void sendTboxGpsHwResetRequest() throws RemoteException;

    void sendTboxGpsMgaRequest() throws RemoteException;

    void sendTboxLocationInfo(String str) throws RemoteException;

    void sendTboxModemCaptureRequest(int i) throws RemoteException;

    void sendTboxMultiBleRenewalRequest(String str) throws RemoteException;

    void sendTboxOtaWorkingStatus(int i) throws RemoteException;

    void sendTboxRemoteDiagInfo(String str) throws RemoteException;

    void sendTboxRenewalPartsRequest(String str) throws RemoteException;

    void sendTboxSoldierTick() throws RemoteException;

    void sendTboxWakeOrderRTC(String str) throws RemoteException;

    void sendTestMsgToMcu(int[] iArr) throws RemoteException;

    void sendUpgradingTboxByUdiskReq(String str) throws RemoteException;

    void sendXpuCountryCodeInfo(String str) throws RemoteException;

    void sendXpuGeoFencingConfig(String str) throws RemoteException;

    void sendXpuScpGeoInfo(String str) throws RemoteException;

    void sendXpuTransferVpaAbInfo(String str) throws RemoteException;

    void sendXpuTransferVpaCmd(String str) throws RemoteException;

    void sendXpuUpdateRequest(String str) throws RemoteException;

    void sendXpuZgEventMessage(byte[] bArr) throws RemoteException;

    void sendXpuZgPeriodMessage(byte[] bArr) throws RemoteException;

    void setAdasMapInfo(byte[] bArr) throws RemoteException;

    void setAdasMeta(byte[] bArr) throws RemoteException;

    void setAdasPosition(byte[] bArr) throws RemoteException;

    void setAdasProfLong(byte[] bArr) throws RemoteException;

    void setAdasProfShort(byte[] bArr) throws RemoteException;

    void setAdasSegment(byte[] bArr) throws RemoteException;

    void setAdasStub(byte[] bArr) throws RemoteException;

    void setAllLightData(boolean z, byte[] bArr, byte[] bArr2, byte[] bArr3) throws RemoteException;

    void setAmpChannelSwitchControlStatus(byte[] bArr) throws RemoteException;

    void setAmpChannelVolAndSource(int i, int i2, int i3, int i4) throws RemoteException;

    void setAmpChannelVolumeControlValue(byte[] bArr) throws RemoteException;

    void setAmpCoolingRequestTemp(float f) throws RemoteException;

    void setAmpDolbyAtomsSwitchStatus(int i) throws RemoteException;

    void setAmpDyn3DEffectLevel(int i) throws RemoteException;

    void setAmpDynSdvcLevel(int i) throws RemoteException;

    void setAmpEffectStatus(int i) throws RemoteException;

    void setAmpFreqGainGroupControlValue(int[] iArr) throws RemoteException;

    void setAmpGroupSwitchControlStatus(byte[] bArr) throws RemoteException;

    void setAmpGroupVolumeControlValue(byte[] bArr) throws RemoteException;

    void setAmpMusicScene(int i) throws RemoteException;

    void setAmpMusicStyle(int i) throws RemoteException;

    void setAmpMute(int i) throws RemoteException;

    void setAmpPowerRequestSwitchStatus(int i) throws RemoteException;

    void setAmpSdsscLevel(int i) throws RemoteException;

    void setAmpSoundFieldMode(int i) throws RemoteException;

    void setAmpSoundSourceDolbyFormat(int i) throws RemoteException;

    void setAmpSoundStyle(int i) throws RemoteException;

    void setAmpSoundTrackMode(int i) throws RemoteException;

    void setAmpStandByEnabled(int i) throws RemoteException;

    void setAmpTempRiseSpeedState(int i) throws RemoteException;

    void setAmpVolume(int i) throws RemoteException;

    void setAnalogSoundEffect(int i) throws RemoteException;

    void setAnalogSoundEnable(int i) throws RemoteException;

    void setApmAudioEffect(int i) throws RemoteException;

    void setArsFoldOrUnfold(int i) throws RemoteException;

    void setArsInitState(int i) throws RemoteException;

    void setArsWorkingMode(int i) throws RemoteException;

    void setAtlConfiguration(byte[] bArr) throws RemoteException;

    void setAtlDowOpen(int i) throws RemoteException;

    void setAtlLin1Data(byte[] bArr) throws RemoteException;

    void setAtlLin2Data(byte[] bArr) throws RemoteException;

    void setAtlLin3Data(byte[] bArr) throws RemoteException;

    void setAtlOpen(int i) throws RemoteException;

    void setAtlPowerRequestSwitchStatus(int i) throws RemoteException;

    void setAtlSwitchStatus(int i) throws RemoteException;

    void setAudioBalanceFader(int i, int i2) throws RemoteException;

    void setAudioGEQParams(int i, int i2, int i3, int i4) throws RemoteException;

    void setAudioMode(int i, int i2) throws RemoteException;

    void setAudioParameters() throws RemoteException;

    void setAutoBrightness(int i) throws RemoteException;

    void setAutoLightSwitch(int i) throws RemoteException;

    void setAutoParkInState(int i) throws RemoteException;

    void setAutoParkOutState(int i) throws RemoteException;

    void setAutoParkReq(int i) throws RemoteException;

    void setAutoParkSwitch(int i) throws RemoteException;

    void setAutoPilotLocationInfo(float f, float f2, float f3, float f4, float f5, float f6, long j) throws RemoteException;

    void setAutoWindowLockSw(int i) throws RemoteException;

    void setAvasAcChargingSoundSwitch(int i) throws RemoteException;

    void setAvasChargeSoundSwitchStatus(int i) throws RemoteException;

    void setAvasDcChargingSoundSwitch(int i) throws RemoteException;

    void setAvasDisconnectChargingSoundSwitch(int i) throws RemoteException;

    void setAvasExternalSoundCmd(int i) throws RemoteException;

    void setAvasExternalSoundModeCmd(int i) throws RemoteException;

    void setAvasExternalVolume(int i) throws RemoteException;

    void setAvasFriendlySayHiSound(int i) throws RemoteException;

    void setAvasFullChargeWaitForWakeUpSoundSwitch(int i) throws RemoteException;

    void setAvasLockSoundEffect(int i) throws RemoteException;

    void setAvasLockUnlockSoundSwitchStatus(int i) throws RemoteException;

    void setAvasLowSpeedSoundEffect(int i) throws RemoteException;

    void setAvasLowSpeedSoundSwitch(int i) throws RemoteException;

    void setAvasLowSpeedVolume(int i) throws RemoteException;

    void setAvasPhotoSoundSwitch(int i) throws RemoteException;

    void setAvasSleepSoundSwitch(int i) throws RemoteException;

    void setAvasSocSoundSwitchStatus(int i) throws RemoteException;

    void setAvasSocSoundVolumeToMcu(int i) throws RemoteException;

    void setAvasUnlockSoundEffect(int i) throws RemoteException;

    void setAvasWaitForWakeUpSoundSwitch(int i) throws RemoteException;

    void setAvm3603dAngle(int i) throws RemoteException;

    void setAvmCalibrationMode(int i) throws RemoteException;

    void setAvmCameraAngle(int i) throws RemoteException;

    void setAvmCameraDisplayMode(int i) throws RemoteException;

    void setAvmFineTuneMode(int i) throws RemoteException;

    void setAvmMultipleDisplayProperties(int i, int i2, int i3, int i4, int i5) throws RemoteException;

    void setAvmOverlayWorkSt(int i) throws RemoteException;

    void setAvmRoofCameraRaise(int i) throws RemoteException;

    void setAvmTransBodySwitchStatus(int i) throws RemoteException;

    void setAvmTransparentChassisState(int i) throws RemoteException;

    void setBatteryKeepTempSwitch(int i) throws RemoteException;

    void setBcmAllExteriorMirrorsPositions(int i, int i2, int i3, int i4) throws RemoteException;

    void setBcmAsCampingModeSwitchStatus(int i) throws RemoteException;

    void setBcmAsDrivingMode(int i) throws RemoteException;

    void setBcmAsLeopardModeSwitchStatus(int i) throws RemoteException;

    void setBcmAsSpecialDrivingMode(int i) throws RemoteException;

    void setBcmAsTrailerModeSwitchStatus(int i) throws RemoteException;

    void setBcmAsVehicleMode(int i) throws RemoteException;

    void setBcmAutoWindowCmd(int i) throws RemoteException;

    void setBcmAutoWindowsControl(int i, int i2) throws RemoteException;

    void setBcmBackDefrostMode(int i) throws RemoteException;

    void setBcmBackDefrostMode_() throws RemoteException;

    void setBcmBackMirrorHeatMode(int i) throws RemoteException;

    void setBcmBackMirrorHeatMode_() throws RemoteException;

    void setBcmChairWelcomeMode(int i) throws RemoteException;

    void setBcmChargePortUnlock(int i, int i2) throws RemoteException;

    void setBcmChildLockCfg(int i) throws RemoteException;

    void setBcmColumnHorizonalMove(int i, int i2) throws RemoteException;

    void setBcmColumnHorizonalPosition(int i) throws RemoteException;

    void setBcmColumnPositionMove(int i, int i2) throws RemoteException;

    void setBcmColumnPositionSaveToMcu(int i, int i2) throws RemoteException;

    void setBcmColumnVerticalMove(int i, int i2) throws RemoteException;

    void setBcmColumnVerticalPosition(int i) throws RemoteException;

    void setBcmCustomerModeFlagSwitchStatus(int i) throws RemoteException;

    void setBcmCwcSwitch(int i) throws RemoteException;

    void setBcmDayLightMode(int i) throws RemoteException;

    void setBcmDomeLightBrightLevel(int i) throws RemoteException;

    void setBcmDomeLightCfg(int i) throws RemoteException;

    void setBcmDomeLightModeStatus(int i) throws RemoteException;

    void setBcmDoorLock(int i) throws RemoteException;

    void setBcmDrvAutoLockEnabled(int i) throws RemoteException;

    void setBcmEasyLoadingSwitch(int i) throws RemoteException;

    void setBcmElectricSeatBeltEnabled(int i) throws RemoteException;

    void setBcmEmergencyBrakeWarning(int i) throws RemoteException;

    void setBcmEngineeringModeStatus(int i) throws RemoteException;

    void setBcmFRCwcSwitch(int i) throws RemoteException;

    void setBcmFollowMeHomeCfg(int i) throws RemoteException;

    void setBcmFollowMeTime(int i) throws RemoteException;

    void setBcmFootKickSwitchStatus(int i) throws RemoteException;

    void setBcmFrontLampMode(int i) throws RemoteException;

    void setBcmFrontLeftDomeLightSwitchStatus(int i) throws RemoteException;

    void setBcmFrontMirrorHeatSwitchStatus(int i) throws RemoteException;

    void setBcmFrontRightDomeLightSwitchStatus(int i) throws RemoteException;

    void setBcmGroupLedBrigntness(int i, int i2, int i3, int i4) throws RemoteException;

    void setBcmGroupLedColor(int i, int i2, int i3, int i4) throws RemoteException;

    void setBcmGroupLedControlStatus(int i, int i2, int i3, int i4) throws RemoteException;

    void setBcmGroupLedFadeTime(int i, int i2, int i3, int i4) throws RemoteException;

    void setBcmGroupLedTemperature(int i, int i2, int i3, int i4) throws RemoteException;

    void setBcmHandleAutoSwitch(int i) throws RemoteException;

    void setBcmHazardLampsFlash(int i) throws RemoteException;

    void setBcmHeadLampLevelingReqValue(int i) throws RemoteException;

    void setBcmHeightLvlConfigValue(int i) throws RemoteException;

    void setBcmHighBeamMode(int i) throws RemoteException;

    void setBcmInternalLightOn(int i) throws RemoteException;

    void setBcmLeftChildLockSwitchStatus(int i) throws RemoteException;

    void setBcmLeftMirrorCtrlCmd(int i) throws RemoteException;

    void setBcmLeftMirrorHorizPos(int i) throws RemoteException;

    void setBcmLeftMirrorMove(int i, int i2) throws RemoteException;

    void setBcmLeftMirrorVerticalPos(int i) throws RemoteException;

    void setBcmLeftSdcAutoOrManualControl(int i, int i2) throws RemoteException;

    void setBcmLeftSdcDoorPosition(int i) throws RemoteException;

    void setBcmLeftSdcSwitch(int i) throws RemoteException;

    void setBcmLeftSdcWindowsAutoDownSwitch(int i) throws RemoteException;

    void setBcmLightMeHomeMode(int i) throws RemoteException;

    void setBcmLockAvasSwitchStatus(int i) throws RemoteException;

    void setBcmLockHazardLightSwitchStatus(int i) throws RemoteException;

    void setBcmLockHornSwitchStatus(int i) throws RemoteException;

    void setBcmLowBeamOffConfirmSt(int i) throws RemoteException;

    void setBcmMaintainModeSw(int i) throws RemoteException;

    void setBcmMirrorAutoFoldSwitchStatus(int i) throws RemoteException;

    void setBcmNfcCardEnabled(int i) throws RemoteException;

    void setBcmParkLightRelatedFMBLightConfig(int i) throws RemoteException;

    void setBcmParkingAutoUnlockEnabled(int i) throws RemoteException;

    void setBcmPassengerSeatBlowLevel(int i) throws RemoteException;

    void setBcmPollingOpenCfg(int i) throws RemoteException;

    void setBcmPsnSeatHeatLevel(int i) throws RemoteException;

    void setBcmRLCwcSwitch(int i) throws RemoteException;

    void setBcmRRCwcSwitch(int i) throws RemoteException;

    void setBcmRearFogLampOn(int i) throws RemoteException;

    void setBcmRearLeftDomeLightSwitchStatus(int i) throws RemoteException;

    void setBcmRearLeftSeatHeatSw(int i) throws RemoteException;

    void setBcmRearRightDomeLightSwitchStatus(int i) throws RemoteException;

    void setBcmRearRightSeatHeatSw(int i) throws RemoteException;

    void setBcmRearSeatBeltWarningEnabled(int i) throws RemoteException;

    void setBcmRearViewAutoDownCfg(int i) throws RemoteException;

    void setBcmRearViewMirrorPos(int i) throws RemoteException;

    void setBcmRearWiperServiceSwitchStatus(int i) throws RemoteException;

    void setBcmReverseMirrorCfgCmd(int i) throws RemoteException;

    void setBcmRightChildLockSwitchStatus(int i) throws RemoteException;

    void setBcmRightMirrorCtrlCmd(int i) throws RemoteException;

    void setBcmRightMirrorHorizPos(int i) throws RemoteException;

    void setBcmRightMirrorMove(int i, int i2) throws RemoteException;

    void setBcmRightMirrorVerticalPos(int i) throws RemoteException;

    void setBcmRightSdcAutoOrManualControl(int i, int i2) throws RemoteException;

    void setBcmRightSdcDoorPosition(int i) throws RemoteException;

    void setBcmRightSdcSwitch(int i) throws RemoteException;

    void setBcmRightSdcWindowsAutoDownSwitch(int i) throws RemoteException;

    void setBcmSaberLightSw(int i) throws RemoteException;

    void setBcmSdcBrakeCloseDoorCfg(int i) throws RemoteException;

    void setBcmSdcKeyCloseCtrlCfg(int i) throws RemoteException;

    void setBcmSdcKeyOpenCtrlCfg(int i) throws RemoteException;

    void setBcmSdcMaxAutoDoorOpeningAngle(int i) throws RemoteException;

    void setBcmSdcMode(int i) throws RemoteException;

    void setBcmSeatBlowLevel(int i) throws RemoteException;

    void setBcmSeatBlowLevel_() throws RemoteException;

    void setBcmSeatHeatLevel(int i) throws RemoteException;

    void setBcmSeatHeatLevel_() throws RemoteException;

    void setBcmSecRowSeatEasyEntrySwitchStatus(int i) throws RemoteException;

    void setBcmShadeControllerComfortCommand(int i) throws RemoteException;

    void setBcmShadeControllerInitialization(int i) throws RemoteException;

    void setBcmShadeControllerPosition(int i) throws RemoteException;

    void setBcmShcReq(int i) throws RemoteException;

    void setBcmSoftLvlConfigValue(int i) throws RemoteException;

    void setBcmSteeringWheelHeatingStatus(int i) throws RemoteException;

    void setBcmSuspenWelcomeSwitch(int i) throws RemoteException;

    void setBcmSwsControlSceneStatus(int i) throws RemoteException;

    void setBcmTargetAsHeightLvlConfigValue(int i) throws RemoteException;

    void setBcmTrailerHitchSwitchStatus(int i) throws RemoteException;

    void setBcmTrailerModeStatus(int i) throws RemoteException;

    void setBcmTrailerModeSwitchStatus(int i) throws RemoteException;

    void setBcmTransportModeSwitchStatus(int i) throws RemoteException;

    void setBcmTrunkOpen(int i) throws RemoteException;

    void setBcmTrunkOpenRequestPosition(int i) throws RemoteException;

    void setBcmTrunkSetPositionRequest(int i) throws RemoteException;

    void setBcmTwcMode(int i) throws RemoteException;

    void setBcmTwcUpdownSwitch(int i) throws RemoteException;

    void setBcmUnlockResponseMode(int i) throws RemoteException;

    void setBcmWashCarModeSwitchStatus(int i) throws RemoteException;

    void setBcmWindowLockState(int i) throws RemoteException;

    void setBcmWindowMoveCmd(int i, int i2) throws RemoteException;

    void setBcmWindowMovePosition(int i, float f) throws RemoteException;

    void setBcmWindowRemoteCtrlCfg(int i) throws RemoteException;

    void setBcmWindowsMovePositions(float f, float f2, float f3, float f4) throws RemoteException;

    void setBcmWiperInterval(int i) throws RemoteException;

    void setBcmWiperRainDetectSensitivity(int i) throws RemoteException;

    void setBcmWiperServiceMode(int i) throws RemoteException;

    void setBcmX5dCinemaModeStatus(int i) throws RemoteException;

    void setBcmXmeditationModeStatus(int i) throws RemoteException;

    void setBcmXmovieModeStatus(int i) throws RemoteException;

    void setBcmXsleepModeStatus(int i) throws RemoteException;

    void setBlindAreaDetectionWarning(int i) throws RemoteException;

    void setBrightnessLevel(int i) throws RemoteException;

    void setBtMusicState(byte[] bArr) throws RemoteException;

    void setBtPhoneCall(String str) throws RemoteException;

    void setCFChildLock(int i) throws RemoteException;

    void setCFKeepTempSwitch(int i) throws RemoteException;

    void setCFKeepTempTime(int i) throws RemoteException;

    void setCFKeepTempTimeMemoryRequest(int i) throws RemoteException;

    void setCFPowerSwitch(int i) throws RemoteException;

    void setCFTempInc() throws RemoteException;

    void setCFTempValue(int i) throws RemoteException;

    void setCFWorkMode(int i) throws RemoteException;

    void setCarExhibitionModeVol(int i) throws RemoteException;

    void setCarFridgeDoorCtrl(int i) throws RemoteException;

    void setCarpetLightWelcomeSw(int i) throws RemoteException;

    void setCdcFunctionMode(int i) throws RemoteException;

    void setChairPositionEnd() throws RemoteException;

    void setChairPositionStart(int i, int i2, int i3) throws RemoteException;

    void setChairSlowlyAhead(int i) throws RemoteException;

    void setChairSlowlyBack(int i) throws RemoteException;

    void setChairSlowlyEnd(int i) throws RemoteException;

    void setChargeAppointTime(int[] iArr) throws RemoteException;

    void setChargeGunUnlock() throws RemoteException;

    void setCiuCarWash(int i) throws RemoteException;

    void setCiuConfigurationActive(int i) throws RemoteException;

    void setCiuDelayOff(int i) throws RemoteException;

    void setCiuDeleteFaceId(int i) throws RemoteException;

    void setCiuDeleteMulti(int i, int i2) throws RemoteException;

    void setCiuDeliveryUploadMode(int i) throws RemoteException;

    void setCiuDistractionStatus(int i) throws RemoteException;

    void setCiuDmsMode(int i) throws RemoteException;

    void setCiuDmsStatus(int i) throws RemoteException;

    void setCiuDvrLockMode(int i) throws RemoteException;

    void setCiuDvrMode(int i) throws RemoteException;

    void setCiuFaceActionRequest(int i) throws RemoteException;

    void setCiuFaceIdMode(int i) throws RemoteException;

    void setCiuFaceIdSwitch(int i) throws RemoteException;

    void setCiuFatigueStatus(int i) throws RemoteException;

    void setCiuFirmFaceCancel(int i) throws RemoteException;

    void setCiuFormatMode(int i) throws RemoteException;

    void setCiuPhotoProcess() throws RemoteException;

    void setCiuRainSw(int i) throws RemoteException;

    void setCiuRegHint(int i) throws RemoteException;

    void setCiuRegisterRequestMulti(int i, int i2, int i3) throws RemoteException;

    void setCiuStartRegFlag(int i) throws RemoteException;

    void setCiuStartRegFlow(int i) throws RemoteException;

    void setCiuUid(int i) throws RemoteException;

    void setCiuVideoOutputMode(int i) throws RemoteException;

    void setCmsAllExteriorMirrorsPositions(int i, int i2, int i3, int i4) throws RemoteException;

    void setCutLinePreventSw(int i) throws RemoteException;

    void setDhcDoorknobAutoOpenEnabled(int i) throws RemoteException;

    void setDoorOpenWarning(int i) throws RemoteException;

    void setDoubleThemeColor(int i) throws RemoteException;

    void setDrivingMode(int i) throws RemoteException;

    void setDvrEnable(int i) throws RemoteException;

    void setEpsWorkMode(int i) throws RemoteException;

    void setEspAvhEnabled(int i) throws RemoteException;

    void setEspBpfStatus(int i) throws RemoteException;

    void setEspCstStatus(int i) throws RemoteException;

    void setEspEpbSystemSwitch(int i) throws RemoteException;

    void setEspHdcEnabled(int i) throws RemoteException;

    void setEspIbsBrakeMode(int i) throws RemoteException;

    void setEspOffRoadSwitch(int i) throws RemoteException;

    void setEspTsmSwitchStatus(int i) throws RemoteException;

    void setEspWorkMode(int i) throws RemoteException;

    void setFCTempDec() throws RemoteException;

    void setFaceIdModeState(int i) throws RemoteException;

    void setFactoryOledData(byte[] bArr) throws RemoteException;

    void setFactoryOledDisplayMode(int i) throws RemoteException;

    void setFarLampAutoSwitch(int i) throws RemoteException;

    void setFatigueDetectionSw(int i) throws RemoteException;

    void setFmVolume(int i, int i2) throws RemoteException;

    void setFrontCollisionSecurity(int i) throws RemoteException;

    void setGpsPollingType(int i) throws RemoteException;

    void setGpsReset(int i) throws RemoteException;

    void setGroutLightData(byte b, byte b2, int i, boolean z, byte b3, byte b4, byte b5) throws RemoteException;

    void setHavacSfsChannel(int i) throws RemoteException;

    void setHighSpeedNavigation(int i) throws RemoteException;

    void setHvacAcEnabled(int i) throws RemoteException;

    void setHvacAirCirculationPeriod(int i) throws RemoteException;

    void setHvacAirCycleMode(int i) throws RemoteException;

    void setHvacAirDistributionMode(int i) throws RemoteException;

    void setHvacAirPurgeEnabed(int i) throws RemoteException;

    void setHvacAqsEnabled(int i) throws RemoteException;

    void setHvacAqsSensitivity(int i) throws RemoteException;

    void setHvacAutoDefogSwitch(int i) throws RemoteException;

    void setHvacAutoModeEnabled(int i) throws RemoteException;

    void setHvacAutoModePreference(int i) throws RemoteException;

    void setHvacDefrostMode(int i) throws RemoteException;

    void setHvacDeodorizeSwitch(int i) throws RemoteException;

    void setHvacDrvLeftFanHorPos(int i) throws RemoteException;

    void setHvacDrvLeftFanVerPos(int i) throws RemoteException;

    void setHvacDrvRightFanHorPos(int i) throws RemoteException;

    void setHvacDrvRightFanVerPos(int i) throws RemoteException;

    void setHvacDrvSeatTempDec() throws RemoteException;

    void setHvacDrvSeatTempDown(float f) throws RemoteException;

    void setHvacDrvSeatTempInc() throws RemoteException;

    void setHvacDrvSeatTempUp(float f) throws RemoteException;

    void setHvacDrvSeatTempValue(float f) throws RemoteException;

    void setHvacEavDrvWindMode(int i) throws RemoteException;

    void setHvacEavPsnWindMode(int i) throws RemoteException;

    void setHvacEconEnabled(int i) throws RemoteException;

    void setHvacFanPosition(int i) throws RemoteException;

    void setHvacFanSpeedDec() throws RemoteException;

    void setHvacFanSpeedDown(int i) throws RemoteException;

    void setHvacFanSpeedInc() throws RemoteException;

    void setHvacFanSpeedLevel(int i) throws RemoteException;

    void setHvacFanSpeedUp(int i) throws RemoteException;

    void setHvacMachineStateSwitch(int i) throws RemoteException;

    void setHvacNewFreshSwitchStatus(int i) throws RemoteException;

    void setHvacPowerEnabled(int i) throws RemoteException;

    void setHvacPsnLeftFanHorPos(int i) throws RemoteException;

    void setHvacPsnLeftFanVerPos(int i) throws RemoteException;

    void setHvacPsnRightFanHorPos(int i) throws RemoteException;

    void setHvacPsnRightFanVerPos(int i) throws RemoteException;

    void setHvacPsnSeatTempDec() throws RemoteException;

    void setHvacPsnSeatTempDown(float f) throws RemoteException;

    void setHvacPsnSeatTempInc() throws RemoteException;

    void setHvacPsnSeatTempUp(float f) throws RemoteException;

    void setHvacPsnSeatTempValue(float f) throws RemoteException;

    void setHvacRearAutoModeEnabled(int i) throws RemoteException;

    void setHvacRearFanSpeedDec() throws RemoteException;

    void setHvacRearFanSpeedInc() throws RemoteException;

    void setHvacRearFanSpeedLevel(int i) throws RemoteException;

    void setHvacRearWindLessSwitch(int i) throws RemoteException;

    void setHvacSecRowLeftTempDec() throws RemoteException;

    void setHvacSecRowLeftTempInc() throws RemoteException;

    void setHvacSecRowRightTempDec() throws RemoteException;

    void setHvacSecRowRightTempInc() throws RemoteException;

    void setHvacSelfDrySwStatus(int i) throws RemoteException;

    void setHvacSfsChannelResetRequest(int i, int i2) throws RemoteException;

    void setHvacSfsConcentration(int i) throws RemoteException;

    void setHvacSfsSwitch(int i) throws RemoteException;

    void setHvacSfsTypeMode(int i) throws RemoteException;

    void setHvacSweepWindStatus(int i) throws RemoteException;

    void setHvacTempLeftSyncEnabled(int i) throws RemoteException;

    void setHvacTempPtcStatus(int i) throws RemoteException;

    void setHvacTempRightSyncEnabled(int i) throws RemoteException;

    void setHvacTempSecRowLeftValue(float f) throws RemoteException;

    void setHvacTempSecRowRightValue(float f) throws RemoteException;

    void setHvacTempThirdRowtValue(float f) throws RemoteException;

    void setHvacThirdRowTempDec() throws RemoteException;

    void setHvacThirdRowTempInc() throws RemoteException;

    void setHvacThirdRowWindBlowMode(int i) throws RemoteException;

    void setHvacWarpSpeedCoolingSwitch(int i) throws RemoteException;

    void setHvacWarpSpeedWarmingSwitch(int i) throws RemoteException;

    void setIcmAccount(String str) throws RemoteException;

    void setIcmAlarmVolume(int i) throws RemoteException;

    void setIcmAllCardsRefresh(String str) throws RemoteException;

    void setIcmBrightness(int i) throws RemoteException;

    void setIcmCarSetting(String str) throws RemoteException;

    void setIcmDayNightMode(int i) throws RemoteException;

    void setIcmDayNightSwitch(int i) throws RemoteException;

    void setIcmDistractionLevel(int i) throws RemoteException;

    void setIcmDmsMode(int i) throws RemoteException;

    void setIcmDriverTempValue(float f) throws RemoteException;

    void setIcmFaceInfo(String str) throws RemoteException;

    void setIcmFatigueLevel(int i) throws RemoteException;

    void setIcmInfoCardAdd(String str) throws RemoteException;

    void setIcmInfoCardRemove(String str) throws RemoteException;

    void setIcmInfoCardUpdate(String str) throws RemoteException;

    void setIcmInfoFlowMsg(String str) throws RemoteException;

    void setIcmLeftCard(int i) throws RemoteException;

    void setIcmMediaSource(int i) throws RemoteException;

    void setIcmModeInfoArray(int i, int i2) throws RemoteException;

    void setIcmMusicInfo(String str) throws RemoteException;

    void setIcmMusicPlaybackTimeInfo(String str) throws RemoteException;

    void setIcmNavigation(int i) throws RemoteException;

    void setIcmNavigationBmp(int i, int i2, int i3, int i4, byte[] bArr) throws RemoteException;

    void setIcmNavigationInfo(String str) throws RemoteException;

    void setIcmOsdShow(String str) throws RemoteException;

    void setIcmRadioType(int i) throws RemoteException;

    void setIcmRightCard(int i) throws RemoteException;

    void setIcmScreenLight(int i) throws RemoteException;

    void setIcmSoundThemeType(int i) throws RemoteException;

    void setIcmSyncSignal(String str) throws RemoteException;

    void setIcmSyncTime(String str) throws RemoteException;

    void setIcmSystemTimeValue(int i, int i2) throws RemoteException;

    void setIcmTemperature(int i) throws RemoteException;

    void setIcmTimeFormat(int i) throws RemoteException;

    void setIcmUpdateFileTransferStatus(int i) throws RemoteException;

    void setIcmUserScenarioExitDialog(int i) throws RemoteException;

    void setIcmUserScenarioInfo(int[] iArr) throws RemoteException;

    void setIcmWeather(String str) throws RemoteException;

    void setIcmWheelkey(int i) throws RemoteException;

    void setIcmWindBlowMode(int i) throws RemoteException;

    void setIcmWindLevel(int i) throws RemoteException;

    void setIcmWindMode(int i) throws RemoteException;

    void setIcmWindPower(int i) throws RemoteException;

    void setIcmWiperRainDetectSensitivity(int i) throws RemoteException;

    void setIgHeartBeat() throws RemoteException;

    void setImsAutoVisionSw(int i) throws RemoteException;

    void setImsBrightLevel(int i) throws RemoteException;

    void setImsModeReq(int i) throws RemoteException;

    void setImsVisionCtrl(int i, int i2) throws RemoteException;

    void setIntelligentCallButton(int i) throws RemoteException;

    void setIntelligentSpeedLimit(int i) throws RemoteException;

    void setKeyRemoteParkType(int i) throws RemoteException;

    void setKeyRemoteSMButton(int i) throws RemoteException;

    void setLCMSAutoBrightSw(int i) throws RemoteException;

    void setLCMSBright(int i) throws RemoteException;

    void setLCMSBrightWithStoreflag(int[] iArr) throws RemoteException;

    void setLCMSDanObjectRecSw(int i) throws RemoteException;

    void setLCMSHighSpeedViewSw(int i) throws RemoteException;

    void setLCMSLowSpeedViewSw(int i) throws RemoteException;

    void setLCMSReverseAssitSw(int i) throws RemoteException;

    void setLCMSTurnExtSw(int i) throws RemoteException;

    void setLCMSViewRecovery(int i) throws RemoteException;

    void setLRCMSAllExteriorMirrorsPositions(float f, float f2, float f3, float f4) throws RemoteException;

    void setLRCMSViewAngle(int i) throws RemoteException;

    void setLaneAlignmentAssist(int i) throws RemoteException;

    void setLaneChangeAssist(int i) throws RemoteException;

    void setLaneDepartureWarning(int i) throws RemoteException;

    void setLaneSupportSystemStateAndWarning(int i) throws RemoteException;

    void setLeavePollingLockSw(int i) throws RemoteException;

    void setLeftSlideDoorCtrl(int i) throws RemoteException;

    void setLeftSlideDoorMode(int i) throws RemoteException;

    void setLluAcChargeMode(int i) throws RemoteException;

    void setLluAndroidLlSt(int i) throws RemoteException;

    void setLluBreathMode(int i) throws RemoteException;

    void setLluChargingSwitch(int i) throws RemoteException;

    void setLluCurrentFunction(int i) throws RemoteException;

    void setLluDcChargeMode(int i) throws RemoteException;

    void setLluEnableStatus(int i) throws RemoteException;

    void setLluFindCarSwitch(int i) throws RemoteException;

    void setLluLockSocDspSwitch(int i) throws RemoteException;

    void setLluLockUnlockSocDspSwitch(int i) throws RemoteException;

    void setLluPersonAngle(int i) throws RemoteException;

    void setLluPersonWalkDirection(int i) throws RemoteException;

    void setLluPhotoMode(int i) throws RemoteException;

    void setLluPhotoSwitch(int i) throws RemoteException;

    void setLluPowerRequestSwitchStatus(int i) throws RemoteException;

    void setLluPrivateCtrl(boolean z, int i, int i2, int i3, int i4, int i5, int i6) throws RemoteException;

    void setLluScriptData(int i, int i2, int i3, int[] iArr) throws RemoteException;

    void setLluScriptParameter(int[] iArr) throws RemoteException;

    void setLluScriptStRequest(int i) throws RemoteException;

    void setLluSelfActive(int i) throws RemoteException;

    void setLluShowOffMode(int i) throws RemoteException;

    void setLluShowOffSwitch(int i) throws RemoteException;

    void setLluSleepMode(int i) throws RemoteException;

    void setLluSleepSwitch(int i) throws RemoteException;

    void setLluSpeedLimitCfg(int i) throws RemoteException;

    void setLluUnLockSocDspSwitch(int i) throws RemoteException;

    void setLluWakeWaitMode(int i) throws RemoteException;

    void setLluWakeWaitSwitch(int i) throws RemoteException;

    void setLocationInfo(float f, float f2, float f3, float f4, float f5, long j) throws RemoteException;

    void setMcuAndroidOtaStatus(int i) throws RemoteException;

    void setMcuAutoPowerOffSw(int i) throws RemoteException;

    void setMcuChairWelcomeMode(int i) throws RemoteException;

    void setMcuDelaySleep(int i, int i2) throws RemoteException;

    void setMcuDvTempSamplingPeriod(int i) throws RemoteException;

    void setMcuDvTestReq(int i) throws RemoteException;

    void setMcuFaceIdSw(int i) throws RemoteException;

    void setMcuFactoryModeSwitch(int i) throws RemoteException;

    void setMcuFlash(int i) throws RemoteException;

    void setMcuHorn(int i) throws RemoteException;

    void setMcuHornsStates(int i, int i2, int i3, int i4) throws RemoteException;

    void setMcuIgOff() throws RemoteException;

    void setMcuIgOn() throws RemoteException;

    void setMcuIsWakeUpByPhone(int i) throws RemoteException;

    void setMcuLLuSelfControlData(byte[] bArr) throws RemoteException;

    void setMcuLluChargingSwitch(int i) throws RemoteException;

    void setMcuLluEnableStatus(int i) throws RemoteException;

    void setMcuLluModeCtrl(int i, int i2, int i3, int i4, int i5, int i6) throws RemoteException;

    void setMcuLluPhotoSwitch(int i) throws RemoteException;

    void setMcuLluShowOffSwitch(int i) throws RemoteException;

    void setMcuLluSleepSwitch(int i) throws RemoteException;

    void setMcuLluWakeWaitSwitch(int i) throws RemoteException;

    void setMcuMonitorSwitch(int i, int i2) throws RemoteException;

    void setMcuPowerOffCountdownAction(int i) throws RemoteException;

    void setMcuPsuTestReq(int i) throws RemoteException;

    void setMcuRemoteControlFeedback(int i) throws RemoteException;

    void setMcuRepairMode(int i) throws RemoteException;

    void setMcuRtcTime(long j) throws RemoteException;

    void setMcuRvcEnable(int i) throws RemoteException;

    void setMcuRvcState(int i) throws RemoteException;

    void setMcuRvcVersion(int i) throws RemoteException;

    void setMcuSocRespDTCInfo(int i, int i2, int i3) throws RemoteException;

    void setMcuTimeZone(int i) throws RemoteException;

    void setMcuTrunkPowerOffDelay(int i) throws RemoteException;

    void setMcuTrunkPowerSw(int i) throws RemoteException;

    void setMcuUpdateReqStatus(int i) throws RemoteException;

    void setMeterBackLightLevel(int i) throws RemoteException;

    void setMeterSoundState(int i, int i2, int i3) throws RemoteException;

    void setMqttLogInfo(String str, String str2, String str3, String str4) throws RemoteException;

    void setMsbEnabled(int i) throws RemoteException;

    void setMsmDriverAllPositions(int i, int i2, int i3, int i4) throws RemoteException;

    void setMsmDriverAllPositionsToLDCU(int i, int i2, int i3, int i4, int i5, int i6) throws RemoteException;

    void setMsmDriverSeatCushTiltPos(int i, int i2) throws RemoteException;

    void setMsmDriverSeatCushTiltPosition(int i) throws RemoteException;

    void setMsmDriverSeatLegHorzPosition(int i) throws RemoteException;

    void setMsmDriverSeatLumbControlSwitchEnable(int i) throws RemoteException;

    void setMsmDriverSeatMassgElem(int[] iArr) throws RemoteException;

    void setMsmDriverSeatMassgIntensity(int i) throws RemoteException;

    void setMsmDriverSeatMassgProgMode(int i) throws RemoteException;

    void setMsmDriverSeatPositionMemoryRequest(int i) throws RemoteException;

    void setMsmDriverSeatTiltLevelOff(int i) throws RemoteException;

    void setMsmDriverWelcomeActive(int i) throws RemoteException;

    void setMsmDrvLegVertiMove(int i, int i2) throws RemoteException;

    void setMsmDrvLumbHorzMove(int i, int i2) throws RemoteException;

    void setMsmDrvLumbVertiMove(int i, int i2) throws RemoteException;

    void setMsmDrvSeatBackMove(int i, int i2) throws RemoteException;

    void setMsmDrvSeatBackPosition(int i) throws RemoteException;

    void setMsmDrvSeatHorizMove(int i, int i2) throws RemoteException;

    void setMsmDrvSeatHorizPosition(int i) throws RemoteException;

    void setMsmDrvSeatLegPosition(int i) throws RemoteException;

    void setMsmDrvSeatVertiMove(int i, int i2) throws RemoteException;

    void setMsmDrvSeatVertiPosition(int i) throws RemoteException;

    void setMsmPassengerAllPositions(int i, int i2, int i3, int i4) throws RemoteException;

    void setMsmPassengerAllPositionsToLDCU(int i, int i2, int i3, int i4, int i5) throws RemoteException;

    void setMsmPassengerSeatBackPosition(int i) throws RemoteException;

    void setMsmPassengerSeatCushExt(int i, int i2) throws RemoteException;

    void setMsmPassengerSeatCushExtPosition(int i) throws RemoteException;

    void setMsmPassengerSeatHorizontalPosition(int i) throws RemoteException;

    void setMsmPassengerSeatLegHorzPosition(int i) throws RemoteException;

    void setMsmPassengerSeatLumbControlSwitchEnable(int i) throws RemoteException;

    void setMsmPassengerSeatLumbHorzPos(int i, int i2) throws RemoteException;

    void setMsmPassengerSeatLumbVerticalPos(int i, int i2) throws RemoteException;

    void setMsmPassengerSeatMassgElem(int[] iArr) throws RemoteException;

    void setMsmPassengerSeatMassgIntensity(int i) throws RemoteException;

    void setMsmPassengerSeatMassgProgMode(int i) throws RemoteException;

    void setMsmPassengerSeatTitlLevelOff(int i) throws RemoteException;

    void setMsmPassengerSeatVerticalPosition(int i) throws RemoteException;

    void setMsmPassengerWelcomeActive(int i) throws RemoteException;

    void setMsmPassengerWelcomeSwitch(int i) throws RemoteException;

    void setMsmPsnSeatBackMove(int i, int i2) throws RemoteException;

    void setMsmPsnSeatHorizMove(int i, int i2) throws RemoteException;

    void setMsmPsnSeatVertiMove(int i, int i2) throws RemoteException;

    void setMsmSecRowLeftSeatAllPos(int i, int i2) throws RemoteException;

    void setMsmSecRowLeftSeatCushExtPosition(int i) throws RemoteException;

    void setMsmSecRowLeftSeatCushExtReq(int i, int i2) throws RemoteException;

    void setMsmSecRowLeftSeatLegHorzPosReq(int i, int i2) throws RemoteException;

    void setMsmSecRowLeftSeatLegHorzPosition(int i) throws RemoteException;

    void setMsmSecRowLeftSeatMassgElem(int[] iArr) throws RemoteException;

    void setMsmSecRowLeftSeatMassgIntensity(int i) throws RemoteException;

    void setMsmSecRowLeftSeatMassgProgMode(int i) throws RemoteException;

    void setMsmSecRowRightSeatAllPos(int i, int i2) throws RemoteException;

    void setMsmSecRowRightSeatCushExtPosition(int i) throws RemoteException;

    void setMsmSecRowRightSeatCushExtReq(int i, int i2) throws RemoteException;

    void setMsmSecRowRightSeatLegHorzPosReq(int i, int i2) throws RemoteException;

    void setMsmSecRowRightSeatLegHorzPosition(int i) throws RemoteException;

    void setMsmSecRowRightSeatMassgElem(int[] iArr) throws RemoteException;

    void setMsmSecRowRightSeatMassgIntensity(int i) throws RemoteException;

    void setMsmSecRowRightSeatMassgProgMode(int i) throws RemoteException;

    void setMsmSecrowLeftSeatUnlockReq(int i) throws RemoteException;

    void setMsmSecrowLtSeatSTopMoveReq(int i) throws RemoteException;

    void setMsmSecrowLtSeatTiltPosition(int i) throws RemoteException;

    void setMsmSecrowLtSeatTiltReq(int i, int i2) throws RemoteException;

    void setMsmSecrowLtSeatUnfoldReq(int i) throws RemoteException;

    void setMsmSecrowRTSeatUnfoldReq(int i) throws RemoteException;

    void setMsmSecrowRightSeatUnlockReq(int i) throws RemoteException;

    void setMsmSecrowRtSeatSTopMoveReq(int i) throws RemoteException;

    void setMsmSecrowRtSeatTiltPosition(int i) throws RemoteException;

    void setMsmSecrowRtSeatTiltReq(int i, int i2) throws RemoteException;

    void setMsmdAllPositions(int i, int i2, int i3, int i4, int i5) throws RemoteException;

    void setMsmtLeftSeatFoldReq(int i) throws RemoteException;

    void setMsmtRightSeatFoldReq(int i) throws RemoteException;

    void setMsmtSeatStowReq(int i) throws RemoteException;

    void setMultipleDmsStatus(int i, int i2, int i3, int i4) throws RemoteException;

    void setMusicInfo(byte[] bArr, byte[] bArr2) throws RemoteException;

    void setNavigationInfo(byte[] bArr) throws RemoteException;

    void setNearPollingUnLockSw(int i) throws RemoteException;

    void setNetRadioInfo(byte[] bArr, byte[] bArr2) throws RemoteException;

    void setNetWorkType(int i) throws RemoteException;

    void setNotifyCiuAutoLightStatus(int i) throws RemoteException;

    void setNotifyMessage(byte[] bArr) throws RemoteException;

    void setOtaMcuReqUpdatefile(int i) throws RemoteException;

    void setOtaMcuSendUpdatefile(String str) throws RemoteException;

    void setParkLotChoseIndex2Scu(int i) throws RemoteException;

    void setParkLotRecvIndex2Scu(int i) throws RemoteException;

    void setPhoneAPButton(int i) throws RemoteException;

    void setPhoneParkType(int i) throws RemoteException;

    void setPhoneSMButton(int i) throws RemoteException;

    void setPollingWelcomeSW(int i) throws RemoteException;

    void setPowerOffTunner() throws RemoteException;

    void setPowerOnTunner() throws RemoteException;

    void setRadarWarningVoiceStatus(int i) throws RemoteException;

    void setRadioBand(int i) throws RemoteException;

    void setRadioFrequency(int i, int i2) throws RemoteException;

    void setRadioInfo(byte[] bArr) throws RemoteException;

    void setRadioSearchStationDown() throws RemoteException;

    void setRadioSearchStationUp() throws RemoteException;

    void setRadioVolumeAutoFocus(int i) throws RemoteException;

    void setRadioVolumePercent(int i, int i2) throws RemoteException;

    void setRearCollisionSecurity(int i) throws RemoteException;

    void setRearCrossEmergencyWarning(int i) throws RemoteException;

    void setRearHvacAirDistributionMode(int i) throws RemoteException;

    void setRearHvacFanPosition(int i) throws RemoteException;

    void setRearHvacPowerEnabled(int i) throws RemoteException;

    void setRearLogLight(int i) throws RemoteException;

    void setRemoteDiagCaptureResponse(String str) throws RemoteException;

    void setRightSlideDoorCtrl(int i) throws RemoteException;

    void setRightSlideDoorMode(int i) throws RemoteException;

    void setScuAssLineChanged(int i) throws RemoteException;

    void setScuCommonHomeSlotID(int i) throws RemoteException;

    void setScuCurrentElectronicEyeSpeedLimitAndDistance(int i, int i2) throws RemoteException;

    void setScuCurrentRoadSpeedLimit(int i) throws RemoteException;

    void setScuDetailRoadClass(int i) throws RemoteException;

    void setScuDistractionSwitch(int i) throws RemoteException;

    void setScuDmsMode(int i) throws RemoteException;

    void setScuDsmStatus(int i) throws RemoteException;

    void setScuElkSwitch(int i) throws RemoteException;

    void setScuEventInfoRD(int i) throws RemoteException;

    void setScuFreeParking1Data(float f, float f2, float f3, int i, int i2, float f4, float f5) throws RemoteException;

    void setScuFreeParking2Data(float f, float f2, float f3, int i, int i2, float f4, float f5) throws RemoteException;

    void setScuFsdSwitch(int i) throws RemoteException;

    void setScuIntelligentSpeedLimitValue(int i) throws RemoteException;

    void setScuKeyPark(int i) throws RemoteException;

    void setScuLdwLkaSwitchStatus(int i) throws RemoteException;

    void setScuLocalWeather(int i, int i2, int i3, int i4) throws RemoteException;

    void setScuNaviDangerAreaRDInfo(int i, int i2, int i3, int i4, int i5, int i6, int i7) throws RemoteException;

    void setScuNaviRoadConnectAttrib(int i) throws RemoteException;

    void setScuNgpAvoidTruckSw(int i) throws RemoteException;

    void setScuNgpDriverConfirmLaneChangeSw(int i) throws RemoteException;

    void setScuNgpLaneChangeMode(int i) throws RemoteException;

    void setScuNgpOperationButton(int i) throws RemoteException;

    void setScuNgpPreferFastLaneSw(int i) throws RemoteException;

    void setScuNgpRemindMode(int i) throws RemoteException;

    void setScuNgpTipsWindowsSw(int i) throws RemoteException;

    void setScuOtaTagStatus(int i) throws RemoteException;

    void setScuParkByMemorySw(int i) throws RemoteException;

    void setScuParkingGroundState(int i) throws RemoteException;

    void setScuPhoneSmMode(int i) throws RemoteException;

    void setScuRoadAttr(int i) throws RemoteException;

    void setScuRoadAttribType(int i) throws RemoteException;

    void setScuRoadAttributes(int i, int i2) throws RemoteException;

    void setScuSeatBeltReq(int i) throws RemoteException;

    void setScuSlaAlarmSwitch(int i) throws RemoteException;

    void setScuSpeedLimitDriverConfirmSwitch(int i) throws RemoteException;

    void setScuSpeedLimitRange(int i) throws RemoteException;

    void setScuSpeedLimitSwitchState(int i) throws RemoteException;

    void setScuSsLeftSystemStatus(byte[] bArr) throws RemoteException;

    void setScuSsRightSystemStatus(byte[] bArr) throws RemoteException;

    void setScuTest(int i) throws RemoteException;

    void setScuVoiceLaneChangeCommand(int i) throws RemoteException;

    void setSecRowLeftAngleMove(int i, int i2) throws RemoteException;

    void setSecRowLeftBlowLevel(int i) throws RemoteException;

    void setSecRowLeftHeadHorizMove(int i, int i2) throws RemoteException;

    void setSecRowLeftHeadVertiMove(int i, int i2) throws RemoteException;

    void setSecRowLeftHorizMove(int i, int i2) throws RemoteException;

    void setSecRowLeftLegVertiMove(int i, int i2) throws RemoteException;

    void setSecRowLeftSeatEasyEntryReq(int i) throws RemoteException;

    void setSecRowLeftSeatLumbHorzMove(int i, int i2) throws RemoteException;

    void setSecRowLeftSeatLumbVertiMove(int i, int i2) throws RemoteException;

    void setSecRowLeftSeatPos(int i, int i2, int i3, int i4, int i5, int i6, int i7, int i8) throws RemoteException;

    void setSecRowLeftSeatZeroGravReq(int i) throws RemoteException;

    void setSecRowLtSeatAnglePos(int i) throws RemoteException;

    void setSecRowLtSeatHeadHorzPos(int i) throws RemoteException;

    void setSecRowLtSeatHeadVerticalPos(int i) throws RemoteException;

    void setSecRowLtSeatHorzPos(int i) throws RemoteException;

    void setSecRowLtSeatLegVerticalPos(int i) throws RemoteException;

    void setSecRowRightBlowLevel(int i) throws RemoteException;

    void setSecRowRightHeadHorizMove(int i, int i2) throws RemoteException;

    void setSecRowRightHeadVertiMove(int i, int i2) throws RemoteException;

    void setSecRowRightHorizMove(int i, int i2) throws RemoteException;

    void setSecRowRightLegVertiMove(int i, int i2) throws RemoteException;

    void setSecRowRightSeatEasyEntryReq(int i) throws RemoteException;

    void setSecRowRightSeatLumbHorzMove(int i, int i2) throws RemoteException;

    void setSecRowRightSeatLumbVertiMove(int i, int i2) throws RemoteException;

    void setSecRowRightSeatPos(int i, int i2, int i3, int i4, int i5, int i6, int i7, int i8) throws RemoteException;

    void setSecRowRightSeatZeroGravReq(int i) throws RemoteException;

    void setSecRowRighttAngleMove(int i, int i2) throws RemoteException;

    void setSecRowRtSeatAnglePos(int i) throws RemoteException;

    void setSecRowRtSeatHeadHorzPos(int i) throws RemoteException;

    void setSecRowRtSeatHeadVerticalPos(int i) throws RemoteException;

    void setSecRowRtSeatHorzPos(int i) throws RemoteException;

    void setSecRowRtSeatLegVerticalPos(int i) throws RemoteException;

    void setSfmAnglePos(int i) throws RemoteException;

    void setSfmCtrl(int i) throws RemoteException;

    void setSideReversingWarning(int i) throws RemoteException;

    void setSocCoolingRequestTemp(float f) throws RemoteException;

    void setSpdLimitWarnType(int i) throws RemoteException;

    void setSpeechStateInfo(byte[] bArr) throws RemoteException;

    void setSpeedLimitWarningSwitch(int i) throws RemoteException;

    void setSpeedLimitWarningValue(int i) throws RemoteException;

    void setSpeedUpChargeSwitch(int i) throws RemoteException;

    void setSrsBackBeltWarningEnabled(int i) throws RemoteException;

    void setSrsPassengerCrashOccurSw(int i) throws RemoteException;

    void setStartFullBandScan() throws RemoteException;

    void setStealthMode(int i) throws RemoteException;

    void setStopFullBandScan() throws RemoteException;

    void setSuperParkMode(int i) throws RemoteException;

    void setTBoxBandModem(String str) throws RemoteException;

    void setTBoxChargeLimitValue(int i) throws RemoteException;

    void setTboxAutoPowerOffConfig(int i) throws RemoteException;

    void setTboxBatteryKeepTempAppointTime(int i, int i2, int i3) throws RemoteException;

    void setTboxBatteryKeepTempSwitch(int i) throws RemoteException;

    void setTboxCameraRemoteControlFeedback(String str) throws RemoteException;

    void setTboxCanControlMsg(String str) throws RemoteException;

    void setTboxCancelPowerOffConfig(int i) throws RemoteException;

    void setTboxChargeGunLock() throws RemoteException;

    void setTboxDvTempSamplingPeriod(int i) throws RemoteException;

    void setTboxDvTestReq(int i) throws RemoteException;

    void setTboxGpsDebugSwitch(int i) throws RemoteException;

    void setTboxGpsLogSwitch(int i) throws RemoteException;

    void setTboxPsuMsg(String str) throws RemoteException;

    void setTboxRepairMode(int i) throws RemoteException;

    void setTboxSoldierSw(int i) throws RemoteException;

    void setTboxSoliderCameraSwitch(int i) throws RemoteException;

    void setTboxThresholdSwitch(int i, int i2, int i3) throws RemoteException;

    void setTboxUpgradePrepareRequest(String str) throws RemoteException;

    void setTboxVersionInfoRequest() throws RemoteException;

    void setTboxWifiGatewayInfo(String str) throws RemoteException;

    void setTboxWifiStatus(int i) throws RemoteException;

    void setTheftHeartBeatOff() throws RemoteException;

    void setTheftHeartBeatOn() throws RemoteException;

    void setThemeFirstColor(int i) throws RemoteException;

    void setThemeSecondColor(int i) throws RemoteException;

    void setTrafficSignRecognition(int i) throws RemoteException;

    void setTrdLeftDomeLightSwitchStatus(int i) throws RemoteException;

    void setTrdRightDomeLightSwitchStatus(int i) throws RemoteException;

    void setTrdRowLeftHeadVertiMove(int i, int i2) throws RemoteException;

    void setTrdRowLeftSeatTiltMove(int i, int i2) throws RemoteException;

    void setTrdRowLtSeatHeadVerticalPos(int i) throws RemoteException;

    void setTrdRowLtSeatTiltPos(int i) throws RemoteException;

    void setTrdRowMidHeadVertiMove(int i, int i2) throws RemoteException;

    void setTrdRowMidSeatHeadVerticalPos(int i) throws RemoteException;

    void setTrdRowMiddleSeatTiltMove(int i, int i2) throws RemoteException;

    void setTrdRowRightHeadVertiMove(int i, int i2) throws RemoteException;

    void setTrdRowRightSeatTiltMove(int i, int i2) throws RemoteException;

    void setTrdRowRtSeatHeadVerticalPos(int i) throws RemoteException;

    void setTrdRowRtSeatTiltPos(int i) throws RemoteException;

    void setTrdRowSeatAllPos(int i, int i2, int i3, int i4, int i5) throws RemoteException;

    void setTwoLightData(byte b, byte[] bArr, boolean z, byte[] bArr2, byte[] bArr3, byte[] bArr4) throws RemoteException;

    void setVCUAWDModeSw(int i) throws RemoteException;

    void setVMCRwsSwitch(int i) throws RemoteException;

    void setVMCZWalkModeSwitch(int i) throws RemoteException;

    void setVcuAcChargCurrentMaxLimitedValue(int i) throws RemoteException;

    void setVcuAutoEasyLoadingSwitchStatus(int i) throws RemoteException;

    void setVcuBatBumpRecrdStatus(int i) throws RemoteException;

    void setVcuBestCharge() throws RemoteException;

    void setVcuBrakeLightOn(int i) throws RemoteException;

    void setVcuCdcuChargeGunCommand(int i) throws RemoteException;

    void setVcuChargeLimit(int i) throws RemoteException;

    void setVcuChargeMode(int i) throws RemoteException;

    void setVcuChargerLowVolDiag(int i) throws RemoteException;

    void setVcuDcPreWarmRequestStatus(int i) throws RemoteException;

    void setVcuDcPreWarmSwitchStatus(int i) throws RemoteException;

    void setVcuDisChargeEnabled(int i) throws RemoteException;

    void setVcuDisChargeLimit(int i) throws RemoteException;

    void setVcuDriveMileIncreaseSwitch(int i) throws RemoteException;

    void setVcuEnduranceMileageMode(int i) throws RemoteException;

    void setVcuEnergyRecycleLevel(int i) throws RemoteException;

    void setVcuExtremeFastChargingMode(int i) throws RemoteException;

    void setVcuFullyCharge() throws RemoteException;

    void setVcuMotorPowerMode(int i) throws RemoteException;

    void setVcuNGearWarningSwitch(int i) throws RemoteException;

    void setVcuNaviDestInfo(String str) throws RemoteException;

    void setVcuNaviDestType(int i) throws RemoteException;

    void setVcuNaviKValue(float f) throws RemoteException;

    void setVcuNaviPathId(int i) throws RemoteException;

    void setVcuNaviRemainDistance(int i) throws RemoteException;

    void setVcuNaviRemainTime(int i) throws RemoteException;

    void setVcuNaviType(int i) throws RemoteException;

    void setVcuPGearLimOffSwitchStatus(int i) throws RemoteException;

    void setVcuPowerResponseMode(int i) throws RemoteException;

    void setVcuSecondaryPowerOffRequest(int i) throws RemoteException;

    void setVcuSnowMode(int i) throws RemoteException;

    void setVcuSpecialCarbinModeSwitch(int i) throws RemoteException;

    void setVcuSpecialDrivingMode(int i) throws RemoteException;

    void setVcuSsaSwitchStatus(int i) throws RemoteException;

    void setVcuTrailerModeSwitchStatus(int i) throws RemoteException;

    void setVcuXPortIntellCalcCfg(float[] fArr) throws RemoteException;

    void setVcuXpedalCtrlMode(int i) throws RemoteException;

    void setVcuXpedalModeSwitchStatus(int i) throws RemoteException;

    void setVcuXsportMode(int i) throws RemoteException;

    void setVentilate() throws RemoteException;

    void setWeatherInfo(byte[] bArr) throws RemoteException;

    void setWiperRainDetectSensitivityAndInactive(int i) throws RemoteException;

    void setXpuAdasTopSpeedLimitedValue(int i) throws RemoteException;

    void setXpuApRemoteSw(int i) throws RemoteException;

    void setXpuCduBrightness(int i) throws RemoteException;

    void setXpuCityNgpSwitchStatus(int i) throws RemoteException;

    void setXpuEffectiveSpeedLimitType(int i) throws RemoteException;

    void setXpuElectricEyeSpeedDistance(int i) throws RemoteException;

    void setXpuElectricEyeSpeedLimit(int i) throws RemoteException;

    void setXpuISLCDriverSet(int i) throws RemoteException;

    void setXpuLLCCDetourSw(int i) throws RemoteException;

    void setXpuLccLStraightSw(int i) throws RemoteException;

    void setXpuLightChange(int i) throws RemoteException;

    void setXpuLssSensitivitySwitchStatus(int i) throws RemoteException;

    void setXpuMetaCountryCode(int i) throws RemoteException;

    void setXpuMetaSpeedUnits(int i) throws RemoteException;

    void setXpuNaviRemainingDistance(int i) throws RemoteException;

    void setXpuNaviTypeStatus(int i) throws RemoteException;

    void setXpuNedcSwitch(int i) throws RemoteException;

    void setXpuNgpCustomSpeedCountLever(int i) throws RemoteException;

    void setXpuNgpCustomSpeedCountPercent(int i) throws RemoteException;

    void setXpuNgpCustomSpeedSwitchStatus(int i) throws RemoteException;

    void setXpuNgpOptimalLaneSw(int i) throws RemoteException;

    void setXpuNgpULCSwMode(int i) throws RemoteException;

    void setXpuNraSwitchStatus(int i) throws RemoteException;

    void setXpuRadarEmissionSwitchStatus(int i) throws RemoteException;

    void setXpuRaebSwitchStatus(int i) throws RemoteException;

    void setXpuScpSwitchStatus(int i) throws RemoteException;

    void setXpuSlifSoundStatus(int i) throws RemoteException;

    void setXpuSlwfVoiceStatus(int i) throws RemoteException;

    void setXpuUpdateFileTransferStatus(int i) throws RemoteException;

    void startCharge() throws RemoteException;

    void startTboxCertInstall() throws RemoteException;

    void startTboxCertVerify() throws RemoteException;

    void startTboxOTA(String str) throws RemoteException;

    void startTboxSlowCharge() throws RemoteException;

    void startTboxUpgrading4G() throws RemoteException;

    void startTboxUpgradingTmcu() throws RemoteException;

    void startVcuCharge(int i) throws RemoteException;

    void stopCharge() throws RemoteException;

    void stopMsmDriverSeatMoving(int i) throws RemoteException;

    void stopMsmPassengerSeatMoving(int i) throws RemoteException;

    void stopSecRowLeftSeatMoving(int i) throws RemoteException;

    void stopSecRowRightSeatMoving(int i) throws RemoteException;

    void stopTboxOTA() throws RemoteException;

    void stopTboxSlowCharge() throws RemoteException;

    void stopVcuAcCharge(int i) throws RemoteException;

    void stopVcuDcCharge() throws RemoteException;

    void unregisterEpsListener(IEpsEventListener iEpsEventListener) throws RemoteException;

    void unregisterScuListener(IScuEventListener iScuEventListener) throws RemoteException;

    void unregisterVcuListener(IVcuEventListener iVcuEventListener) throws RemoteException;

    void updateMcuBin(String str) throws RemoteException;

    /* loaded from: classes.dex */
    public static class Default implements IXpVehicle {
        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMcuBurglarAlarmState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMcuIgOn() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMcuIgOff() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIgHeartBeat() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTheftHeartBeatOn() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTheftHeartBeatOff() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMcuIsWakeUpByPhone(int isWakeUp) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public String getMcuHardWareId() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMqttLogInfo(String clientId, String userName, String passWord, String sslAddr) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getCpuTemperature() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMcuHorn(int on) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMcuFlash(int on) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setDrivingMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHardwareVersion() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendTestMsgToMcu(int[] msg) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendPwrDebugMsgToMcu(int[] msg) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendDugReqMsgToMcu(int[] msg) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendDisplayTypeMsgToMcu(int msg) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendPmSilentMsgToMcu(int msg) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendMcuBmsMsgToMcu(int msg) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendOta1MsgToMcu(int[] msg) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendPsuOtaMsgToMcu(int[] msg) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendSecretKeyToMcu(byte[] msg) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendRequestWakeToMcu(int event) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendDiagnoseMsgToMcu(int[] cmd) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendReset4gMsgToMcu(int[] msg) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendResetModemMsgToMcu(int msg) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendGpsInfoMsgToMcu(int[] msg) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void updateMcuBin(String path) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMcuRtcTime(long rtcTime) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public long getMcuRtcTime() throws RemoteException {
            return 0L;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMcuTimeZone(int timeZoneValue) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getPmStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getGSensorOffset() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getScreenTempValue() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int isBcmRearFogLampOn() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmRearFogLampOn(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmFrontLampMode(int groupid) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmFrontLampMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmFarLampState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmNearLampState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int isBcmOutlineMarkerLampsOn() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmRearViewMirrorPos(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmInternalLightOn(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int isBcmInternalLightOn() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmEmergencyBrakeWarning(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int isBcmEmergencyBrakeWarningEnabled() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmAtwsState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float[] getBcmAllWindowsPos() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmLightMeHomeMode(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmLightMeHomeMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmDrvAutoLockEnabled(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int isBcmDrvAutoLockEnabled() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmParkingAutoUnlockEnabled(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int isBcmParkingAutoUnlockEnabled() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmHazardLampsFlash(int on) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmDoorLock(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmDoorLockState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmTrunkOpen(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmTrunkStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmWiperInterval(int level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setChairSlowlyAhead(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setChairSlowlyBack(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setChairSlowlyEnd(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getChairDirection() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getChairLocationValue() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setChairPositionStart(int level, int height, int angle) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setChairPositionEnd() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmChairWelcomeMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmChairWelcomeMode(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmElectricSeatBeltEnabled(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int isBcmElectricSeatBeltEnabled() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmRearSeatBeltWarningEnabled(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int isBcmRearSeatBeltWarningEnabled() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmUnlockResponseMode(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmUnlockResponseMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getBcmDoorsState() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmBackDefrostMode_() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmBackDefrostMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmBackDefrostMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmBackMirrorHeatMode_() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmBackMirrorHeatMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmBackMirrorHeatMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmSeatHeatLevel_() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmSeatHeatLevel(int level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmSeatHeatLevel() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmSeatBlowLevel_() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmSeatBlowLevel(int level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmSeatBlowLevel() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmIgStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getBcmFrontLeftWinPos() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getBcmFrontRightWinPos() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getBcmRearLeftWinPos() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getBcmRearRightWinPos() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getDriverDoorState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setFactoryOledData(byte[] data) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setFactoryOledDisplayMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmChargePortUnlock(int port, int unlock) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getSeatErrorState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVentilate() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getWelcomeModeBackStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void startCharge() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVcuChargeMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuChargingPlugStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuChargeStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuElectricQuantityPercent() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuBatteryCoolingState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getVcuAcPowerConsume() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuBatteryWarmingStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuChargeRemainingTime() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getVcuAvgVehiclePowerConsume() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getEspCarSpeed() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuChargeMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getVcuBatteryWastageStatus() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getVcuBatteryMinTemperature() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuDrivingMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVcuEnergyRecycleLevel(int level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuEnergyRecycleLevel() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuGearState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuAvalibleDrivingDistance() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacFanSpeedUp(int value) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacFanSpeedLevel(int level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacFanSpeedDown(int value) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacFanPosition(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacTempLeftSyncEnabled(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacPsnSeatTempValue(float level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacPsnSeatTempUp(float value) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacPsnSeatTempDown(float value) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacDrvSeatTempValue(float level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacDrvSeatTempUp(float value) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacDrvSeatTempDown(float value) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacAcEnabled(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacAirPurgeEnabed(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacPowerEnabled(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacDefrostMode(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacAirCycleMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacAutoModePreference(int level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacAutoModeEnabled(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacFanSpeedLevel() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacFanPosition() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacOutsideAirQualityStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacOutsideAirQualityLevel() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacAirCycleMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacAutoModePreference() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getHvacPsnSeatTempValue() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getHvacDrvSeatTempValue() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getHvacInnerTemp() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacTempLeftSyncState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacAcState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacAirPurgeSwitchState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacPowerState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacDefrostMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacAutoModeState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void calibrateTpmsTirePressure() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTpmsTirePressureStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getTailRadarLevel() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getTailRadarFaultSt() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getFrontRadarLevel() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getFrontRadarFaultSt() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getNearestEnableRadar() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAutoParkErrorCode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float[] getMileageExtraParams() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getGpsSpeed() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSuperParkMode(int active) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSideReversingWarning(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuTest(int cmd) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setRadarWarningVoiceStatus(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setPhoneSMButton(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setPhoneAPButton(int action) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setParkLotRecvIndex2Scu(int index) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setParkLotChoseIndex2Scu(int index) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLocationInfo(float latitude, float longitude, float altitude, float bearing, float accuracy, long gpsTime) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLaneDepartureWarning(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLaneChangeAssist(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIntelligentSpeedLimit(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setFrontCollisionSecurity(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBlindAreaDetectionWarning(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAutoPilotLocationInfo(float latitude, float longitude, float altitude, float bearing, float accuracy, float gpsSpeed, long gpsTime) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAutoParkOutState(int state) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAutoParkInState(int state) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getScu3FELogData() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getScu3FDLogData() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getScu322LogData() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getSideReversingWarning() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuOperationTips() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getParkingStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLaneDepartureWarning() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLaneChangeAssist() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getIntelligentSpeedLimit() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getFrontCollisionSecurity() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBlindAreaDetectionWarning() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getRadarWarningVoiceStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAvmCameraAngle(int targetAngle) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAvmCameraAngle() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAvmRoofCameraRaise(int up) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAvmRoofCameraHeightStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAvmCameraDisplayMode(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAvmCameraDisplayMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int hasRoofCamera() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float[] getFrontRadarData() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float[] getTailRadarData() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getSteerWheelRotationAngle() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAvmRoofCameraState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAvmRoofCameraPosition() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAvmCameraInitState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBmsBatteryCapacity() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBmsBatteryType() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCcsFaultInfo() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBmsBatteryChipSwVersion() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBmsFailureLvl() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBmsVoltMaxNum() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBmsVoltMinNum() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBmsHottestCellNum() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBmsColdestCellNum() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBmsMaxTemp() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getBmsVoltMax() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getBmsVoltMin() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBmsInsulationResistance() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getBmsBatteryCurrent() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAdasMeta(byte[] metaValues) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAdasPosition(byte[] positionValues) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAdasProfLong(byte[] profLongValues) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAdasProfShort(byte[] profShortValues) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAdasSegment(byte[] segmentValues) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAdasStub(byte[] stubValues) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getDcdcFailStInfo() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getDcdcStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setEpsWorkMode(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getEpsWorkMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setEspHdcEnabled(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int isEspHdcEnabled() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setEspWorkMode(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getEspWorkMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setEspAvhEnabled(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int isEspAvhEnabled() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void resetIcmMeterMileageA() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void resetIcmMeterMileageB() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmAlarmVolume(int volumeType) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getIcmAlarmVolume() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmTimeFormat(int index) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmTemperature(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getIcmTemperature() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmWindPower(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getIcmWindPower() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmWindMode(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getIcmWindMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmMediaSource(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getIcmMediaSource() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmScreenLight(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getIcmScreenLight() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmNavigation(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getIcmNavigation() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmDayNightSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getIcmDayNightSwitch() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSpeedLimitWarningSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getSpeedLimitWarningSwitch() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSpeedLimitWarningValue(int value) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getSpeedLimitWarningValue() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmWindBlowMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getIcmWindBlowMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmWindLevel(int level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getIcmWindLevel() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmDriverTempValue(float value) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getIcmDriverTempValue() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMeterSoundState(int type, int volume, int mute) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendContacts(byte[] json) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setWeatherInfo(byte[] json) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setNavigationInfo(byte[] json) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMusicInfo(byte[] json, byte[] image) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setNetRadioInfo(byte[] json, byte[] image) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setRadioInfo(byte[] json) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBtMusicState(byte[] json) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmSystemTimeValue(int hour, int minutes) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getMeterMileageA() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getMeterMileageB() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getDriveTotalMileage() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getLastChargeMileage() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getLastStartUpMileage() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMeterBackLightLevel(int level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSpeechStateInfo(byte[] info) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getIcmConnectionState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendRomBinMsg(int rpcNum, byte[] bjson, byte[] bin) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmAccount(String account) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setNotifyMessage(byte[] info) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getIpuFailStInfo() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCtrlVolt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCtrlCurr() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCtrlTemp() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMotorTemp() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getTorque() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getRollSpeed() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMotorStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setPowerOnTunner() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setPowerOffTunner() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setRadioSearchStationUp() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setRadioSearchStationDown() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setStartFullBandScan() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setStopFullBandScan() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setRadioBand(int band) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setRadioVolumePercent(int channel, int vol) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setRadioVolumeAutoFocus(int percent) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getRadioVolumeAutoFocus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setFmVolume(int channel, int volume) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setCarExhibitionModeVol(int percent) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setRadioFrequency(int band, int frequency) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getRadioFrequency() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAudioMode(int item, int value) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getAudioMode() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public String getRadioStatus() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public String getAudioDspStatus() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAudioGEQParams(int band, int frequence, int liftCurve, int gain) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAudioBalanceFader(int value1, int value2) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAudioParameters() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getBmsChargeCompleteTime() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public long getTboxRtcTimeStamp() throws RemoteException {
            return 0L;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTboxWifiStatus(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTboxWifiGatewayInfo(String info) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendTboxRemoteDiagInfo(String diagInfo) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getRemoteDiagCaptureRequest() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setRemoteDiagCaptureResponse(String response) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void getTboxVersionInfoAsync() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void beginTboxOTA() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void stopTboxOTA() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getOTAProgress() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public String getTBoxModemInfo() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTBoxConnectionStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAnalogSoundEffect(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAnalogSoundEnable(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void openBcmBonnet() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int isBcmBonnetOpened() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setEspIbsBrakeMode(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getEspIbsBrakeMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTBoxChargeLimitValue() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTBoxChargeLimitValue(int value) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void stopCharge() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAtlOpen(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAtlOpen() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAtlReady() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getDoubleThemeColor() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setDoubleThemeColor(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setThemeFirstColor(int color) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getThemeFirstColor() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setThemeSecondColor(int color) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getThemeSecondColor() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAutoBrightness(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAutoBrightness() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBrightnessLevel(int brightness) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBrightnessLevel() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTwoLightData(byte protocol, byte[] lightPosition, boolean hold, byte[] color, byte[] bright, byte[] time) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setGroutLightData(byte groupNum, byte solution, int lightlist, boolean hold, byte color, byte bright, byte time) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAllLightData(boolean hold, byte[] color, byte[] bright, byte[] time) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmWindowMovePosition(int window, float position) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacFanSpeedInc() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacFanSpeedDec() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacDrvSeatTempInc() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacDrvSeatTempDec() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacPsnSeatTempInc() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacPsnSeatTempDec() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMcuBatteryStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMcuIgState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMcuCameraStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMcuLampStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMcuChargeStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void requestTBoxModemStatus() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public String getTBoxLastApnMsg() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public String getTBoxLastModemMsg() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void requestTBoxBandModemStatus() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTBoxLastBandModemMsg() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTBoxBandModem(String value) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public String getTBoxBandModem() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAtlDowOpen(int on) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAtlDowOpen() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLluEnableStatus(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLluEnableStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLluWakeWaitSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLluWakeWaitSwitch() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLluShowOffSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLluShowOffSwitch() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLluSleepSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLluSleepSwitch() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLluChargingSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLluChargingSwitch() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLluPhotoSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLluPhotoSwitch() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLluPrivateCtrl(boolean start, int ftype, int ftick, int rtype, int rtick, int personAngle, int personWalkDirection) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAvasWaitForWakeUpSoundSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAvasWaitForWakeUpSoundState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAvasFullChargeWaitForWakeUpSoundSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAvasFullChargeWaitForWakeUpSoundState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAvasSleepSoundSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAvasSleepSoundState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAvasAcChargingSoundSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAvasAcChargingSoundState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAvasDcChargingSoundSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAvasDcChargingSoundState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAvasDisconnectChargingSoundSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAvasDisconnectChargingSoundState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAvasLowSpeedSoundSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAvasLowSpeedSoundSwitch() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAvasLowSpeedSoundEffect(int sound) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAvasLowSpeedSoundEffect() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAvasExternalSoundCmd(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAvasFriendlySayHiSound(int sound) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAvasFriendlySayHiSound() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAvasExternalVolume(int vol) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAvasExternalVolume() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAvasLowSpeedVolume(int vol) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAvasLowSpeedVolume() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLluBreathMode(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLluBreathMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLluCurrentFunction() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAvasExternalSoundModeCmd(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmDrvSeatHorizMove(int control, int directio) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmDrvSeatBackMove(int control, int directio) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmDrvSeatVertiMove(int control, int directio) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmDrvLegVertiMove(int control, int directio) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmDrvLumbHorzMove(int control, int directio) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmDrvLumbVertiMove(int control, int directio) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmDrvSeatHorizPosition(int pos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMsmDrvSeatHorizPosition() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmDrvSeatVertiPosition(int pos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMsmDrvSeatVertiPosition() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmDrvSeatBackPosition(int pos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMsmDrvSeatBackPosition() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmDrvSeatLegPosition(int pos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMsmDrvSeatLegPosition() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmPsnSeatHorizMove(int control, int direction) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmPsnSeatBackMove(int control, int direction) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmPsnSeatVertiMove(int control, int direction) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getBcmWindowMovePosition(int window) throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmWindowMoveCmd(int window, int moveForward) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmNfcCardEnabled(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmNfcCardSwitchState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmAutoWindowCmd(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmWindowRemoteCtrlCfg(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getWindowRemoteCtrlCfg() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmChildLockCfg(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmChildLockCfg() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmLeftMirrorCtrlCmd(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmRightMirrorCtrlCmd(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmLeftMirrorHorizPos(int pos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmLeftMirrorHorizPos() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmRightMirrorHorizPos(int pos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmRightMirrorHorizPos() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmLeftMirrorVerticalPos(int pos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmLeftMirrorVerticalPos() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmRightMirrorVerticalPos(int pos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmRightMirrorVerticalPos() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmReverseMirrorCfgCmd(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmReverseMirrorCfgCmd() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmShcReq(int flag) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmFollowMeTime(int timeType) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmFollowMeTime() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmDayLightMode(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmDayLightMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmDomeLightCfg(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmDomeLightCfg() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getTpmsTirePressureValue(int position) throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacTempRightSyncEnabled(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacTempRightSyncState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacDrvLeftFanHorPos(int position) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacDrvLeftFanHorPos() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacDrvLeftFanVerPos(int position) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacDrvLeftFanVerPos() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacDrvRightFanHorPos(int postion) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacDrvRightFanHorPos() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacDrvRightFanVerPos(int postion) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacDrvRightFanVerPos() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacPsnLeftFanHorPos(int position) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacPsnLeftFanHorPos() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacPsnLeftFanVerPos(int position) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacPsnLeftFanVerPos() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacPsnRightFanHorPos(int position) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacPsnRightFanHorPos() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacPsnRightFanVerPos(int position) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacPsnRightFanVerPos() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacAqsEnabled(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacAqsSwitchState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacAqsSensitivity(int level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacAqsSensitivity() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacSweepWindStatus(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacSweepWindStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacEconEnabled(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacEconState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacEavDrvWindMode(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacEavDrvWindMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacEavPsnWindMode(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacEavPsnWindMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacAirCirculationPeriod(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacAirCirculationPeriod() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacTempColor() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacAirDistributionMode(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getHvacExternalTemp() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacPm25Value() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSocCoolingRequestTemp(float temp) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAmpCoolingRequestTemp(float temp) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAmpTempRiseSpeedState(int temp) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacLonizerState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAvmCalibrationMode(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAvmCalibrationMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAvmOverlayWorkSt(int on) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAvmOverlayWorkSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAvmTransparentChassisState(int on) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAvmTransparentChassisState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAvmFineTuneMode(int on) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAvmFineTuneMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAmpMusicStyle(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAmpMusicStyle() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAmpMusicScene(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAmpMusicScene() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAmpStandByEnabled(int on) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int isAmpStandByEnabled() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAmpSoundFieldMode(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAmpSoundFieldMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setApmAudioEffect(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getApmAudioEffect() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAmpMute(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int isAmpMute() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAmpVolume(int level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAmpVolume() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAmpSoundTrackMode(int track) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAmpSoundTrackMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setFarLampAutoSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getFarLampAutoSwitch() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setCutLinePreventSw(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCutLinePreventSw() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setRearCrossEmergencyWarning(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getRearCrossEmergencyWarning() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setRearCollisionSecurity(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getRearCollisionSecurity() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setDoorOpenWarning(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getDoorOpenWarning() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setFatigueDetectionSw(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getFatigueDetectionSw() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTrafficSignRecognition(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTrafficSignRecognition() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSpdLimitWarnType(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getSpdLimitWarnType() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLaneAlignmentAssist(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLaneAlignmentAssist() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHighSpeedNavigation(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHighSpeedNavigation() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAutoParkReq(int cmd) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setKeyRemoteParkType(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getKeyRemoteType() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIntelligentCallButton(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getIntelligentCallButton() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getPhoneSMButton() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAutoParkSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAutoParkSwitch() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setPhoneParkType(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getPhoneParkType() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setKeyRemoteSMButton(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getKeyRemoteSMButton() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAdasMapInfo(byte[] info) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float[] getParkSlotInfo() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float[] getEnvCharacterInfo() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float[] getCarPositionInfo() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float[] getRadarDataInfo() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getEpsSteeringAngle() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getEpsSteeringAngleSpeed() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setCdcFunctionMode(int style) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsbEnabled(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int isMsbEnabled() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setDhcDoorknobAutoOpenEnabled(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int isDhcDoorknobAutoOpenEnabled() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCdcFunctionMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSrsBackBeltWarningEnabled(int on) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int isSrsBackBeltWarningEnabled() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int isSrsPsnOnSeat() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setChargeGunUnlock() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setChargeAppointTime(int[] data) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuResHeatManaTime() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getVcuAcChargeVolt() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getVcuAcChargeCur() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getVcuDcChargeCur() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getVcuDcChargeVolt() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVcuDisChargeLimit(int percent) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuDisCargeLimit() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVcuDisChargeEnabled(int on) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuDischargeQuantity() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuChargeSocQuantity() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuEvsysReadyState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmWiperServiceMode(int on) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmWiperServiceMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmManualFrontLeftWinStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmManualFrontRightWinStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmManualRearLeftWinStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmManualRearRightWinStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getLeftFrontDoorOpened() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int isBcmDriverOnSeat() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmHighBeamMode(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuBatteryLevelPercent() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getVcuBatteryVolt() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getVcuBatteryCur() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuStopChargeReason() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVcuBrakeLightOn(int on) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getSrsDrvBeltFastenStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getSrsPsnBeltFastenStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getSrsBackLeftBeltFastenStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getSrsBackMiddleBeltFastenStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getSrsBackRightBeltFastenStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getSrsCrashOutputStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getSrsAirbagFaultStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getSrsSelfCheckStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getNetWorkType() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAmpChannelVolAndSource(int channelbit, int volume, int soundSource, int activebit) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuBreakPedalStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuAccPedalStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmLeftTurnLampStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmRightTurnLampStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLluWakeWaitMode(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLluWakeWaitMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLluShowOffMode(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLluShowOffMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLluSleepMode(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLluSleepMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLluAcChargeMode(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLluAcChargeMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLluDcChargeMode(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLluDcChargeMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLluPhotoMode(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLluPhotoMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int isVcuParkingGearValid() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmChargePortStatus(int port) throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVpmLdwLeftWarningStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVpmLdwRightWarningStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBlindAreaLeftWarning() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBlindAreaRightWarning() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getRearCrossLeftWarning() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getRearCrossRightWarning() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuLongCtrlRemind() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpilotStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuLatCtrlRemind() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getVcuVehLast100mConsume() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int isVcuBatteryCold() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int isVcuChargeSpeedSlow() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAccStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getChargeAppointTime() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacTempSyncMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void getSimStatusAsync() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getApmAllChannelVolume() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getApmAllChannelSoundSource() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setNetWorkType(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmWiperInterval() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMcuUpdateReqStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMcuUpdateReqStatus(int data) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getOtaMcuReqUpdatefile() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setOtaMcuReqUpdatefile(int data) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setOtaMcuSendUpdatefile(String file) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getOtaMcuUpdateStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public String getTboxVersionInfoResponse() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTboxVersionInfoRequest() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void startTboxOTA(String file) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public String getStartTboxOTAResponse() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public String getStopTboxOTAResponse() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmSyncSignal(String data) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmOsdShow(String data) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmInfoCardAdd(String data) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmInfoCardUpdate(String data) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmInfoCardRemove(String data) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmAllCardsRefresh(String data) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmInfoFlowMsg(String data) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmCarSetting(String data) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmWeather(String data) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmWheelkey(int key) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmSyncTime(String data) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmNavigationBmp(int totalsize, int pagesize, int pageIndex, int totalPage, byte[] data) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmNavigationInfo(String data) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setGpsReset(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getGpsResetResp() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTboxPsuMsg(String msg) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public String getTboxPsuMsg() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmPowerMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmPsnSeatHeatLevel(int level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmPsnSeatHeatLevel() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmBrightness(int level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getIcmBrightness() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getIcmTimeFormat() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCwcChargeSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCwcChargeErrorSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAutoWindowLockSw(int active) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAutoWindowLockSw() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLeavePollingLockSw(int active) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLeavePollingLockSw() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setNearPollingUnLockSw(int active) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getNearePollingUnLockSw() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setStealthMode(int active) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void getStealthMode() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVcuSnowMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuSnowMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int hasEspFault() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int hasEspHdcFault() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int hasEspAvhFault() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCiuDmsStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setCiuDmsStatus(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setCiuFaceIdMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCiuUid() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setCiuUid(int uid) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCiuFaceIdStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCiuFaceIdPrimalStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCiuFaceShieldStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCiuErrorType() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCiuLightIntensity() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCiuFaceIDSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setCiuFaceIdSwitch(int value) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setCiuDeleteFaceId(int deleteFaceId) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCiuDeleteFaceIdResult() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setCiuRegHint(int hint) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setCiuStartRegFlow(int flow) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setCiuStartRegFlag(int flag) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCiuFaceAction() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setCiuFaceActionRequest(int action) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setCiuFirmFaceCancel(int value) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setCiuRegisterRequestMulti(int uid, int faceActionRequest, int faceIdMode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setCiuDeleteMulti(int uid, int deleteFaceId) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCiuValid() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCiuAutoLockSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCiuDvrMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setCiuDvrMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setCiuPhotoProcess() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setCiuDvrLockMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setCiuVideoOutputMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCiuSdStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCiuDvrStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setCiuFormatMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCiuDvrFormatStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCiuDvrLockFb() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuPhoneSmMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuPhoneSmMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuKeyPark(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuKeyPark() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float[] getScuAltimeter() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getScuSlotTheta() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getScuTargetParkingPosition() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuFrontMinDistance() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuRearMinDistance() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuModeIndex() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuLocalWeather(int network, int temperature, int humidity, int weather) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getVcuRawCarSpeed() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuPureDriveModeFeedback() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuEbsBatterySoc() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuSupDebugInfo() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuErhDebugInfo() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuChargeError() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuAcInputStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void startVcuCharge(int chargeSoc) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void stopVcuAcCharge(int chargeSoc) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void stopVcuDcCharge() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVcuBestCharge() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVcuFullyCharge() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVcuChargeLimit(int limit) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getMcuDtcReportEv() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public String getMcuFactoryDisplayTypeMsgToMcu() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public byte[] getMcuFaultInfo() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTboxCanControlMsg(String msg) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public String getTboxCanControlMsg() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setCiuRainSw(int level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCiuRainSw() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCiuCarWash() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setCiuCarWash(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCiuDistractionStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setCiuDistractionStatus(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCiuFatigueStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setCiuFatigueStatus(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setCiuDmsMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCiuFatigueLevel() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCiuDistractionLevel() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuRoadAttr(int attr) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuAssLineChanged(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuAssLineChanged() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuDmsMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuSeatBeltReq(int req) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacTempPtcStatus(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmPollingOpenCfg() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmPollingOpenCfg(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmDriverBeltWarning() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmRearViewAutoDownCfg() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmRearViewAutoDownCfg(int cfg) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmChargeGunLockSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuRadarDisplayActive() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuErrorTips() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmDmsMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmFatigueLevel(int level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmDistractionLevel(int level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTboxAvpStartStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getBmsAcMaxCurrent() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBmsDtcErrorStopCurrent() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBmsDtcChargeCurrentOver() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBmsDcChargeStopReason() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getBmsBatteryTotalVolt() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getBmsDcCurrent() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getBmsDcVolt() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void startTboxCertInstall() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void startTboxCertVerify() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public String getTboxDvBattMsg() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMcuRepairMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLluSelfActive(int active) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTboxChargeGunLock() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMultipleDmsStatus(int dmsStatus, int faceIdStatus, int fatigueStatus, int distractionStatus) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getEspEpbWarningLampStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getEspEpsWarninglampStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuEvErrLampDsp() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuEvErrMsgDsp() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuSuperParkMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float[] getScuLocatData() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float[] getScuParkingProgress() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float[] getScuSensorData() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float[] getScuLAvmData() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float[] getScuRAvmData() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float[] getScuSlotForPark() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuRadarVoiceActive() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuRadarVoiceTone() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmLeftMirrorMove(int control, int direction) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmRightMirrorMove(int control, int direction) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmDriverAllPositions(int seatHorizonPos, int seatVerticalPos, int seatTiltingPos, int legHeightPos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmAllExteriorMirrorsPositions(int lMirrorHorizonPos, int lMirrorVerticalPos, int rMirrorHorizonPos, int rMirrorVerticalPos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float[] getScuSlotData() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLluCurrentFunction(int function) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTboxDvTestReq(int req) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTboxDvTempSamplingPeriod(int second) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public String getTboxDvTempMsg() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMcuPsuTestReq(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMcuPsuTestResult() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getDvTestMcuTemp() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public byte[] getMcuDvBattMsg() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getDvTestBatTemp() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getDvTestPcbTemp() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMcuDvTestReq(int req) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMcuDvTempSamplingPeriod(int second) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacSelfDrySwStatus(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacSelfDrySwStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLluLockSocDspSwitch(int active) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLluLockSocDspSwitch() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLluUnLockSocDspSwitch(int active) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLluUnLockSocDspSwitch() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAvasPhotoSoundSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAvasPhotoSoundSwitch() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void saveMsmDriverAllPositionsToMcu(int seatHorizonPos, int seatVerticalPos, int seatTiltingPos, int legHeightPos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMcuChairWelcomeMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMcuChairWelcomeMode(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBtPhoneCall(String info) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void startTboxUpgradingTmcu() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTboxTmcuUpgradingProgress() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void startTboxUpgrading4G() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTbox4GUpgradingProgress() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTpmsSystemFaultWarnLampStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTpmsAbnormalTirePressureWarnLampStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTpmsTirePressureWarningInfo(int position) throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMcuRemoteControlFeedback(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTboxCameraRemoteControlFeedback(String msg) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void registerScuListener(IScuEventListener listener) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void unregisterScuListener(IScuEventListener listener) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmMusicInfo(String musicInfo) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmMusicPlaybackTimeInfo(String timeInfo) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendUpgradingTboxByUdiskReq(String msg) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public String getUpgradingTboxByUdiskResponse() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public byte[] getPmStatusWithParameter() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMcuOcuState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMcuCiuState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public String getNaviBmpInfoRequiredByIcm() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float[] getImuSystemState() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float[] getImuQuatData() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float[] getImuUbxPvtData1() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float[] getImuUbxPvtData2() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float[] getImuUbxRawXData() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getImuTboxPackGgaData() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public long[] getImuAddData() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getImuDiagMessage() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float[] getImuNavigationData() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float[] getImuUbxSfrbxData() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMcuAtlsState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void startTboxSlowCharge() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void stopTboxSlowCharge() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTboxAutoPowerOffConfig(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTboxAutoPowerOffSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTboxCancelPowerOffConfig(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTboxCancelPowerOffSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getTboxPowerOffCountdown() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuSlotsNumber() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacMinWindSpeedLevel() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacMaxWindSpeedLevel() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMinHavcTemperature() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMaxHavcTemperature() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTboxSoldierSw(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTboxSoldierSwState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTboxSoldierWorkState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getTboxSoldierGsensorData() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendTboxSoldierTick() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getTpmsAllTirePressureWarnings() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getTpmsAllTireTemperatureWarnings() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getTpmsllTirePerssureSensorStatus() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVcuExtremeFastChargingMode(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuExtremeFastChargingSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuRoadAttributes(int parking, int road) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuDetailRoadClass(int roadClass) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getTpmsAllTireTemperature() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getMcuPsuOtaFeedbackMsg() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMcuFaceIdSw(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMcuFaceIdSwState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setFaceIdModeState(int state) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMcuFaceIdMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLluScriptStRequest(int request) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLluScriptStResponse() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLluScriptParameter(int[] parameter) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLluScriptData(int index, int pos, int length, int[] data) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setDvrEnable(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getDvrEnableState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setNotifyCiuAutoLightStatus(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setCiuConfigurationActive(int version) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCiuConfigurationActive() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setCiuDelayOff(int value) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCiuDelayOff() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setCiuDeliveryUploadMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCiuDeliveryUploadMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmWindowsMovePositions(float flPosition, float frPosition, float rlPosition, float rrPosition) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmSdcMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmTwcMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmTwcUpdownSwitch(int state) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmLeftSdcSwitch(int state) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmRightSdcSwitch(int state) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendTboxGpsAntPowerControlReq(int req) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getGpsAntPowerControlResponse() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMcuAndroidOtaStatus(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLluFindCarSwitch(int active) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLluFindCarSwitchState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLluLockUnlockSocDspSwitch(int active) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLluLockUnlockSocDspSwitchState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLluAcChargingCfg() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLluDcChargingCfg() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLluSpeedLimitCfg(int speed) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLluSpeedLimitCfg() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLluPersonAngle(int angle) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLluPersonWalkDirection(int direction) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMcuLluEnableStatus(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMcuLluEnableStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMcuLluWakeWaitSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMcuLluWakeWaitSwitch() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMcuLluShowOffSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMcuLluShowOffSwitch() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMcuLluSleepSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMcuLluSleepSwitch() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMcuLluChargingSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMcuLluChargingSwitch() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMcuLluPhotoSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMcuLluPhotoSwitch() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuRealGearLevel() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVcuNGearWarningSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuNGearWarningSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMcuAutoPowerOffSw(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMcuAutoPowerOffSwitchState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMcuPowerOffCountdownAction(int action) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMcuPowerOffCountdownNotice() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getSwsButtonsRawData() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendTboxGpsHwResetRequest() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setGpsPollingType(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTboxGpsDebugSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendTboxGpsMgaRequest() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTboxGpsMgaResponse() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmRadioType(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmFaceInfo(String faceInfo) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmLeftChargePortLockState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmRightChargePortLockState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAlsInitializationStudyState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public String getMcuVersion() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getAlsInitializationStudyAndErrorState() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMcuHornsStates(int lfHornSt, int lrHornSt, int rfHornSt, int rrHornSt) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendChargeCompleteTimeToMcu(int min) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMcuRequestedMessage() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAvmMultipleDisplayProperties(int displayMode, int calibration, int overlayWorkSt, int transparentChasisWorkSt, int fineTuneMode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void resetTbox() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getScuMrrAssistSystemStates() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmWiperRainDetectSensitivity(int level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmWiperRainDetectSensitivity() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmWindowLockState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAvmWorkState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getBcmLeftAndRightTurnLampStatus() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendXpuUpdateRequest(String req) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public String getXpuUpdateResponse() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setXpuUpdateFileTransferStatus(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuUpdateResult() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuUpdateProgress() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuConnectionStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmParkLightRelatedFMBLightConfig(int cfg) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmParkLightRelatedFMBLightConfigState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuRearCollisionWarning() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getAvmCamerasFaultStates() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMcuMonitorSwitch(int mode, int timeInMinutes) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMcuMonitorState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getBcmParkingLampsStates() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmDoorUnlockRequestSource() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuCommonHomeSlotID(int id) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuFreeParking1Data(float rx, float ry, float rtheta, int state, int attr, float ds, float r) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuFreeParking2Data(float rx, float ry, float rtheta, int state, int attr, float ds, float r) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuLeftDoorOpenWarning() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuRightDoorOpenWarning() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTboxRepairMode(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTboxRepairModeState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmLeftSdcPsdMotorState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmRightSdcPsdMotorState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setXpuNedcSwitch(int onOff) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setXpuLightChange(int onOff) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void registerVcuListener(IVcuEventListener listener) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void unregisterVcuListener(IVcuEventListener listener) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void registerEpsListener(IEpsEventListener listener) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void unregisterEpsListener(IEpsEventListener listener) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmKeyAuthState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTboxSoliderCameraSwitch(int onOff) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTboxSoliderCameraState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTboxThresholdSwitch(int highLevel, int middleLevel, int lowLevel) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuRearMirrorControlState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void activateAndroidLluControl() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMcuLluWorkStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTboxSoliderEnableState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getEspApbSystemDisplayMessage() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getEspApbSystemStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getEspHbcRequestStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getIcmBrakeFluidLevelWarningMessage() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getVcuAcChargeCurAfterVoltBoosted() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getVcuAcChargeVoltAfterVoltBoosted() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuCruiseControlStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendIcmUpdateRequest(String req) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public String getIcmUpdateResponse() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmUpdateFileTransferStatus(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getIcmUpdateResult() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getIcmUpdateProgress() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmWiperSpeedSwitchState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendTboxRenewalPartsRequest(String req) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public String getTboxRenewalPartsResponse() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTboxRemoteLluMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendBcmSeatBeltRequest(int req) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendCduVolumeToAmp(int volume) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public byte[] getBcmNfcCardIdInfo() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmAutoLightState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setXpuCduBrightness(int brightness) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuBrightness() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMcuDelaySleep(int heartBeat, int value) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendTboxBleAccountLoginFeedback(int feedback) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendMcuBleAccountDataFeedback(int feedback) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public byte[] getMcuBleAccountData() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuExtraLatCtrlRemindInfo() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAvasFaultStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCiuStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getBmsCellTempMaxNum() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getBmsCellTempMinNum() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getWasherFluidWarning() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getBcmPassengerSeatBeltSbrWarningStatus() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmSeatHeatErrStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getIcmCabinAiFeedback() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuAlarmFaultStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getScu322LogDataD20() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuSlaStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuLdwStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuBsdStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuRctaStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacErrorStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBmsScoIsLowStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBmsIsErrorStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getIsHvCutOffStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBatteryKeepTempSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBatteryKeepTempMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSpeedUpChargeSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getSpeedUpChargeMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAutoLightSwitch(int onOff) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendTboxLocationInfo(String data) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmRearLeftSeatHeatSw(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmRearLeftSeatHeatState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmRearRightSeatHeatSw(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmRearRightSeatHeatState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmRearLeftHeaterErrorState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmRearRightHeaterErrorState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVcuDriveMileIncreaseSwitch(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuDriveMileIncreaseStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuDistractionSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuCutInPreventionWarning() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuAccLkaWarning() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuRoadVoiceTips() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacAirInTakeAutoControlStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacWindSpeedAutoControlStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacAirDistributionAutoControlStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmSdcKeyOpenCtrlCfg(int cfg) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmSdcKeyOpenCtrlCfg() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmSdcKeyCloseCtrlCfg(int cfg) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmSdcKeyCloseCtrlCfg() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmSdcMaxAutoDoorOpeningAngle(int maxAngle) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmSdcMaxAutoDoorOpeningAngle() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmLeftSdcHazzardRequest() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmRightSdcHazzardRequest() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmLeftSdcSystemErrorState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmRightSdcSystemErrorState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmLeftSdcDenormalizeState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmRightSdcDenormalizeState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmLeftSdcWindowsAutoDownSwitch(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmLeftSdcWindowsAutoDownSwitchState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmRightSdcWindowsAutoDownSwitch(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmRightSdcWindowsAutoDownSwitchState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmLeftSdcAutoOrManualControl(int cmd, int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmRightSdcAutoOrManualControl(int cmd, int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmReadyEnableState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuNedcSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVcuEnduranceMileageMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuEnduranceMileageMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuWltpAvailableDrivingDistance() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmBreakPedalStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmLeftSdcDoorPosition(int position) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmRightSdcDoorPosition(int position) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuSlaAlarmSwitch(int state) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuSlaAlarmSwitchState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float[] getScuLocatDataWithZ() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMcuCidState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMcuRvcState(int state) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuFsdSwitch(int onOff) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuFsdSwitchState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMcuBacklightTemperature() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMcuBacklightIcDriverState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmDayNightMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTboxBatteryKeepTempSwitch(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTboxRemoteBatteryKeepTempReq() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTboxBatteryKeepTempAppointTime(int appointFlag, int appointHour, int appointMin) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getTboxBatteryKeepTempAppointTime() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacAcCtrlType() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacBlowerCtrlType() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacAirCirculationType() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuLkaState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmNfcCardAuthStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public String getIcmUpdatingPartitionAndProgress() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getLeftAndRightTurnLampsActiveStatus() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmAutoWindowsControl(int cmd, int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getBcmDaytimeRunningLightsOutputStatus() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmEnvironmentMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void notifyScuRearViewMirrorAdjustmentPageState(int state) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmTrunkDoorHeight() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuMrrFailureSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuFishEyeCamFailureSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuMainCamFailureSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuNarrowCamFailureSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getScuSideCamsFailureSt() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuDisplayCruiseSpeed() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getQuitNgpOddSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuNgpOperationButton(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuNgpOperationButtonSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuNgpLcTips1() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuNgpInfoTips1() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuNgpTipsWindowsSw(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getScuDoorsObstacleDetectionSt() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getScuDoorsRadarDistance() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getScuDoorsRadarDisplayLevel() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmFollowMeHomeCfg(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmFollowMeHomeCfg() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAtlConfiguration(byte[] data) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public String getIcmEcuUpdateResult() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTboxGpsLogSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTboxToggleGpsLogSwitchResult() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmCwcSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmCwcSwitchState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public String getIcmCrashInfo() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmLeftSdcMoveCommand() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmRightSdcMoveCommand() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getEpsTorsionBarTorque() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuXpilot3Status() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuNgpPreferFastLaneSw(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuNgpAvoidTruckSw(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuNgpDriverConfirmLaneChangeSw(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuNgpLaneChangeMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuNgpRemindMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMcuLluModeCtrl(int mhlActiveMode, int lhlActiveMode, int rhlActiveMode, int mrlActiveMode, int lrlActiveMode, int rrlActiveMode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMcuLLuSelfControlData(byte[] data) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMcuTrunkPowerSw(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMcuTrunkPowerStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMcuTrunkPowerOffDelay(int delay) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMcuTrunkPowerOffDelay() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public String getIcmDiagnosisInfo() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuNgpTipsWindowsSwSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuNgpPreferFastLaneSwSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuNgpAvoidTruckSwSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuNgpDriverConfirmLaneChangeSwSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuNgpLaneChangeMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuNgpRemindMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getSrsRearLeftSeatOccupancyStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getSrsRearMiddleSeatOccupancyStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getSrsRearRightSeatOccupancyStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmShadeControllerComfortCommand(int command) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmShadeControllerPosition(int position) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmShadeControllerPosition() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmShadeControllerInitialization(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmShadeControllerInitializationSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getBcmWiperSpeedSwitchesStatus() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getVcuObcAcVoltage() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getVcuObcAcCurrent() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuObcAcVoltageStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmLeftSdcSystemRunningState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmRightSdcSystemRunningState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuSsLeftSystemStatus(byte[] data) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuSsRightSystemStatus(byte[] data) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuSdcUltrasonicRadarVoiceTone() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmLeftSdcDoorPosition() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmRightSdcDoorPosition() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuOtaTagStatus(int tag) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuSdcTips() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuSdcTts() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuCurrentRoadSpeedLimit(int speedLimit) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuLccExitReason() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuAccExitReason() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuElkSwitch(int off) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuElkSwitchState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getBcmRearViewMirrorsAdjustStates() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacSfsSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacSfsSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getHvacSfsTypeInChannels() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHavacSfsChannel(int channel) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacSfsChannel() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacDeodorizeSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacDeodorizeSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacWarpSpeedWarmingSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacWarpSpeedWarmingSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacWarpSpeedCoolingSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacWarpSpeedCoolingSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacAutoDefogSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacAutoDefogSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmPassengerSeatHorizontalPosition(int pos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMsmPassengerSeatHorizontalPosition() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmPassengerSeatVerticalPosition(int pos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMsmPassengerSeatVerticalPosition() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmPassengerSeatBackPosition(int pos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMsmPassengerSeatBackPosition() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMsmDriverHeadrestStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMsmPassengerHeadrestStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getImuSatellitesNumber() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getImuNavigationSatellitesRssi() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void deactivateAndroidLluControl() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmShadeControllerMotorStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmPassengerAllPositions(int seatHorizonPos, int seatVerticalPos, int seatTiltingPos, int legHeightPos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmPassengerAllPositionsToLDCU(int memoryReq, int seatHorizonPos, int seatVerticalPos, int seatTiltingPos, int legHeightPos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuRightSdcRadarStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuLeftSdcRadarStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuLeftSdcBlindStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuLeftSdcSceneStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuRightSdcBlindStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuRightSdcSceneStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuSdcAutoModeStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuSdcCtrlIndex1() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuSdcCtrlIndex2() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuLeftSdcURadarDistance() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuRightSdcURadarDistance() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuParkingGroundState(int state) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuRightSdcRadarDistance() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuRightSdcRadarTof() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuRightSdcRadarPeakLevel() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuRightSdcRadarStatusCcp() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuRightSdcRadarErrorStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuLeftSdcRadarDistance() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuLeftSdcRadarTof() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuLeftSdcRadarPeakLevel() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuLeftSdcRadarStatusCcp() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuLeftSdcRadarErrorStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuRightSdcRadarRt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuRightSdcRadarWaveWidth() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuLeftSdcRadarRt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuLeftSdcRadarWaveWidth() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getRightRightSdcIndexN() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLeftSdcIndexN() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getScuSdcRadarFusion() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuLeftSdcRadarHallCounter() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuRightSdcRadarHallCounter() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMcuFactoryModeSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuCarStationaryStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMcuFactoryModeSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMcuTemporaryFactoryStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuAebAlarmSwitchState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacSfsConcentration(int value) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacSfsConcentrationStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuSteeringWheelEps() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuVoiceLaneChangeCommand(int cmd) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuNgpModeStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuParkByMemorySwSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuParkByMemorySw(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void stopMsmDriverSeatMoving(int cmd) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void stopMsmPassengerSeatMoving(int cmd) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuDsmPrompt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float[] getImuSystemStateAndSpeed() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuLdwLkaSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuLdwLkaSwitchStatus(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuLkaSwitchState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuCurrentElectronicEyeSpeedLimitAndDistance(int speedLimit, int distance) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTboxUpgradePrepareRequest(String req) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public String getTboxUpgradePrepareResponse() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMcuWifiHotspotRequest() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float[] getScuURadarDataInfo() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuAlcCtrlRemindInfo() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacCoConcentrationStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendTboxEmergencyWifiBleMessage(String msg) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVpmRdpLeftWarningStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVpmRdpRightWarningStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getSrsPassengerCrashOccurSwSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSrsPassengerCrashOccurSw(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendMcuOpenWifiHotspotResponse(int response) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void requestIcmDashboardLightsStatus() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public String getIcmDashboardLightsStatus() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmLeftCard(int index) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmRightCard(int index) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMcuKeyStartStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmSaberLightSw(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getSpcSolarWorkSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getSpcGrossEnergyGeneration() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getSpcRecentEnergyGeneration() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuRemoteFlag() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getSpcSolarPower() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLluAndroidLlSt(int st) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmMaintainModeSw(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMcuTrunkPowerOnRequest() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmScSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmScEcuStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmScThermalProtectSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmScAntiPinchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmScIceBreakMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmScLinStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVcuSpecialDrivingMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuSpecialDrivingMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVcuPowerResponseMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuPowerResponseMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVcuMotorPowerMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuMotorPowerMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVcuXpedalModeSwitchStatus(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuXpedalModeSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmHeightLvlConfigValue(int config) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmHeightLvlConfigValue() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmSoftLvlConfigValue(int config) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmSoftLvlConfigValue() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmHandleAutoSwitch(int onOff) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmHandleAutoState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setEspOffRoadSwitch(int onOff) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmEasyLoadingState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmEasyLoadingSwitch(int onOff) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmMaintainModeSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmSuspenWelcomeSwitchState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmSuspenWelcomeSwitch(int onOff) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuExhibModeSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuRoadAttribType(int road) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuSpeedLimitDriverConfirmSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuSpeedLimitRange(int range) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuSpeedLimitSwitchState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuSpeedLimitSwitchState(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuIntelligentSpeedLimitValue(int value) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float[] getImuSystemStateFromCan() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float[] getImuNavigationDataFromCan() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float[] getImuSystemStateAndSpeedFromCan() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmSaberLightSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendMcuMapVersion(String version) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuSpeedLimitDriverConfirmStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuSpeedLimitRange() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuSpeedLimitControlSystemState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getBcmLRMirrorHeatSwitchStatus() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuCltcAvailableDrivingDistance() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendMcuTboxVBusControlCommand(int cmd) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendTboxMultiBleRenewalRequest(String req) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public String getTboxMultiBleRenewalResponse() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuMemoryParkingState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuObcFaultPhaseLossStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuSpeedLimitRemindVoice() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuDsmStatus(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuDsmStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendTboxFactoryPreCert(String cert) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public String getTboxFactoryPreCert() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendScuNaviLoadLinkType(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setXpuApRemoteSw(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuApRemoteSw() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setEspEpbSystemSwitch(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getEspInterventionStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVcuTrailerModeSwitchStatus(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuTrailerModeSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmdAllPositions(int seatHorizonPos, int seatVerticalPos, int seatTiltingPos, int legHeightPos, int legHorzPos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void saveMsmDAllPositionsToMcu(int seatHorizonPos, int seatVerticalPos, int seatTiltingPos, int legHeightPos, int legHorzPos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmDriverSeatTiltLevelOff(int cmd) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmDriverSeatCushTiltPos(int control, int direction) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmPassengerSeatCushExt(int control, int direction) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmSecrowLtSeatTiltReq(int control, int direction) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmSecrowLtSeatUnfoldReq(int cmd) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmSecrowLtSeatSTopMoveReq(int cmd) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmSecrowRtSeatTiltReq(int control, int direction) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmSecrowRtSeatSTopMoveReq(int cmd) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmSecrowRTSeatUnfoldReq(int cmd) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLluPowerRequestSwitchStatus(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getTpmsAllSensorStatus() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacDisinfSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacFrogingRiskStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVcuSpecialCarbinModeSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVcuSecondaryPowerOffRequest(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuSecondaryPowerOffResponce() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVcuCdcuChargeGunCommand(int command) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuCdcuChargeGunStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVcuDcPreWarmSwitchStatus(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuDcPreWarmSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVcuDcPreWarmRequestStatus(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuDcPreWarmRequestStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuDcPreWarmInStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmTemporaryStopLockActivateStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMcuLluPowerRequestSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getVcuDischargeQuantityFloat() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getVcuChargeSocQuantityFloat() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmFootKickSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmFrontMirrorHeatSwitchStatus(int onOff) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmFrontMirrorHeatSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmRearWiperServiceSwitchStatus(int onOff) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmRearWiperServiceSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmSteeringWheelHeatingStatus(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmSteeringWheelHeatingStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmLeftChildLockSwitchStatus(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmLeftChildLockSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmRightChildLockSwitchStatus(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmRightChildLockSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAmpPowerRequestSwitchStatus(int onOff) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAmpPowerRequestSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAtlPowerRequestSwitchStatus(int onOff) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getAtlLrPowerRequestSwitchStatus() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmLockHazardLightSwitchStatus(int onOff) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmLockHazardLightSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmLockHornSwitchStatus(int onOff) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmLockHornSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmLockAvasSwitchStatus(int onOff) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmLockAvasSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmDomeLightModeStatus(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmDomeLightModeStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmDomeLightBrightLevel(int level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmDomeLightBrightLevel() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmFrontLeftDomeLightSwitchStatus(int onOff) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmFrontLeftDomeLightSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmFrontRightDomeLightSwitchStatus(int onOff) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmFrontRightDomeLightSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmRearLeftDomeLightSwitchStatus(int onOff) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmRearLeftDomeLightSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmRearRightDomeLightSwitchStatus(int onOff) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmRearRightDomeLightSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmFootKickSwitchStatus(int onOff) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmPassengerSeatTitlLevelOff(int cmd) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmWashCarModeSwitchStatus(int onOff) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmHeadLampLevelingReqValue(int level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmHeadLampLevelingCtrlMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmHeadLampCtrlLevel() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmTrunkOpenRequestPosition(int position) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmTrunkSetPositionRequest(int position) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAtlSwitchStatus(int onOff) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAtlSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAtlLin2Data(byte[] data) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAtlLin3Data(byte[] data) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMsmSecrowLtSeatTiltPosition() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMsmSecrowRtSeatTiltPosition() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMsmPassengerSeatCushExtPosition() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMsmDriverSeatCushTiltPosition() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmTrailerHitchSwitchStatus(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmTrailerHitchSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getBcmLeftRightRearMirrorFoldOutputStatus() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmPassengerSeatBlowLevel(int level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmPassengerSeatBlowLevel() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacSfsTypeMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacSfsChannelResetRequest(int channel, int request) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmEngineeringModeStatus(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmEngineeringModeStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmTransportModeSwitchStatus(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmAsTrailerModeSwitchStatus(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmDriverSeatCushTiltPosition(int pos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmPassengerSeatCushExtPosition(int pos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setEspTsmSwitchStatus(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setXpuScpSwitchStatus(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuScpSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setXpuRaebSwitchStatus(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuRaebSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmHeadLampLevelingReqValue() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmColumnVerticalMove(int control, int direction) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmColumnHorizonalMove(int control, int direction) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmTrunkSetPositionResponcePosition() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmColumnVerticalPosition() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmColumnHorizonalPosition() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVcuNaviDestInfo(String info) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVcuNaviDestType(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVcuNaviRemainDistance(int distance) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVcuNaviPathId(int id) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVcuNaviType(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVcuNaviKValue(float k) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAvasLockUnlockSoundSwitchStatus(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAvasLockUnlockSoundSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAvasChargeSoundSwitchStatus(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAvasChargeSoundSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAvasSocSoundSwitchStatus(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAvasSocSoundSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAvasUnlockSoundEffect(int sound) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAvasUnlockSoundEffect() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAvasLockSoundEffect(int sound) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAvasLockSoundEffect() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAvasMcuAvasRunnningStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAvasUnlockSoundSpeedVolume() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAvasChargeSoundSpeedVolume() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAvasSocSoundSpeedVolume() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmColumnVerticalPosition(int pos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmColumnHorizonalPosition(int pos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getScuLeftRightBlindSpotDetectionSwitchStatus() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getScuLeftRightRearCollisionSwitchStatus() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVcuNaviRemainTime(int minutes) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getBcmWindowsInitSignalLostRequestStatus() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getScuLeftRightDoorOpenWarningSwitchStatus() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getScuLeftRightRearCrossTrafficAlertStatus() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuNaviRoadConnectAttrib(int attrib) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBmsChargeMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getDcdcInputVoltage() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getDcdcInputCurrent() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHavcCompressorConsumePower() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHavcHvhConsumePower() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmTrunkOpennerStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmBonnetStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuVirtualAccPedalStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMcuRvcEnable() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMcuRvcEnable(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMcuRvcVersion(int version) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAmpChannelSwitchControlStatus(byte[] sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAmpChannelVolumeControlValue(byte[] vol) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAmpGroupSwitchControlStatus(byte[] sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAmpGroupVolumeControlValue(byte[] vol) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBmsBatteryChargeStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBmsAcChargeStopReason() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuAsDriveModeStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getEspTsmSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmPassengerWelcomeSwitch(int onOff) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setXpuNaviTypeStatus(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmColumnPositionMove(int vertpos, int horpos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuRaebActiveStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendXpuTransferVpaCmd(String cmd) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendXpuTransferVpaAbInfo(String cmd) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getEspOffRoadSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmWindowLockState(int onOff) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuDepolarizeStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setXpuNraSwitchStatus(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuNraSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuNraControlStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmSecrowLtSeatTiltPosition(int pos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmSecrowRtSeatTiltPosition(int pos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmPassengerSeatLumbVerticalPos(int control, int direction) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmPassengerSeatLumbHorzPos(int control, int direction) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmSecRowLeftSeatCushExtReq(int control, int direction) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmSecRowRightSeatCushExtReq(int control, int direction) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmSecRowLeftSeatCushExtPosition(int legHorzPos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMsmSecRowLeftSeatCushExtPosition() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmSecRowRightSeatCushExtPosition(int legHorzPos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMsmSecRowRightSeatCushExtPosition() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmSecrowRightSeatUnlockReq(int cmd) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmSecrowLeftSeatUnlockReq(int cmd) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVcuBatBumpRecrdStatus(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuBatBumpRecrdRequest() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuBrakeLightOnOffStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setXpuCityNgpSwitchStatus(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuCityNgpSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmSwsControlSceneStatus(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getVcuWltpAvailableDrivingDistanceFloat() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getVcuCltcAvailableDrivingDistanceFloat() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendXpuGeoFencingConfig(String config) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendXpuCountryCodeInfo(String info) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVcuSsaSwitchStatus(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuSsaSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVcuPGearLimOffSwitchStatus(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuSuperChargeFlag() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmRearWiperMotorStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmCustomerModeFlagSwitchStatus(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmDriverSeatMassgProgMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMsmDriverSeatMassgProgMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmDriverSeatMassgIntensity(int level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMsmDriverSeatMassgIntensity() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmPassengerSeatMassgProgMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMsmPassengerSeatMassgProgMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmPassengerSeatMassgIntensity(int level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMsmPassengerSeatMassgIntensity() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmSecRowLeftSeatMassgProgMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMsmSecRowLeftSeatMassgProgMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmSecRowLeftSeatMassgIntensity(int level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMsmSecRowLeftSeatMassgIntensity() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmSecRowRightSeatMassgProgMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMsmSecRowRightSeatMassgProgMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmSecRowRightSeatMassgIntensity(int level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMsmSecRowRightSeatMassgIntensity() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAmpDolbyAtomsSwitchStatus(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAmpEffectStatus(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAmpEffectStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAmpDynSdvcLevel(int level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAmpDynSdvcLevel() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAmpDyn3DEffectLevel(int level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAmpDyn3DEffectLevel() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setXpuSlifSoundStatus(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuSlifSoundStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setXpuSlwfVoiceStatus(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuSlwfVoiceStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuNgpSwitchTransitionStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuNaviDangerAreaRDInfo(int dangerAreaLoc, int dangerLane, int dangerLaneNum, int dangerType, int dangerLevel, int dangerPro, int dangerAct) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void saveMsmPassengerAllPositionsToMcu(int seatHorizonPos, int seatVerticalPos, int seatTiltingPos, int legHeightPos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getXpuHeadPoseData() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuHmiDopRemind() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmDriverSeatMassgElem(int[] cmd) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmPassengerSeatMassgElem(int[] cmd) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmSecRowLeftSeatMassgElem(int[] cmd) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmSecRowRightSeatMassgElem(int[] cmd) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuDoorsLRadarDisplayLevel() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuDoorsRRadarDisplayLevel() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setXpuNgpULCSwMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuNgpULCSwMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setXpuNgpOptimalLaneSw(int lane) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuNgpOptimalLaneSw() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setXpuISLCDriverSet(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuISLCDriverSet() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmSecRowLeftSeatAllPos(int seatTiltingPos, int legHorzPos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmSecRowRightSeatAllPos(int seatTiltingPos, int legHorzPos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmWiperRainDetectSensitivity(int level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getMsmDriverSeatMassgElem() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getMsmPassengerSeatMassgElem() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getMsmSecRowLeftSeatMassgElem() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getMsmSecRowRightSeatMassgElem() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmAsAutoLevelingResult() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmTtmDenormalizeStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmTtmSystemErrorStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmAsCampingModeSwitchStatus(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmAsCampingModeSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmHoistModeSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmAsYellowLampRequest() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmAsRedLampRequest() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getEspTsmFaultStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getEspDtcFaultStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getEspIbtFailureLampRequest() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuNgpModeIndexMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuModeIndexDefine() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmColumnPositionSaveToMcu(int vertpos, int horpos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmTrailerModeSwitchStatus(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVcuXpedalCtrlMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuXpedalCtrlMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVcuXPortIntellCalcCfg(float[] cfg) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float[] getVcuXPortIntellCalcCfg() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float[] getVcuXPortIntellCalcCfg20Hz() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float[] getVcuXPortIntellCalcCfg50Hz() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuDoorsLRadarDistance() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuDoorsRRadarDistance() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmAsLockModeStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuKeyBatteryStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuIntelligentChargePortTipsType() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuIntelligentChargePortTtsBroadcastType() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuIntelligentChargePortSystemToneType() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuAutoParkingTipsType() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuAsLockScenario() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuIntelligentChargePortSystemStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuSlaSpeedWarningStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuScpChargePortCommandStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setScuEventInfoRD(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getVcuNedcAvalibleDrivingDistanceFloat() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public String getTboxPigeonNotification() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuXmartPigeonMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmAsDrivingMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmAsSpecialDrivingMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmAsWelcomeModeStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmAsEspPataRequestStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmAsTargetHeight() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTboxEcallMuteRequest() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTboxEcallState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setXpuElectricEyeSpeedLimit(int speedlimit) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setXpuElectricEyeSpeedDistance(int distance) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setXpuMetaCountryCode(int code) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuAsTargetMinimumHeightRequest() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuAsTargetMaximumHeightRequest() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendPigeonAndXPURemoteAPHeartBeat(String beat) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendPhoneRemoteAPEvent(String event) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public byte[] getPhoneRemoteAPInformation() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmTrailerModeStatus(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setXpuMetaSpeedUnits(int unit) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setXpuEffectiveSpeedLimitType(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getEpsTorqControlStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmAsHeightChangingStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMcuRemindWarningStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendIcmLogCompressRequest(String req) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public String getIcmLogCompressInformation() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmAsModeAllowedCampingStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmModeInfoArray(int name, int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMsmDriverSeatLumberSwitchMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMsmDriverSeatLumberSwitchCenterPressStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMsmPassengerSeatLumberSwitchMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMsmPassengerSeatLumberSwitchCenterPressStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendRoutingForTboxRequest(int cmd) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getRoutingForTboxResponse() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendTboxModemCaptureRequest(int cmd) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTboxModemCaptureResponse() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendStartCopyTboxLogRequest(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getStartCopyTboxLogResponse() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendFinishCopyTboxLogRequest() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getFinishCopyTboxLogResponse() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMsmPassengerWelcomeSwitch() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmFWiperMotorErr() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuHmiDopRemind() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmSdcBrakeCloseDoorCfg(int cfg) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmSdcBrakeCloseDoorCfg() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public byte[] getXpuLongLatPeriodData() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmCoverPlateStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmGroupLedControlStatus(int upStatus, int downStatus, int leftStatus, int rightStatus) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getBcmGroupLedControlStatus() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmGroupLedColor(int upColor, int downColor, int leftColor, int rightColor) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getBcmGroupLedColor() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmGroupLedFadeTime(int upTime, int downTime, int leftTime, int rightTime) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmGroupLedTemperature(int upTemp, int downTemp, int leftTemp, int rightTemp) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getBcmGroupLedTemperature() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmGroupLedBrigntness(int upLux, int downLux, int leftLux, int rightLux) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getBcmGroupLedBrigntness() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setXpuAdasTopSpeedLimitedValue(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAmpSdsscLevel(int level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAmpSdsscLevel() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAmpSoundSourceDolbyFormat(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAmpSoundStyle(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAmpSoundStyle() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAmpFreqGainGroupControlValue(int[] eqValue) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getAmpFreqGainGroupControlValue() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setXpuLssSensitivitySwitchStatus(int level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuLssSensitivitySwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getVcuBmsBatteryCurrent() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuBmsBatteryVoltage() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuBmsBatteryAverageTemperature() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuBmsChargeStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVcuXsportMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuXsportMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float[] getEspAllWheelSpeed() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getEspAbsWorkStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getEspTcsWorkStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getEspVdcWorkStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getEspIpuFrontActualRotateSpeed() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getEspIpuRearActualRotateSpeed() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getBcmXPortAsSystemAllStatus() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getBcmAsWheelPositionHeightAll() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float[] getBcmAsAcceleratedSpeed() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmAsLeopardModeSwitchStatus(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmAsLeopardModeSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmAsVehicleMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendXpuZgEventMessage(byte[] message) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendXpuZgPeriodMessage(byte[] message) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmTrunkActualPosition() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmSecRowSeatEasyEntrySwitchStatus(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmMirrorAutoFoldSwitchStatus(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmMirrorAutoFoldSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmAsAutoLevelingResultValue() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getAllSrsCrashOutputStatus() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmDriverSeatPositionMemoryRequest(int cmd) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMsmDriverSeatMassgErrorStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMsmPassengerSeatMassgErrorStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMsmSecRowLeftSeatMassgErrorStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMsmSecRowRightSeatMassgErrorStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getVcuBmsActualSocValue() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getVcuBmsMaximumAvailChargePower() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getVcuBmsMaximumAvailDischargePower() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getEspIpuFrontActualTorque() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getEspIpuFrontMotorActualTemperature() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getEspIpuRearActualTorque() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getEspIpuRearMotorActualTemperature() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getEspIbtBrakeTravelDistance() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getEspMasterCylinderPressure() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getVcuDynamicAvailableDrivingDistance() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTboxIOTBusinessType() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTboxACChargeUnlockST() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setEspCstStatus(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setEspBpfStatus(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAmpA2BLinkStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMcuSocRespDTCInfo(int module, int errCode, int errCodeSt) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmDriverAllPositionsToLDCU(int memoryReq, int seatHorizonPos, int seatVerticalPos, int seatTiltingPos, int legHeightPos, int legHorzPos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getScuMrrRadarEmissStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getScuAllSrrRadarEmissStatus() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getVcuBmsCurrentBatterySocDisp() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getVcuChargeDischargePower() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendMcuGeofenceStatus(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmSoundThemeType(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getVcuChargeHighVoltageLoadPower() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setRearHvacAirDistributionMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setRearHvacFanPosition(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getRearHvacFanPosition() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAmpSoundSourceDolbyFormat() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmXsleepModeStatus(int active) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmXmovieModeStatus(int active) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmX5dCinemaModeStatus(int active) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmXmeditationModeStatus(int active) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setXpuRadarEmissionSwitchStatus(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendXpuScpGeoInfo(String info) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLCMSAutoBrightSw(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLCMSAutoBrightSwSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLCMSBright(int level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLCMSBright() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLCMSHighSpeedViewSw(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLCMSHighSpeedViewSwSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLCMSLowSpeedViewSw(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLCMSLowSpeedViewSwSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLCMSDanObjectRecSw(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLCMSDanObjectRecSwSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLCMSReverseAssitSw(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLCMSReverseAssitSwSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLCMSTurnExtSw(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLCMSTurnExtSwSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLCMSViewRecovery(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLCMSViewRecoverySt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setArsWorkingMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getArsWorkingMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getArsWorkingState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getArsPosition() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getArsInitState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmUserScenarioInfo(int[] info) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setIcmUserScenarioExitDialog(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmDriverSeatLegHorzPosition(int pos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmPassengerSeatLegHorzPosition(int pos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMsmDriverSeatLegHorzPosition() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMsmPassengerSeatLegHorzPosition() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmSecRowLeftSeatLegHorzPosReq(int control, int direction) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmSecRowRightSeatLegHorzPosReq(int control, int direction) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmSecRowLeftSeatLegHorzPosition(int legHorzPos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMsmSecRowLeftSeatLegHorzPosition() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmSecRowRightSeatLegHorzPosition(int legHorzPos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMsmSecRowRightSeatLegHorzPosition() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmTargetAsHeightLvlConfigValue() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmActualAsHeightLvlConfigValue() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmTargetAsHeightLvlConfigValue(int config) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmAsDrivingMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmDriverWelcomeActive(int active) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmPassengerWelcomeActive(int active) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacAutoDefogWorkSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmTtmLampConnectStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmTtmLampFaultStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getEspEpbDriverOffWarningMsg() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmTtmHookMotorStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAvasSocSoundVolumeToMcu(int vol) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getRearHvacPowerState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacSecRowLeftTempInc() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacSecRowLeftTempDec() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacSecRowRightTempInc() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacSecRowRightTempDec() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacTempSecRowLeftValue(float level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getHvacTempSecRowLeftValue() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacTempSecRowRightValue(float level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getHvacTempSecRowRightValue() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacRearAutoModeEnabled(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacRearAutoModeState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacRearWindSpeedAutoControlStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacRearAirDistributionAutoControlStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacRearFanSpeedInc() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacRearFanSpeedDec() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacRearFanSpeedLevel(int level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacRearFanSpeedLevel() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacThirdRowTempInc() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacThirdRowTempDec() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacTempThirdRowtValue(float level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getHvacTempThirdRowValue() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setRearHvacPowerEnabled(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacThirdRowWindBlowMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacThirdRowWindBlowMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmFrontWiperActiveStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getBcmAllWindowsActionFeedbackStatus() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendLCMSLogCtrlReq(int req) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendRCMSLogCtrlReq(int req) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuDriverHeadFaceArea() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendTboxOtaWorkingStatus(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacNewFreshSwitchStatus(int onOff) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacNewFreshSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setCmsAllExteriorMirrorsPositions(int lMirrorHorizonPos, int lMirrorVerticalPos, int rMirrorHorizonPos, int rMirrorVerticalPos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setXpuLLCCDetourSw(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuLLCCDetourSw() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendCNGPCityMapCtrlReq(byte[] req) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public byte[] getCNGPCityMapCtrlResp() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuSuperChargeDiffIncreaseRange() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmDriverSeatLumbControlSwitchEnable(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmPassengerSeatLumbControlSwitchEnable(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuChargerLowVolSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVcuChargerLowVolDiag(int ack) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLRCMSAllExteriorMirrorsPositions(float lMirrorHorizonPos, float lMirrorVerticalPos, float rMirrorHorizonPos, float rMirrorVerticalPos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float[] getLRCMSAllExteriorMirrorsPositions() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLRCMSViewAngle(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLRCMSViewAngle() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLCMSBrightWithStoreflag(int[] data) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLRCMSStoreBrightSource() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setArsFoldOrUnfold(int type) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getLCMSBrightWithSource() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public byte[] getXpuVehLocationProto() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacRearWindLessSwitch(int onOff) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacRearWindLessSwitch() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAvm3603dAngle() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getAvmTransBodySwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendMcuOtaUpdateFile(String filePath) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAvm3603dAngle(int angle) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAvmTransBodySwitchStatus(int status) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getVcuAvalibleDrivingDistanceFloat() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getVcuLastTwoPointFiveKmAverageVehConsume() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getVcuLastTwentyKmAverageVehConsume() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getVcuLastHundredKmAverageVehConsume() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setXpuLccLStraightSw(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuLccLStraightSw() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setXpuNaviRemainingDistance(int distance) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public byte[] getXpuNaviConfirmProto() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setHvacMachineStateSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getHvacMachineStateSwitch() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendTboxWakeOrderRTC(String order) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVcuAutoEasyLoadingSwitchStatus(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuAutoEasyLoadingSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLeftSlideDoorMoode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLeftSlideDoorStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLeftSlideDoorCtrl(int Ctrl) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLeftSlideDoorLockSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getRightSlideDoorMoode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getRightSlideDoorStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setRightSlideDoorCtrl(int Ctrl) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getRightSlideDoorLockSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getRearLogLight() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setRearLogLight(int onOff) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendTboxApnTrafficInfo(long apn0_traffic, long apn0_block, long apn1_traffic, long apn1_block) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public String getTboxNetmConfInfo() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLaneSupportSystemStateAndWarning(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getLaneSupportSystemStateAndWarning() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmTrunkWorkModeStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmLowBeamOffConfirmSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmLowBeamOffConfirmSt(int st) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setArsInitState(int st) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getArsFaultState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmFRCwcSwitchState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmFRCwcSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getFRCwcChargeSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getFRCwcChargeErrorSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setCFPowerSwitch(int onOff) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCFPowerState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setCarFridgeDoorCtrl(int onOff) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCarFridgeDoorState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setCFTempInc() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setFCTempDec() throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setCFTempValue(int value) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCFTempValue() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setCFWorkMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCFWorkMode() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setCFChildLock(int onOff) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCFChildLockState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setCFKeepTempSwitch(int onOff) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCFKeepTempState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setCFKeepTempTime(int value) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCFKeepTempTime() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCFKeepTempRemainTime() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setCFKeepTempTimeMemoryRequest(int onOff) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCFKeepTempWorkState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendSRHeartBeatInfoRequest(String beat) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public String getSRHeartBeatInfo() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendSRLagLogHeartBeatFeedBackRequest(String info) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVCUAWDModeSw(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVCUAWDModeSw() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setCarpetLightWelcomeSw(int onOff) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getCarpetLightWelcomeState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setPollingWelcomeSW(int onOff) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getPollingWelcomeState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void SetFcwAebSensitivitySwitchStatus(int level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getFcwAebSensitivitySwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSfmCtrl(int ctrl) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getSfmCtrlState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSfmAnglePos(int angel) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getSfmAnglePos() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setAtlLin1Data(byte[] data) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSecRowLeftBlowLevel(int level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getSecRowLeftBlowLevel() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSecRowRightBlowLevel(int level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getSecRowRightBlowLevel() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSecRowLeftSeatPos(int memoryReq, int seatHorizonPos, int seatAngle, int seatTiltingPos, int legHeightPos, int legHorzPos, int HeadHeightPos, int HeadHorzPos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getSecRowLeftSeatPos() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSecRowRightSeatPos(int memoryReq, int seatHorizonPos, int seatAngle, int seatTiltingPos, int legHeightPos, int legHorzPos, int HeadHeightPos, int HeadHorzPos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getSecRowRightSeatPos() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTrdRowSeatAllPos(int ltSeatTiltingPos, int ltHeadHeightPos, int rtSeatTiltingPos, int rtHeadHeightPos, int midHeadHeightPos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int[] getTrdRowSeatAllPos() throws RemoteException {
            return null;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSecRowLeftHorizMove(int control, int direction) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSecRowLeftAngleMove(int control, int direction) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSecRowLeftLegVertiMove(int control, int direction) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSecRowLeftHeadVertiMove(int control, int direction) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSecRowLeftHeadHorizMove(int control, int direction) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSecRowRightHorizMove(int control, int direction) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSecRowRighttAngleMove(int control, int direction) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSecRowRightLegVertiMove(int control, int direction) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSecRowRightHeadVertiMove(int control, int direction) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSecRowRightHeadHorizMove(int control, int direction) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTrdRowLeftSeatTiltMove(int control, int direction) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTrdRowLeftHeadVertiMove(int control, int direction) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTrdRowRightSeatTiltMove(int control, int direction) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTrdRowRightHeadVertiMove(int control, int direction) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTrdRowMiddleSeatTiltMove(int control, int direction) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSecRowLeftSeatLumbVertiMove(int control, int direction) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSecRowLeftSeatLumbHorzMove(int control, int direction) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSecRowRightSeatLumbVertiMove(int control, int direction) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSecRowRightSeatLumbHorzMove(int control, int direction) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSecRowLeftSeatZeroGravReq(int ctrl) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSecRowRightSeatZeroGravReq(int ctrl) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSecRowLeftSeatEasyEntryReq(int ctrl) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSecRowRightSeatEasyEntryReq(int ctrl) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getSecRowLeftSeatFuncSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getSecRowRightSeatFuncSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmtLeftSeatFoldReq(int ctrl) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMsmtLeftSeatFoldFunSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmtRightSeatFoldReq(int ctrl) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMsmtRightSeatFoldFunSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setMsmtSeatStowReq(int ctrl) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getMsmtSeatStowFunSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void stopSecRowLeftSeatMoving(int cmd) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void stopSecRowRightSeatMoving(int cmd) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVcuAcChargCurrentMaxLimitedValue(int value) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVcuAcChargCurrentMaxLimitedValue() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSecRowLtSeatHorzPos(int pos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getSecRowLtSeatHorzPos() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSecRowLtSeatAnglePos(int pos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getSecRowLtSeatAnglePos() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSecRowLtSeatLegVerticalPos(int pos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getSecRowLtSeatLegVerticalPos() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSecRowLtSeatHeadVerticalPos(int pos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getSecRowLtSeatHeadVerticalPos() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSecRowLtSeatHeadHorzPos(int pos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getSecRowLtSeatHeadHorzPos() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSecRowRtSeatHorzPos(int pos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getSecRowRtSeatHorzPos() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSecRowRtSeatAnglePos(int pos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getSecRowRtSeatAnglePos() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSecRowRtSeatLegVerticalPos(int pos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getSecRowRtSeatLegVerticalPos() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSecRowRtSeatHeadVerticalPos(int pos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getSecRowRtSeatHeadVerticalPos() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setSecRowRtSeatHeadHorzPos(int pos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getSecRowRtSeatHeadHorzPos() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTrdRowLtSeatTiltPos(int pos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTrdRowLtSeatTiltPos() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTrdRowLtSeatHeadVerticalPos(int pos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTrdRowLtSeatHeadVerticalPos() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTrdRowRtSeatTiltPos(int pos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTrdRowRtSeatTiltPos() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTrdRowRtSeatHeadVerticalPos(int pos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTrdRowRtSeatHeadVerticalPos() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTrdRowMidSeatHeadVerticalPos(int pos) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTrdRowMidSeatHeadVerticalPos() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVMCRwsSwitch(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVMCRwsSwitchState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setVMCZWalkModeSwitch(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVMCZWalkModeState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getVMCSystemState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setLeftSlideDoorMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setRightSlideDoorMode(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTrdRowMidHeadVertiMove(int control, int direction) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTrdRowLeftSeatTiltState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTrdRowRightSeatTiltState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTrdRowSeatStowState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getV2LDischargeErrorReason() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setImsModeReq(int mode) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getImsModeState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setImsAutoVisionSw(int onOff) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getImsAutoVisionSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setImsBrightLevel(int level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getImsBrightLevel() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setImsVisionCtrl(int control, int direction) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getImsVisionVerticalLevel() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getImsVisionAngleLevl() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getImsSystemSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmRLCwcSwitchState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmRLCwcSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getRLCwcChargeSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getRLCwcChargeErrorSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmRRCwcSwitchState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setBcmRRCwcSwitch(int enable) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getRRCwcChargeSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getRRCwcChargeErrorSt() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public float getBattOutWaterTempature() throws RemoteException {
            return 0.0f;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getChargeHighVoltageLockState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getDischargeHighVoltageLockState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getInsulativeResistanceValue() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTrdLeftDomeLightSwitchStatus(int onOff) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTrdLeftDomeLightSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setTrdRightDomeLightSwitchStatus(int onOff) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTrdRightDomeLightSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setXpuNgpCustomSpeedSwitchStatus(int sw) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuNgpCustomSpeedSwitchStatus() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setXpuNgpCustomSpeedCountLever(int lever) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuNgpCustomSpeedCountLever() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setXpuNgpCustomSpeedCountPercent(int percent) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getXpuNgpCustomSpeedCountPercent() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getBcmPowerOffSource() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void sendIcmRandisDisplayType(String info) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public void setWiperRainDetectSensitivityAndInactive(int level) throws RemoteException {
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getSecRowLtSeatState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getSecRowRtSeatState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTrdRowLtSeatHeadMoveState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTrdRowMidSeatHeadMoveState() throws RemoteException {
            return 0;
        }

        @Override // android.car.hardware.XpVehicle.IXpVehicle
        public int getTrdRowRtSeatHeadMoveState() throws RemoteException {
            return 0;
        }

        @Override // android.os.IInterface
        public IBinder asBinder() {
            return null;
        }
    }

    /* loaded from: classes.dex */
    public static abstract class Stub extends Binder implements IXpVehicle {
        private static final String DESCRIPTOR = "android.car.hardware.XpVehicle.IXpVehicle";
        static final int TRANSACTION_SetFcwAebSensitivitySwitchStatus = 2038;
        static final int TRANSACTION_activateAndroidLluControl = 1063;
        static final int TRANSACTION_beginTboxOTA = 352;
        static final int TRANSACTION_calibrateTpmsTirePressure = 182;
        static final int TRANSACTION_deactivateAndroidLluControl = 1285;
        static final int TRANSACTION_getAccStatus = 681;
        static final int TRANSACTION_getAllSrsCrashOutputStatus = 1827;
        static final int TRANSACTION_getAlsInitializationStudyAndErrorState = 1016;
        static final int TRANSACTION_getAlsInitializationStudyState = 1014;
        static final int TRANSACTION_getAmpA2BLinkStatus = 1849;
        static final int TRANSACTION_getAmpDyn3DEffectLevel = 1664;
        static final int TRANSACTION_getAmpDynSdvcLevel = 1662;
        static final int TRANSACTION_getAmpEffectStatus = 1660;
        static final int TRANSACTION_getAmpFreqGainGroupControlValue = 1799;
        static final int TRANSACTION_getAmpMusicScene = 553;
        static final int TRANSACTION_getAmpMusicStyle = 551;
        static final int TRANSACTION_getAmpPowerRequestSwitchStatus = 1489;
        static final int TRANSACTION_getAmpSdsscLevel = 1794;
        static final int TRANSACTION_getAmpSoundFieldMode = 557;
        static final int TRANSACTION_getAmpSoundSourceDolbyFormat = 1862;
        static final int TRANSACTION_getAmpSoundStyle = 1797;
        static final int TRANSACTION_getAmpSoundTrackMode = 565;
        static final int TRANSACTION_getAmpVolume = 563;
        static final int TRANSACTION_getApmAllChannelSoundSource = 686;
        static final int TRANSACTION_getApmAllChannelVolume = 685;
        static final int TRANSACTION_getApmAudioEffect = 559;
        static final int TRANSACTION_getArsFaultState = 2005;
        static final int TRANSACTION_getArsInitState = 1889;
        static final int TRANSACTION_getArsPosition = 1888;
        static final int TRANSACTION_getArsWorkingMode = 1886;
        static final int TRANSACTION_getArsWorkingState = 1887;
        static final int TRANSACTION_getAtlDowOpen = 403;
        static final int TRANSACTION_getAtlLrPowerRequestSwitchStatus = 1491;
        static final int TRANSACTION_getAtlOpen = 368;
        static final int TRANSACTION_getAtlReady = 369;
        static final int TRANSACTION_getAtlSwitchStatus = 1521;
        static final int TRANSACTION_getAudioDspStatus = 340;
        static final int TRANSACTION_getAudioMode = 338;
        static final int TRANSACTION_getAutoBrightness = 377;
        static final int TRANSACTION_getAutoParkErrorCode = 189;
        static final int TRANSACTION_getAutoParkSwitch = 593;
        static final int TRANSACTION_getAutoWindowLockSw = 728;
        static final int TRANSACTION_getAvasAcChargingSoundState = 424;
        static final int TRANSACTION_getAvasChargeSoundSpeedVolume = 1571;
        static final int TRANSACTION_getAvasChargeSoundSwitchStatus = 1562;
        static final int TRANSACTION_getAvasDcChargingSoundState = 426;
        static final int TRANSACTION_getAvasDisconnectChargingSoundState = 428;
        static final int TRANSACTION_getAvasExternalVolume = 437;
        static final int TRANSACTION_getAvasFaultStatus = 1093;
        static final int TRANSACTION_getAvasFriendlySayHiSound = 435;
        static final int TRANSACTION_getAvasFullChargeWaitForWakeUpSoundState = 420;
        static final int TRANSACTION_getAvasLockSoundEffect = 1568;
        static final int TRANSACTION_getAvasLockUnlockSoundSwitchStatus = 1560;
        static final int TRANSACTION_getAvasLowSpeedSoundEffect = 432;
        static final int TRANSACTION_getAvasLowSpeedSoundSwitch = 430;
        static final int TRANSACTION_getAvasLowSpeedVolume = 439;
        static final int TRANSACTION_getAvasMcuAvasRunnningStatus = 1569;
        static final int TRANSACTION_getAvasPhotoSoundSwitch = 888;
        static final int TRANSACTION_getAvasSleepSoundState = 422;
        static final int TRANSACTION_getAvasSocSoundSpeedVolume = 1572;
        static final int TRANSACTION_getAvasSocSoundSwitchStatus = 1564;
        static final int TRANSACTION_getAvasUnlockSoundEffect = 1566;
        static final int TRANSACTION_getAvasUnlockSoundSpeedVolume = 1570;
        static final int TRANSACTION_getAvasWaitForWakeUpSoundState = 418;
        static final int TRANSACTION_getAvm3603dAngle = 1968;
        static final int TRANSACTION_getAvmCalibrationMode = 543;
        static final int TRANSACTION_getAvmCameraAngle = 222;
        static final int TRANSACTION_getAvmCameraDisplayMode = 226;
        static final int TRANSACTION_getAvmCameraInitState = 234;
        static final int TRANSACTION_getAvmCamerasFaultStates = 1037;
        static final int TRANSACTION_getAvmFineTuneMode = 549;
        static final int TRANSACTION_getAvmOverlayWorkSt = 545;
        static final int TRANSACTION_getAvmRoofCameraHeightStatus = 224;
        static final int TRANSACTION_getAvmRoofCameraPosition = 233;
        static final int TRANSACTION_getAvmRoofCameraState = 232;
        static final int TRANSACTION_getAvmTransBodySwitchStatus = 1969;
        static final int TRANSACTION_getAvmTransparentChassisState = 547;
        static final int TRANSACTION_getAvmWorkState = 1026;
        static final int TRANSACTION_getBattOutWaterTempature = 2150;
        static final int TRANSACTION_getBatteryKeepTempMode = 1116;
        static final int TRANSACTION_getBcmActualAsHeightLvlConfigValue = 1903;
        static final int TRANSACTION_getBcmAllWindowsActionFeedbackStatus = 1939;
        static final int TRANSACTION_getBcmAllWindowsPos = 54;
        static final int TRANSACTION_getBcmAsAcceleratedSpeed = 1816;
        static final int TRANSACTION_getBcmAsAutoLevelingResult = 1701;
        static final int TRANSACTION_getBcmAsAutoLevelingResultValue = 1826;
        static final int TRANSACTION_getBcmAsCampingModeSwitchStatus = 1705;
        static final int TRANSACTION_getBcmAsDrivingMode = 1905;
        static final int TRANSACTION_getBcmAsEspPataRequestStatus = 1741;
        static final int TRANSACTION_getBcmAsHeightChangingStatus = 1757;
        static final int TRANSACTION_getBcmAsLeopardModeSwitchStatus = 1818;
        static final int TRANSACTION_getBcmAsLockModeStatus = 1724;
        static final int TRANSACTION_getBcmAsModeAllowedCampingStatus = 1761;
        static final int TRANSACTION_getBcmAsRedLampRequest = 1708;
        static final int TRANSACTION_getBcmAsTargetHeight = 1742;
        static final int TRANSACTION_getBcmAsWelcomeModeStatus = 1740;
        static final int TRANSACTION_getBcmAsWheelPositionHeightAll = 1815;
        static final int TRANSACTION_getBcmAsYellowLampRequest = 1707;
        static final int TRANSACTION_getBcmAtwsState = 51;
        static final int TRANSACTION_getBcmAutoLightState = 1085;
        static final int TRANSACTION_getBcmBackDefrostMode = 90;
        static final int TRANSACTION_getBcmBackMirrorHeatMode = 93;
        static final int TRANSACTION_getBcmBonnetStatus = 1588;
        static final int TRANSACTION_getBcmBreakPedalStatus = 1159;
        static final int TRANSACTION_getBcmChairWelcomeMode = 77;
        static final int TRANSACTION_getBcmChargeGunLockSt = 828;
        static final int TRANSACTION_getBcmChargePortStatus = 668;
        static final int TRANSACTION_getBcmChildLockCfg = 479;
        static final int TRANSACTION_getBcmColumnHorizonalPosition = 1552;
        static final int TRANSACTION_getBcmColumnVerticalPosition = 1551;
        static final int TRANSACTION_getBcmCoverPlateStatus = 1782;
        static final int TRANSACTION_getBcmCwcSwitchState = 1210;
        static final int TRANSACTION_getBcmDayLightMode = 496;
        static final int TRANSACTION_getBcmDaytimeRunningLightsOutputStatus = 1184;
        static final int TRANSACTION_getBcmDomeLightBrightLevel = 1501;
        static final int TRANSACTION_getBcmDomeLightCfg = 500;
        static final int TRANSACTION_getBcmDomeLightModeStatus = 1499;
        static final int TRANSACTION_getBcmDoorLockState = 66;
        static final int TRANSACTION_getBcmDoorUnlockRequestSource = 1042;
        static final int TRANSACTION_getBcmDoorsState = 87;
        static final int TRANSACTION_getBcmDriverBeltWarning = 825;
        static final int TRANSACTION_getBcmEasyLoadingState = 1405;
        static final int TRANSACTION_getBcmEngineeringModeStatus = 1537;
        static final int TRANSACTION_getBcmEnvironmentMode = 1185;
        static final int TRANSACTION_getBcmFRCwcSwitchState = 2006;
        static final int TRANSACTION_getBcmFWiperMotorErr = 1776;
        static final int TRANSACTION_getBcmFarLampState = 42;
        static final int TRANSACTION_getBcmFollowMeHomeCfg = 1204;
        static final int TRANSACTION_getBcmFollowMeTime = 494;
        static final int TRANSACTION_getBcmFootKickSwitchStatus = 1477;
        static final int TRANSACTION_getBcmFrontLampMode = 41;
        static final int TRANSACTION_getBcmFrontLeftDomeLightSwitchStatus = 1503;
        static final int TRANSACTION_getBcmFrontLeftWinPos = 102;
        static final int TRANSACTION_getBcmFrontMirrorHeatSwitchStatus = 1479;
        static final int TRANSACTION_getBcmFrontRightDomeLightSwitchStatus = 1505;
        static final int TRANSACTION_getBcmFrontRightWinPos = 103;
        static final int TRANSACTION_getBcmFrontWiperActiveStatus = 1938;
        static final int TRANSACTION_getBcmGroupLedBrigntness = 1791;
        static final int TRANSACTION_getBcmGroupLedColor = 1786;
        static final int TRANSACTION_getBcmGroupLedControlStatus = 1784;
        static final int TRANSACTION_getBcmGroupLedTemperature = 1789;
        static final int TRANSACTION_getBcmHandleAutoState = 1403;
        static final int TRANSACTION_getBcmHeadLampCtrlLevel = 1516;
        static final int TRANSACTION_getBcmHeadLampLevelingCtrlMode = 1515;
        static final int TRANSACTION_getBcmHeadLampLevelingReqValue = 1547;
        static final int TRANSACTION_getBcmHeightLvlConfigValue = 1399;
        static final int TRANSACTION_getBcmHoistModeSwitchStatus = 1706;
        static final int TRANSACTION_getBcmIgStatus = 100;
        static final int TRANSACTION_getBcmKeyAuthState = 1058;
        static final int TRANSACTION_getBcmLRMirrorHeatSwitchStatus = 1425;
        static final int TRANSACTION_getBcmLeftAndRightTurnLampStatus = 1027;
        static final int TRANSACTION_getBcmLeftChargePortLockState = 1012;
        static final int TRANSACTION_getBcmLeftChildLockSwitchStatus = 1485;
        static final int TRANSACTION_getBcmLeftMirrorHorizPos = 483;
        static final int TRANSACTION_getBcmLeftMirrorVerticalPos = 487;
        static final int TRANSACTION_getBcmLeftRightRearMirrorFoldOutputStatus = 1531;
        static final int TRANSACTION_getBcmLeftSdcDenormalizeState = 1146;
        static final int TRANSACTION_getBcmLeftSdcDoorPosition = 1251;
        static final int TRANSACTION_getBcmLeftSdcHazzardRequest = 1142;
        static final int TRANSACTION_getBcmLeftSdcMoveCommand = 1212;
        static final int TRANSACTION_getBcmLeftSdcPsdMotorState = 1050;
        static final int TRANSACTION_getBcmLeftSdcSystemErrorState = 1144;
        static final int TRANSACTION_getBcmLeftSdcSystemRunningState = 1246;
        static final int TRANSACTION_getBcmLeftSdcWindowsAutoDownSwitchState = 1149;
        static final int TRANSACTION_getBcmLeftTurnLampStatus = 653;
        static final int TRANSACTION_getBcmLightMeHomeMode = 58;
        static final int TRANSACTION_getBcmLockAvasSwitchStatus = 1497;
        static final int TRANSACTION_getBcmLockHazardLightSwitchStatus = 1493;
        static final int TRANSACTION_getBcmLockHornSwitchStatus = 1495;
        static final int TRANSACTION_getBcmLowBeamOffConfirmSt = 2002;
        static final int TRANSACTION_getBcmMaintainModeSwitchStatus = 1407;
        static final int TRANSACTION_getBcmManualFrontLeftWinStatus = 629;
        static final int TRANSACTION_getBcmManualFrontRightWinStatus = 630;
        static final int TRANSACTION_getBcmManualRearLeftWinStatus = 631;
        static final int TRANSACTION_getBcmManualRearRightWinStatus = 632;
        static final int TRANSACTION_getBcmMirrorAutoFoldSwitchStatus = 1825;
        static final int TRANSACTION_getBcmNearLampState = 43;
        static final int TRANSACTION_getBcmNfcCardAuthStatus = 1180;
        static final int TRANSACTION_getBcmNfcCardIdInfo = 1084;
        static final int TRANSACTION_getBcmNfcCardSwitchState = 474;
        static final int TRANSACTION_getBcmParkLightRelatedFMBLightConfigState = 1035;
        static final int TRANSACTION_getBcmParkingLampsStates = 1041;
        static final int TRANSACTION_getBcmPassengerSeatBeltSbrWarningStatus = 1099;
        static final int TRANSACTION_getBcmPassengerSeatBlowLevel = 1533;
        static final int TRANSACTION_getBcmPollingOpenCfg = 823;
        static final int TRANSACTION_getBcmPowerMode = 717;
        static final int TRANSACTION_getBcmPowerOffSource = 2164;
        static final int TRANSACTION_getBcmPsnSeatHeatLevel = 721;
        static final int TRANSACTION_getBcmRLCwcSwitchState = 2142;
        static final int TRANSACTION_getBcmRRCwcSwitchState = 2146;
        static final int TRANSACTION_getBcmReadyEnableState = 1154;
        static final int TRANSACTION_getBcmRearLeftDomeLightSwitchStatus = 1507;
        static final int TRANSACTION_getBcmRearLeftHeaterErrorState = 1125;
        static final int TRANSACTION_getBcmRearLeftSeatHeatState = 1122;
        static final int TRANSACTION_getBcmRearLeftWinPos = 104;
        static final int TRANSACTION_getBcmRearRightDomeLightSwitchStatus = 1509;
        static final int TRANSACTION_getBcmRearRightHeaterErrorState = 1126;
        static final int TRANSACTION_getBcmRearRightSeatHeatState = 1124;
        static final int TRANSACTION_getBcmRearRightWinPos = 105;
        static final int TRANSACTION_getBcmRearViewAutoDownCfg = 826;
        static final int TRANSACTION_getBcmRearViewMirrorsAdjustStates = 1261;
        static final int TRANSACTION_getBcmRearWiperMotorStatus = 1639;
        static final int TRANSACTION_getBcmRearWiperServiceSwitchStatus = 1481;
        static final int TRANSACTION_getBcmReverseMirrorCfgCmd = 491;
        static final int TRANSACTION_getBcmRightChargePortLockState = 1013;
        static final int TRANSACTION_getBcmRightChildLockSwitchStatus = 1487;
        static final int TRANSACTION_getBcmRightMirrorHorizPos = 485;
        static final int TRANSACTION_getBcmRightMirrorVerticalPos = 489;
        static final int TRANSACTION_getBcmRightSdcDenormalizeState = 1147;
        static final int TRANSACTION_getBcmRightSdcDoorPosition = 1252;
        static final int TRANSACTION_getBcmRightSdcHazzardRequest = 1143;
        static final int TRANSACTION_getBcmRightSdcMoveCommand = 1213;
        static final int TRANSACTION_getBcmRightSdcPsdMotorState = 1051;
        static final int TRANSACTION_getBcmRightSdcSystemErrorState = 1145;
        static final int TRANSACTION_getBcmRightSdcSystemRunningState = 1247;
        static final int TRANSACTION_getBcmRightSdcWindowsAutoDownSwitchState = 1151;
        static final int TRANSACTION_getBcmRightTurnLampStatus = 654;
        static final int TRANSACTION_getBcmSaberLightSwitchStatus = 1420;
        static final int TRANSACTION_getBcmScAntiPinchStatus = 1387;
        static final int TRANSACTION_getBcmScEcuStatus = 1385;
        static final int TRANSACTION_getBcmScIceBreakMode = 1388;
        static final int TRANSACTION_getBcmScLinStatus = 1389;
        static final int TRANSACTION_getBcmScSwitchStatus = 1384;
        static final int TRANSACTION_getBcmScThermalProtectSt = 1386;
        static final int TRANSACTION_getBcmSdcBrakeCloseDoorCfg = 1780;
        static final int TRANSACTION_getBcmSdcKeyCloseCtrlCfg = 1139;
        static final int TRANSACTION_getBcmSdcKeyOpenCtrlCfg = 1137;
        static final int TRANSACTION_getBcmSdcMaxAutoDoorOpeningAngle = 1141;
        static final int TRANSACTION_getBcmSeatBlowLevel = 99;
        static final int TRANSACTION_getBcmSeatHeatErrStatus = 1100;
        static final int TRANSACTION_getBcmSeatHeatLevel = 96;
        static final int TRANSACTION_getBcmShadeControllerInitializationSt = 1241;
        static final int TRANSACTION_getBcmShadeControllerMotorStatus = 1286;
        static final int TRANSACTION_getBcmShadeControllerPosition = 1239;
        static final int TRANSACTION_getBcmSoftLvlConfigValue = 1401;
        static final int TRANSACTION_getBcmSteeringWheelHeatingStatus = 1483;
        static final int TRANSACTION_getBcmSuspenWelcomeSwitchState = 1408;
        static final int TRANSACTION_getBcmTargetAsHeightLvlConfigValue = 1902;
        static final int TRANSACTION_getBcmTemporaryStopLockActivateStatus = 1473;
        static final int TRANSACTION_getBcmTrailerHitchSwitchStatus = 1530;
        static final int TRANSACTION_getBcmTrunkActualPosition = 1822;
        static final int TRANSACTION_getBcmTrunkDoorHeight = 1187;
        static final int TRANSACTION_getBcmTrunkOpennerStatus = 1587;
        static final int TRANSACTION_getBcmTrunkSetPositionResponcePosition = 1550;
        static final int TRANSACTION_getBcmTrunkStatus = 68;
        static final int TRANSACTION_getBcmTrunkWorkModeStatus = 2001;
        static final int TRANSACTION_getBcmTtmDenormalizeStatus = 1702;
        static final int TRANSACTION_getBcmTtmHookMotorStatus = 1912;
        static final int TRANSACTION_getBcmTtmLampConnectStatus = 1909;
        static final int TRANSACTION_getBcmTtmLampFaultStatus = 1910;
        static final int TRANSACTION_getBcmTtmSystemErrorStatus = 1703;
        static final int TRANSACTION_getBcmUnlockResponseMode = 84;
        static final int TRANSACTION_getBcmWindowLockState = 1025;
        static final int TRANSACTION_getBcmWindowMovePosition = 471;
        static final int TRANSACTION_getBcmWindowsInitSignalLostRequestStatus = 1578;
        static final int TRANSACTION_getBcmWiperInterval = 688;
        static final int TRANSACTION_getBcmWiperRainDetectSensitivity = 1024;
        static final int TRANSACTION_getBcmWiperServiceMode = 628;
        static final int TRANSACTION_getBcmWiperSpeedSwitchState = 1078;
        static final int TRANSACTION_getBcmWiperSpeedSwitchesStatus = 1242;
        static final int TRANSACTION_getBcmXPortAsSystemAllStatus = 1814;
        static final int TRANSACTION_getBlindAreaDetectionWarning = 219;
        static final int TRANSACTION_getBlindAreaLeftWarning = 671;
        static final int TRANSACTION_getBlindAreaRightWarning = 672;
        static final int TRANSACTION_getBmsAcChargeStopReason = 1598;
        static final int TRANSACTION_getBmsAcMaxCurrent = 835;
        static final int TRANSACTION_getBmsBatteryCapacity = 235;
        static final int TRANSACTION_getBmsBatteryChargeStatus = 1597;
        static final int TRANSACTION_getBmsBatteryChipSwVersion = 238;
        static final int TRANSACTION_getBmsBatteryCurrent = 248;
        static final int TRANSACTION_getBmsBatteryTotalVolt = 839;
        static final int TRANSACTION_getBmsBatteryType = 236;
        static final int TRANSACTION_getBmsCellTempMaxNum = 1095;
        static final int TRANSACTION_getBmsCellTempMinNum = 1096;
        static final int TRANSACTION_getBmsChargeCompleteTime = 344;
        static final int TRANSACTION_getBmsChargeMode = 1582;
        static final int TRANSACTION_getBmsColdestCellNum = 243;
        static final int TRANSACTION_getBmsDcChargeStopReason = 838;
        static final int TRANSACTION_getBmsDcCurrent = 840;
        static final int TRANSACTION_getBmsDcVolt = 841;
        static final int TRANSACTION_getBmsDtcChargeCurrentOver = 837;
        static final int TRANSACTION_getBmsDtcErrorStopCurrent = 836;
        static final int TRANSACTION_getBmsFailureLvl = 239;
        static final int TRANSACTION_getBmsHottestCellNum = 242;
        static final int TRANSACTION_getBmsInsulationResistance = 247;
        static final int TRANSACTION_getBmsIsErrorStatus = 1113;
        static final int TRANSACTION_getBmsMaxTemp = 244;
        static final int TRANSACTION_getBmsScoIsLowStatus = 1112;
        static final int TRANSACTION_getBmsVoltMax = 245;
        static final int TRANSACTION_getBmsVoltMaxNum = 240;
        static final int TRANSACTION_getBmsVoltMin = 246;
        static final int TRANSACTION_getBmsVoltMinNum = 241;
        static final int TRANSACTION_getBrightnessLevel = 379;
        static final int TRANSACTION_getCFChildLockState = 2021;
        static final int TRANSACTION_getCFKeepTempRemainTime = 2026;
        static final int TRANSACTION_getCFKeepTempState = 2023;
        static final int TRANSACTION_getCFKeepTempTime = 2025;
        static final int TRANSACTION_getCFKeepTempWorkState = 2028;
        static final int TRANSACTION_getCFPowerState = 2011;
        static final int TRANSACTION_getCFTempValue = 2017;
        static final int TRANSACTION_getCFWorkMode = 2019;
        static final int TRANSACTION_getCNGPCityMapCtrlResp = 1950;
        static final int TRANSACTION_getCarFridgeDoorState = 2013;
        static final int TRANSACTION_getCarPositionInfo = 601;
        static final int TRANSACTION_getCarpetLightWelcomeState = 2035;
        static final int TRANSACTION_getCcsFaultInfo = 237;
        static final int TRANSACTION_getCdcFunctionMode = 610;
        static final int TRANSACTION_getChairDirection = 73;
        static final int TRANSACTION_getChairLocationValue = 74;
        static final int TRANSACTION_getChargeAppointTime = 682;
        static final int TRANSACTION_getChargeHighVoltageLockState = 2151;
        static final int TRANSACTION_getCiuAutoLockSt = 763;
        static final int TRANSACTION_getCiuCarWash = 807;
        static final int TRANSACTION_getCiuConfigurationActive = 961;
        static final int TRANSACTION_getCiuDelayOff = 963;
        static final int TRANSACTION_getCiuDeleteFaceIdResult = 753;
        static final int TRANSACTION_getCiuDeliveryUploadMode = 965;
        static final int TRANSACTION_getCiuDistractionLevel = 815;
        static final int TRANSACTION_getCiuDistractionStatus = 809;
        static final int TRANSACTION_getCiuDmsStatus = 740;
        static final int TRANSACTION_getCiuDvrFormatStatus = 772;
        static final int TRANSACTION_getCiuDvrLockFb = 773;
        static final int TRANSACTION_getCiuDvrMode = 764;
        static final int TRANSACTION_getCiuDvrStatus = 770;
        static final int TRANSACTION_getCiuErrorType = 748;
        static final int TRANSACTION_getCiuFaceAction = 757;
        static final int TRANSACTION_getCiuFaceIDSwitchStatus = 750;
        static final int TRANSACTION_getCiuFaceIdPrimalStatus = 746;
        static final int TRANSACTION_getCiuFaceIdStatus = 745;
        static final int TRANSACTION_getCiuFaceShieldStatus = 747;
        static final int TRANSACTION_getCiuFatigueLevel = 814;
        static final int TRANSACTION_getCiuFatigueStatus = 811;
        static final int TRANSACTION_getCiuLightIntensity = 749;
        static final int TRANSACTION_getCiuRainSw = 806;
        static final int TRANSACTION_getCiuSdStatus = 769;
        static final int TRANSACTION_getCiuStatus = 1094;
        static final int TRANSACTION_getCiuUid = 743;
        static final int TRANSACTION_getCiuValid = 762;
        static final int TRANSACTION_getCpuTemperature = 10;
        static final int TRANSACTION_getCtrlCurr = 317;
        static final int TRANSACTION_getCtrlTemp = 318;
        static final int TRANSACTION_getCtrlVolt = 316;
        static final int TRANSACTION_getCutLinePreventSw = 569;
        static final int TRANSACTION_getCwcChargeErrorSt = 726;
        static final int TRANSACTION_getCwcChargeSt = 725;
        static final int TRANSACTION_getDcdcFailStInfo = 256;
        static final int TRANSACTION_getDcdcInputCurrent = 1584;
        static final int TRANSACTION_getDcdcInputVoltage = 1583;
        static final int TRANSACTION_getDcdcStatus = 257;
        static final int TRANSACTION_getDischargeHighVoltageLockState = 2152;
        static final int TRANSACTION_getDoorOpenWarning = 575;
        static final int TRANSACTION_getDoubleThemeColor = 370;
        static final int TRANSACTION_getDriveTotalMileage = 306;
        static final int TRANSACTION_getDriverDoorState = 106;
        static final int TRANSACTION_getDvTestBatTemp = 877;
        static final int TRANSACTION_getDvTestMcuTemp = 875;
        static final int TRANSACTION_getDvTestPcbTemp = 878;
        static final int TRANSACTION_getDvrEnableState = 958;
        static final int TRANSACTION_getEnvCharacterInfo = 600;
        static final int TRANSACTION_getEpsSteeringAngle = 603;
        static final int TRANSACTION_getEpsSteeringAngleSpeed = 604;
        static final int TRANSACTION_getEpsTorqControlStatus = 1756;
        static final int TRANSACTION_getEpsTorsionBarTorque = 1214;
        static final int TRANSACTION_getEpsWorkMode = 259;
        static final int TRANSACTION_getEspAbsWorkStatus = 1809;
        static final int TRANSACTION_getEspAllWheelSpeed = 1808;
        static final int TRANSACTION_getEspApbSystemDisplayMessage = 1066;
        static final int TRANSACTION_getEspApbSystemStatus = 1067;
        static final int TRANSACTION_getEspCarSpeed = 133;
        static final int TRANSACTION_getEspDtcFaultStatus = 1710;
        static final int TRANSACTION_getEspEpbDriverOffWarningMsg = 1911;
        static final int TRANSACTION_getEspEpbWarningLampStatus = 849;
        static final int TRANSACTION_getEspEpsWarninglampStatus = 850;
        static final int TRANSACTION_getEspHbcRequestStatus = 1068;
        static final int TRANSACTION_getEspIbsBrakeMode = 363;
        static final int TRANSACTION_getEspIbtBrakeTravelDistance = 1842;
        static final int TRANSACTION_getEspIbtFailureLampRequest = 1711;
        static final int TRANSACTION_getEspInterventionStatus = 1445;
        static final int TRANSACTION_getEspIpuFrontActualRotateSpeed = 1812;
        static final int TRANSACTION_getEspIpuFrontActualTorque = 1838;
        static final int TRANSACTION_getEspIpuFrontMotorActualTemperature = 1839;
        static final int TRANSACTION_getEspIpuRearActualRotateSpeed = 1813;
        static final int TRANSACTION_getEspIpuRearActualTorque = 1840;
        static final int TRANSACTION_getEspIpuRearMotorActualTemperature = 1841;
        static final int TRANSACTION_getEspMasterCylinderPressure = 1843;
        static final int TRANSACTION_getEspOffRoadSwitchStatus = 1607;
        static final int TRANSACTION_getEspTcsWorkStatus = 1810;
        static final int TRANSACTION_getEspTsmFaultStatus = 1709;
        static final int TRANSACTION_getEspTsmSwitchStatus = 1600;
        static final int TRANSACTION_getEspVdcWorkStatus = 1811;
        static final int TRANSACTION_getEspWorkMode = 263;
        static final int TRANSACTION_getFRCwcChargeErrorSt = 2009;
        static final int TRANSACTION_getFRCwcChargeSt = 2008;
        static final int TRANSACTION_getFarLampAutoSwitch = 567;
        static final int TRANSACTION_getFatigueDetectionSw = 577;
        static final int TRANSACTION_getFcwAebSensitivitySwitchStatus = 2039;
        static final int TRANSACTION_getFinishCopyTboxLogResponse = 1774;
        static final int TRANSACTION_getFrontCollisionSecurity = 218;
        static final int TRANSACTION_getFrontRadarData = 229;
        static final int TRANSACTION_getFrontRadarFaultSt = 187;
        static final int TRANSACTION_getFrontRadarLevel = 186;
        static final int TRANSACTION_getGSensorOffset = 36;
        static final int TRANSACTION_getGpsAntPowerControlResponse = 973;
        static final int TRANSACTION_getGpsResetResp = 714;
        static final int TRANSACTION_getGpsSpeed = 191;
        static final int TRANSACTION_getHardwareVersion = 14;
        static final int TRANSACTION_getHavcCompressorConsumePower = 1585;
        static final int TRANSACTION_getHavcHvhConsumePower = 1586;
        static final int TRANSACTION_getHighSpeedNavigation = 585;
        static final int TRANSACTION_getHvacAcCtrlType = 1176;
        static final int TRANSACTION_getHvacAcState = 177;
        static final int TRANSACTION_getHvacAirCirculationPeriod = 533;
        static final int TRANSACTION_getHvacAirCirculationType = 1178;
        static final int TRANSACTION_getHvacAirCycleMode = 171;
        static final int TRANSACTION_getHvacAirDistributionAutoControlStatus = 1135;
        static final int TRANSACTION_getHvacAirInTakeAutoControlStatus = 1133;
        static final int TRANSACTION_getHvacAirPurgeSwitchState = 178;
        static final int TRANSACTION_getHvacAqsSensitivity = 523;
        static final int TRANSACTION_getHvacAqsSwitchState = 521;
        static final int TRANSACTION_getHvacAutoDefogSwitchStatus = 1274;
        static final int TRANSACTION_getHvacAutoDefogWorkSt = 1908;
        static final int TRANSACTION_getHvacAutoModePreference = 172;
        static final int TRANSACTION_getHvacAutoModeState = 181;
        static final int TRANSACTION_getHvacBlowerCtrlType = 1177;
        static final int TRANSACTION_getHvacCoConcentrationStatus = 1363;
        static final int TRANSACTION_getHvacDefrostMode = 180;
        static final int TRANSACTION_getHvacDeodorizeSwitchStatus = 1268;
        static final int TRANSACTION_getHvacDisinfSwitchStatus = 1461;
        static final int TRANSACTION_getHvacDrvLeftFanHorPos = 505;
        static final int TRANSACTION_getHvacDrvLeftFanVerPos = 507;
        static final int TRANSACTION_getHvacDrvRightFanHorPos = 509;
        static final int TRANSACTION_getHvacDrvRightFanVerPos = 511;
        static final int TRANSACTION_getHvacDrvSeatTempValue = 174;
        static final int TRANSACTION_getHvacEavDrvWindMode = 529;
        static final int TRANSACTION_getHvacEavPsnWindMode = 531;
        static final int TRANSACTION_getHvacEconState = 527;
        static final int TRANSACTION_getHvacErrorStatus = 1111;
        static final int TRANSACTION_getHvacExternalTemp = 536;
        static final int TRANSACTION_getHvacFanPosition = 167;
        static final int TRANSACTION_getHvacFanSpeedLevel = 166;
        static final int TRANSACTION_getHvacFrogingRiskStatus = 1462;
        static final int TRANSACTION_getHvacInnerTemp = 175;
        static final int TRANSACTION_getHvacLonizerState = 541;
        static final int TRANSACTION_getHvacMachineStateSwitch = 1983;
        static final int TRANSACTION_getHvacMaxWindSpeedLevel = 932;
        static final int TRANSACTION_getHvacMinWindSpeedLevel = 931;
        static final int TRANSACTION_getHvacNewFreshSwitchStatus = 1945;
        static final int TRANSACTION_getHvacOutsideAirQualityLevel = 169;
        static final int TRANSACTION_getHvacOutsideAirQualityStatus = 168;
        static final int TRANSACTION_getHvacPm25Value = 537;
        static final int TRANSACTION_getHvacPowerState = 179;
        static final int TRANSACTION_getHvacPsnLeftFanHorPos = 513;
        static final int TRANSACTION_getHvacPsnLeftFanVerPos = 515;
        static final int TRANSACTION_getHvacPsnRightFanHorPos = 517;
        static final int TRANSACTION_getHvacPsnRightFanVerPos = 519;
        static final int TRANSACTION_getHvacPsnSeatTempValue = 173;
        static final int TRANSACTION_getHvacRearAirDistributionAutoControlStatus = 1926;
        static final int TRANSACTION_getHvacRearAutoModeState = 1924;
        static final int TRANSACTION_getHvacRearFanSpeedLevel = 1930;
        static final int TRANSACTION_getHvacRearWindLessSwitch = 1966;
        static final int TRANSACTION_getHvacRearWindSpeedAutoControlStatus = 1925;
        static final int TRANSACTION_getHvacSelfDrySwStatus = 882;
        static final int TRANSACTION_getHvacSfsChannel = 1266;
        static final int TRANSACTION_getHvacSfsConcentrationStatus = 1344;
        static final int TRANSACTION_getHvacSfsSwitchStatus = 1263;
        static final int TRANSACTION_getHvacSfsTypeInChannels = 1264;
        static final int TRANSACTION_getHvacSweepWindStatus = 525;
        static final int TRANSACTION_getHvacTempColor = 534;
        static final int TRANSACTION_getHvacTempLeftSyncState = 176;
        static final int TRANSACTION_getHvacTempRightSyncState = 503;
        static final int TRANSACTION_getHvacTempSecRowLeftValue = 1920;
        static final int TRANSACTION_getHvacTempSecRowRightValue = 1922;
        static final int TRANSACTION_getHvacTempSyncMode = 683;
        static final int TRANSACTION_getHvacTempThirdRowValue = 1934;
        static final int TRANSACTION_getHvacThirdRowWindBlowMode = 1937;
        static final int TRANSACTION_getHvacWarpSpeedCoolingSwitchStatus = 1272;
        static final int TRANSACTION_getHvacWarpSpeedWarmingSwitchStatus = 1270;
        static final int TRANSACTION_getHvacWindSpeedAutoControlStatus = 1134;
        static final int TRANSACTION_getIcmAlarmVolume = 269;
        static final int TRANSACTION_getIcmBrakeFluidLevelWarningMessage = 1069;
        static final int TRANSACTION_getIcmBrightness = 723;
        static final int TRANSACTION_getIcmCabinAiFeedback = 1101;
        static final int TRANSACTION_getIcmConnectionState = 311;
        static final int TRANSACTION_getIcmCrashInfo = 1211;
        static final int TRANSACTION_getIcmDashboardLightsStatus = 1371;
        static final int TRANSACTION_getIcmDayNightSwitch = 284;
        static final int TRANSACTION_getIcmDiagnosisInfo = 1227;
        static final int TRANSACTION_getIcmDriverTempValue = 294;
        static final int TRANSACTION_getIcmEcuUpdateResult = 1206;
        static final int TRANSACTION_getIcmLogCompressInformation = 1760;
        static final int TRANSACTION_getIcmMediaSource = 278;
        static final int TRANSACTION_getIcmNavigation = 282;
        static final int TRANSACTION_getIcmScreenLight = 280;
        static final int TRANSACTION_getIcmTemperature = 272;
        static final int TRANSACTION_getIcmTimeFormat = 724;
        static final int TRANSACTION_getIcmUpdateProgress = 1077;
        static final int TRANSACTION_getIcmUpdateResponse = 1074;
        static final int TRANSACTION_getIcmUpdateResult = 1076;
        static final int TRANSACTION_getIcmUpdatingPartitionAndProgress = 1181;
        static final int TRANSACTION_getIcmWindBlowMode = 290;
        static final int TRANSACTION_getIcmWindLevel = 292;
        static final int TRANSACTION_getIcmWindMode = 276;
        static final int TRANSACTION_getIcmWindPower = 274;
        static final int TRANSACTION_getImsAutoVisionSt = 2135;
        static final int TRANSACTION_getImsBrightLevel = 2137;
        static final int TRANSACTION_getImsModeState = 2133;
        static final int TRANSACTION_getImsSystemSt = 2141;
        static final int TRANSACTION_getImsVisionAngleLevl = 2140;
        static final int TRANSACTION_getImsVisionVerticalLevel = 2139;
        static final int TRANSACTION_getImuAddData = 918;
        static final int TRANSACTION_getImuDiagMessage = 919;
        static final int TRANSACTION_getImuNavigationData = 920;
        static final int TRANSACTION_getImuNavigationDataFromCan = 1418;
        static final int TRANSACTION_getImuNavigationSatellitesRssi = 1284;
        static final int TRANSACTION_getImuQuatData = 913;
        static final int TRANSACTION_getImuSatellitesNumber = 1283;
        static final int TRANSACTION_getImuSystemState = 912;
        static final int TRANSACTION_getImuSystemStateAndSpeed = 1353;
        static final int TRANSACTION_getImuSystemStateAndSpeedFromCan = 1419;
        static final int TRANSACTION_getImuSystemStateFromCan = 1417;
        static final int TRANSACTION_getImuTboxPackGgaData = 917;
        static final int TRANSACTION_getImuUbxPvtData1 = 914;
        static final int TRANSACTION_getImuUbxPvtData2 = 915;
        static final int TRANSACTION_getImuUbxRawXData = 916;
        static final int TRANSACTION_getImuUbxSfrbxData = 921;
        static final int TRANSACTION_getInsulativeResistanceValue = 2153;
        static final int TRANSACTION_getIntelligentCallButton = 590;
        static final int TRANSACTION_getIntelligentSpeedLimit = 217;
        static final int TRANSACTION_getIpuFailStInfo = 315;
        static final int TRANSACTION_getIsHvCutOffStatus = 1114;
        static final int TRANSACTION_getKeyRemoteSMButton = 597;
        static final int TRANSACTION_getKeyRemoteType = 588;
        static final int TRANSACTION_getLCMSAutoBrightSwSt = 1870;
        static final int TRANSACTION_getLCMSBright = 1872;
        static final int TRANSACTION_getLCMSBrightWithSource = 1963;
        static final int TRANSACTION_getLCMSDanObjectRecSwSt = 1878;
        static final int TRANSACTION_getLCMSHighSpeedViewSwSt = 1874;
        static final int TRANSACTION_getLCMSLowSpeedViewSwSt = 1876;
        static final int TRANSACTION_getLCMSReverseAssitSwSt = 1880;
        static final int TRANSACTION_getLCMSTurnExtSwSt = 1882;
        static final int TRANSACTION_getLCMSViewRecoverySt = 1884;
        static final int TRANSACTION_getLRCMSAllExteriorMirrorsPositions = 1957;
        static final int TRANSACTION_getLRCMSStoreBrightSource = 1961;
        static final int TRANSACTION_getLRCMSViewAngle = 1959;
        static final int TRANSACTION_getLaneAlignmentAssist = 583;
        static final int TRANSACTION_getLaneChangeAssist = 216;
        static final int TRANSACTION_getLaneDepartureWarning = 215;
        static final int TRANSACTION_getLaneSupportSystemStateAndWarning = 2000;
        static final int TRANSACTION_getLastChargeMileage = 307;
        static final int TRANSACTION_getLastStartUpMileage = 308;
        static final int TRANSACTION_getLeavePollingLockSw = 730;
        static final int TRANSACTION_getLeftAndRightTurnLampsActiveStatus = 1182;
        static final int TRANSACTION_getLeftFrontDoorOpened = 633;
        static final int TRANSACTION_getLeftSdcIndexN = 1334;
        static final int TRANSACTION_getLeftSlideDoorLockSt = 1990;
        static final int TRANSACTION_getLeftSlideDoorMoode = 1987;
        static final int TRANSACTION_getLeftSlideDoorStatus = 1988;
        static final int TRANSACTION_getLluAcChargeMode = 662;
        static final int TRANSACTION_getLluAcChargingCfg = 979;
        static final int TRANSACTION_getLluBreathMode = 441;
        static final int TRANSACTION_getLluChargingSwitch = 413;
        static final int TRANSACTION_getLluCurrentFunction = 442;
        static final int TRANSACTION_getLluDcChargeMode = 664;
        static final int TRANSACTION_getLluDcChargingCfg = 980;
        static final int TRANSACTION_getLluEnableStatus = 405;
        static final int TRANSACTION_getLluFindCarSwitchState = 976;
        static final int TRANSACTION_getLluLockSocDspSwitch = 884;
        static final int TRANSACTION_getLluLockUnlockSocDspSwitchState = 978;
        static final int TRANSACTION_getLluPhotoMode = 666;
        static final int TRANSACTION_getLluPhotoSwitch = 415;
        static final int TRANSACTION_getLluScriptStResponse = 954;
        static final int TRANSACTION_getLluShowOffMode = 658;
        static final int TRANSACTION_getLluShowOffSwitch = 409;
        static final int TRANSACTION_getLluSleepMode = 660;
        static final int TRANSACTION_getLluSleepSwitch = 411;
        static final int TRANSACTION_getLluSpeedLimitCfg = 982;
        static final int TRANSACTION_getLluUnLockSocDspSwitch = 886;
        static final int TRANSACTION_getLluWakeWaitMode = 656;
        static final int TRANSACTION_getLluWakeWaitSwitch = 407;
        static final int TRANSACTION_getMaxHavcTemperature = 934;
        static final int TRANSACTION_getMcuAtlsState = 922;
        static final int TRANSACTION_getMcuAutoPowerOffSwitchState = 1001;
        static final int TRANSACTION_getMcuBacklightIcDriverState = 1170;
        static final int TRANSACTION_getMcuBacklightTemperature = 1169;
        static final int TRANSACTION_getMcuBatteryStatus = 390;
        static final int TRANSACTION_getMcuBleAccountData = 1091;
        static final int TRANSACTION_getMcuBurglarAlarmState = 1;
        static final int TRANSACTION_getMcuCameraStatus = 392;
        static final int TRANSACTION_getMcuChairWelcomeMode = 890;
        static final int TRANSACTION_getMcuChargeStatus = 394;
        static final int TRANSACTION_getMcuCidState = 1165;
        static final int TRANSACTION_getMcuCiuState = 910;
        static final int TRANSACTION_getMcuDtcReportEv = 800;
        static final int TRANSACTION_getMcuDvBattMsg = 876;
        static final int TRANSACTION_getMcuFaceIdMode = 952;
        static final int TRANSACTION_getMcuFaceIdSwState = 950;
        static final int TRANSACTION_getMcuFactoryDisplayTypeMsgToMcu = 801;
        static final int TRANSACTION_getMcuFactoryModeSwitchStatus = 1340;
        static final int TRANSACTION_getMcuFaultInfo = 802;
        static final int TRANSACTION_getMcuHardWareId = 8;
        static final int TRANSACTION_getMcuIgState = 391;
        static final int TRANSACTION_getMcuKeyStartStatus = 1374;
        static final int TRANSACTION_getMcuLampStatus = 393;
        static final int TRANSACTION_getMcuLluChargingSwitch = 994;
        static final int TRANSACTION_getMcuLluEnableStatus = 986;
        static final int TRANSACTION_getMcuLluPhotoSwitch = 996;
        static final int TRANSACTION_getMcuLluPowerRequestSwitchStatus = 1474;
        static final int TRANSACTION_getMcuLluShowOffSwitch = 990;
        static final int TRANSACTION_getMcuLluSleepSwitch = 992;
        static final int TRANSACTION_getMcuLluWakeWaitSwitch = 988;
        static final int TRANSACTION_getMcuLluWorkStatus = 1064;
        static final int TRANSACTION_getMcuMonitorState = 1040;
        static final int TRANSACTION_getMcuOcuState = 909;
        static final int TRANSACTION_getMcuPowerOffCountdownNotice = 1003;
        static final int TRANSACTION_getMcuPsuOtaFeedbackMsg = 948;
        static final int TRANSACTION_getMcuPsuTestResult = 874;
        static final int TRANSACTION_getMcuRemindWarningStatus = 1758;
        static final int TRANSACTION_getMcuRequestedMessage = 1019;
        static final int TRANSACTION_getMcuRtcTime = 31;
        static final int TRANSACTION_getMcuRvcEnable = 1590;
        static final int TRANSACTION_getMcuTemporaryFactoryStatus = 1341;
        static final int TRANSACTION_getMcuTrunkPowerOffDelay = 1226;
        static final int TRANSACTION_getMcuTrunkPowerOnRequest = 1383;
        static final int TRANSACTION_getMcuTrunkPowerStatus = 1224;
        static final int TRANSACTION_getMcuUpdateReqStatus = 689;
        static final int TRANSACTION_getMcuVersion = 1015;
        static final int TRANSACTION_getMcuWifiHotspotRequest = 1360;
        static final int TRANSACTION_getMeterMileageA = 304;
        static final int TRANSACTION_getMeterMileageB = 305;
        static final int TRANSACTION_getMileageExtraParams = 190;
        static final int TRANSACTION_getMinHavcTemperature = 933;
        static final int TRANSACTION_getMotorStatus = 322;
        static final int TRANSACTION_getMotorTemp = 319;
        static final int TRANSACTION_getMsmDriverHeadrestStatus = 1281;
        static final int TRANSACTION_getMsmDriverSeatCushTiltPosition = 1527;
        static final int TRANSACTION_getMsmDriverSeatLegHorzPosition = 1894;
        static final int TRANSACTION_getMsmDriverSeatLumberSwitchCenterPressStatus = 1764;
        static final int TRANSACTION_getMsmDriverSeatLumberSwitchMode = 1763;
        static final int TRANSACTION_getMsmDriverSeatMassgElem = 1697;
        static final int TRANSACTION_getMsmDriverSeatMassgErrorStatus = 1831;
        static final int TRANSACTION_getMsmDriverSeatMassgIntensity = 1644;
        static final int TRANSACTION_getMsmDriverSeatMassgProgMode = 1642;
        static final int TRANSACTION_getMsmDrvSeatBackPosition = 455;
        static final int TRANSACTION_getMsmDrvSeatHorizPosition = 451;
        static final int TRANSACTION_getMsmDrvSeatLegPosition = 457;
        static final int TRANSACTION_getMsmDrvSeatVertiPosition = 453;
        static final int TRANSACTION_getMsmPassengerHeadrestStatus = 1282;
        static final int TRANSACTION_getMsmPassengerSeatBackPosition = 1280;
        static final int TRANSACTION_getMsmPassengerSeatCushExtPosition = 1526;
        static final int TRANSACTION_getMsmPassengerSeatHorizontalPosition = 1276;
        static final int TRANSACTION_getMsmPassengerSeatLegHorzPosition = 1895;
        static final int TRANSACTION_getMsmPassengerSeatLumberSwitchCenterPressStatus = 1766;
        static final int TRANSACTION_getMsmPassengerSeatLumberSwitchMode = 1765;
        static final int TRANSACTION_getMsmPassengerSeatMassgElem = 1698;
        static final int TRANSACTION_getMsmPassengerSeatMassgErrorStatus = 1832;
        static final int TRANSACTION_getMsmPassengerSeatMassgIntensity = 1648;
        static final int TRANSACTION_getMsmPassengerSeatMassgProgMode = 1646;
        static final int TRANSACTION_getMsmPassengerSeatVerticalPosition = 1278;
        static final int TRANSACTION_getMsmPassengerWelcomeSwitch = 1775;
        static final int TRANSACTION_getMsmSecRowLeftSeatCushExtPosition = 1620;
        static final int TRANSACTION_getMsmSecRowLeftSeatLegHorzPosition = 1899;
        static final int TRANSACTION_getMsmSecRowLeftSeatMassgElem = 1699;
        static final int TRANSACTION_getMsmSecRowLeftSeatMassgErrorStatus = 1833;
        static final int TRANSACTION_getMsmSecRowLeftSeatMassgIntensity = 1652;
        static final int TRANSACTION_getMsmSecRowLeftSeatMassgProgMode = 1650;
        static final int TRANSACTION_getMsmSecRowRightSeatCushExtPosition = 1622;
        static final int TRANSACTION_getMsmSecRowRightSeatLegHorzPosition = 1901;
        static final int TRANSACTION_getMsmSecRowRightSeatMassgElem = 1700;
        static final int TRANSACTION_getMsmSecRowRightSeatMassgErrorStatus = 1834;
        static final int TRANSACTION_getMsmSecRowRightSeatMassgIntensity = 1656;
        static final int TRANSACTION_getMsmSecRowRightSeatMassgProgMode = 1654;
        static final int TRANSACTION_getMsmSecrowLtSeatTiltPosition = 1524;
        static final int TRANSACTION_getMsmSecrowRtSeatTiltPosition = 1525;
        static final int TRANSACTION_getMsmtLeftSeatFoldFunSt = 2081;
        static final int TRANSACTION_getMsmtRightSeatFoldFunSt = 2083;
        static final int TRANSACTION_getMsmtSeatStowFunSt = 2085;
        static final int TRANSACTION_getNaviBmpInfoRequiredByIcm = 911;
        static final int TRANSACTION_getNearePollingUnLockSw = 732;
        static final int TRANSACTION_getNearestEnableRadar = 188;
        static final int TRANSACTION_getNetWorkType = 649;
        static final int TRANSACTION_getOTAProgress = 354;
        static final int TRANSACTION_getOtaMcuReqUpdatefile = 691;
        static final int TRANSACTION_getOtaMcuUpdateStatus = 694;
        static final int TRANSACTION_getParkSlotInfo = 599;
        static final int TRANSACTION_getParkingStatus = 214;
        static final int TRANSACTION_getPhoneParkType = 595;
        static final int TRANSACTION_getPhoneRemoteAPInformation = 1752;
        static final int TRANSACTION_getPhoneSMButton = 591;
        static final int TRANSACTION_getPmStatus = 33;
        static final int TRANSACTION_getPmStatusWithParameter = 908;
        static final int TRANSACTION_getPollingWelcomeState = 2037;
        static final int TRANSACTION_getQuitNgpOddSt = 1194;
        static final int TRANSACTION_getRLCwcChargeErrorSt = 2145;
        static final int TRANSACTION_getRLCwcChargeSt = 2144;
        static final int TRANSACTION_getRRCwcChargeErrorSt = 2149;
        static final int TRANSACTION_getRRCwcChargeSt = 2148;
        static final int TRANSACTION_getRadarDataInfo = 602;
        static final int TRANSACTION_getRadarWarningVoiceStatus = 220;
        static final int TRANSACTION_getRadioFrequency = 336;
        static final int TRANSACTION_getRadioStatus = 339;
        static final int TRANSACTION_getRadioVolumeAutoFocus = 332;
        static final int TRANSACTION_getRearCollisionSecurity = 573;
        static final int TRANSACTION_getRearCrossEmergencyWarning = 571;
        static final int TRANSACTION_getRearCrossLeftWarning = 673;
        static final int TRANSACTION_getRearCrossRightWarning = 674;
        static final int TRANSACTION_getRearHvacFanPosition = 1861;
        static final int TRANSACTION_getRearHvacPowerState = 1914;
        static final int TRANSACTION_getRearLogLight = 1995;
        static final int TRANSACTION_getRemoteDiagCaptureRequest = 349;
        static final int TRANSACTION_getRightRightSdcIndexN = 1333;
        static final int TRANSACTION_getRightSlideDoorLockSt = 1994;
        static final int TRANSACTION_getRightSlideDoorMoode = 1991;
        static final int TRANSACTION_getRightSlideDoorStatus = 1992;
        static final int TRANSACTION_getRollSpeed = 321;
        static final int TRANSACTION_getRoutingForTboxResponse = 1768;
        static final int TRANSACTION_getSRHeartBeatInfo = 2030;
        static final int TRANSACTION_getScreenTempValue = 37;
        static final int TRANSACTION_getScu322LogData = 211;
        static final int TRANSACTION_getScu322LogDataD20 = 1104;
        static final int TRANSACTION_getScu3FDLogData = 210;
        static final int TRANSACTION_getScu3FELogData = 209;
        static final int TRANSACTION_getScuAccExitReason = 1258;
        static final int TRANSACTION_getScuAccLkaWarning = 1131;
        static final int TRANSACTION_getScuAebAlarmSwitchState = 1342;
        static final int TRANSACTION_getScuAlarmFaultStatus = 1103;
        static final int TRANSACTION_getScuAlcCtrlRemindInfo = 1362;
        static final int TRANSACTION_getScuAllSrrRadarEmissStatus = 1853;
        static final int TRANSACTION_getScuAltimeter = 778;
        static final int TRANSACTION_getScuAssLineChanged = 818;
        static final int TRANSACTION_getScuBsdStatus = 1107;
        static final int TRANSACTION_getScuCutInPreventionWarning = 1130;
        static final int TRANSACTION_getScuDisplayCruiseSpeed = 1193;
        static final int TRANSACTION_getScuDoorsLRadarDisplayLevel = 1678;
        static final int TRANSACTION_getScuDoorsLRadarDistance = 1722;
        static final int TRANSACTION_getScuDoorsObstacleDetectionSt = 1200;
        static final int TRANSACTION_getScuDoorsRRadarDisplayLevel = 1679;
        static final int TRANSACTION_getScuDoorsRRadarDistance = 1723;
        static final int TRANSACTION_getScuDoorsRadarDisplayLevel = 1202;
        static final int TRANSACTION_getScuDoorsRadarDistance = 1201;
        static final int TRANSACTION_getScuDsmPrompt = 1352;
        static final int TRANSACTION_getScuDsmStatus = 1438;
        static final int TRANSACTION_getScuElkSwitchState = 1260;
        static final int TRANSACTION_getScuErrorTips = 830;
        static final int TRANSACTION_getScuExtraLatCtrlRemindInfo = 1092;
        static final int TRANSACTION_getScuFishEyeCamFailureSt = 1189;
        static final int TRANSACTION_getScuFrontMinDistance = 782;
        static final int TRANSACTION_getScuFsdSwitchState = 1168;
        static final int TRANSACTION_getScuHmiDopRemind = 1777;
        static final int TRANSACTION_getScuKeyPark = 777;
        static final int TRANSACTION_getScuLAvmData = 859;
        static final int TRANSACTION_getScuLccExitReason = 1257;
        static final int TRANSACTION_getScuLdwLkaSwitchStatus = 1354;
        static final int TRANSACTION_getScuLdwStatus = 1106;
        static final int TRANSACTION_getScuLeftDoorOpenWarning = 1046;
        static final int TRANSACTION_getScuLeftRightBlindSpotDetectionSwitchStatus = 1575;
        static final int TRANSACTION_getScuLeftRightDoorOpenWarningSwitchStatus = 1579;
        static final int TRANSACTION_getScuLeftRightRearCollisionSwitchStatus = 1576;
        static final int TRANSACTION_getScuLeftRightRearCrossTrafficAlertStatus = 1580;
        static final int TRANSACTION_getScuLeftSdcBlindStatus = 1290;
        static final int TRANSACTION_getScuLeftSdcRadarDistance = 1324;
        static final int TRANSACTION_getScuLeftSdcRadarErrorStatus = 1328;
        static final int TRANSACTION_getScuLeftSdcRadarHallCounter = 1336;
        static final int TRANSACTION_getScuLeftSdcRadarPeakLevel = 1326;
        static final int TRANSACTION_getScuLeftSdcRadarRt = 1331;
        static final int TRANSACTION_getScuLeftSdcRadarStatus = 1289;
        static final int TRANSACTION_getScuLeftSdcRadarStatusCcp = 1327;
        static final int TRANSACTION_getScuLeftSdcRadarTof = 1325;
        static final int TRANSACTION_getScuLeftSdcRadarWaveWidth = 1332;
        static final int TRANSACTION_getScuLeftSdcSceneStatus = 1291;
        static final int TRANSACTION_getScuLeftSdcURadarDistance = 1297;
        static final int TRANSACTION_getScuLkaState = 1179;
        static final int TRANSACTION_getScuLkaSwitchState = 1356;
        static final int TRANSACTION_getScuLocatData = 854;
        static final int TRANSACTION_getScuLocatDataWithZ = 1164;
        static final int TRANSACTION_getScuMainCamFailureSt = 1190;
        static final int TRANSACTION_getScuMemoryParkingState = 1430;
        static final int TRANSACTION_getScuModeIndex = 784;
        static final int TRANSACTION_getScuMrrAssistSystemStates = 1022;
        static final int TRANSACTION_getScuMrrFailureSt = 1188;
        static final int TRANSACTION_getScuMrrRadarEmissStatus = 1852;
        static final int TRANSACTION_getScuNarrowCamFailureSt = 1191;
        static final int TRANSACTION_getScuNgpAvoidTruckSwSt = 1230;
        static final int TRANSACTION_getScuNgpDriverConfirmLaneChangeSwSt = 1231;
        static final int TRANSACTION_getScuNgpInfoTips1 = 1198;
        static final int TRANSACTION_getScuNgpLaneChangeMode = 1232;
        static final int TRANSACTION_getScuNgpLcTips1 = 1197;
        static final int TRANSACTION_getScuNgpModeStatus = 1347;
        static final int TRANSACTION_getScuNgpOperationButtonSt = 1196;
        static final int TRANSACTION_getScuNgpPreferFastLaneSwSt = 1229;
        static final int TRANSACTION_getScuNgpRemindMode = 1233;
        static final int TRANSACTION_getScuNgpTipsWindowsSwSt = 1228;
        static final int TRANSACTION_getScuOperationTips = 213;
        static final int TRANSACTION_getScuParkByMemorySwSt = 1348;
        static final int TRANSACTION_getScuParkingProgress = 857;
        static final int TRANSACTION_getScuPhoneSmMode = 775;
        static final int TRANSACTION_getScuRAvmData = 860;
        static final int TRANSACTION_getScuRadarDisplayActive = 829;
        static final int TRANSACTION_getScuRadarVoiceActive = 862;
        static final int TRANSACTION_getScuRadarVoiceTone = 863;
        static final int TRANSACTION_getScuRctaStatus = 1108;
        static final int TRANSACTION_getScuRearCollisionWarning = 1036;
        static final int TRANSACTION_getScuRearMinDistance = 783;
        static final int TRANSACTION_getScuRearMirrorControlState = 1062;
        static final int TRANSACTION_getScuRemoteFlag = 1379;
        static final int TRANSACTION_getScuRightDoorOpenWarning = 1047;
        static final int TRANSACTION_getScuRightSdcBlindStatus = 1292;
        static final int TRANSACTION_getScuRightSdcRadarDistance = 1319;
        static final int TRANSACTION_getScuRightSdcRadarErrorStatus = 1323;
        static final int TRANSACTION_getScuRightSdcRadarHallCounter = 1337;
        static final int TRANSACTION_getScuRightSdcRadarPeakLevel = 1321;
        static final int TRANSACTION_getScuRightSdcRadarRt = 1329;
        static final int TRANSACTION_getScuRightSdcRadarStatus = 1288;
        static final int TRANSACTION_getScuRightSdcRadarStatusCcp = 1322;
        static final int TRANSACTION_getScuRightSdcRadarTof = 1320;
        static final int TRANSACTION_getScuRightSdcRadarWaveWidth = 1330;
        static final int TRANSACTION_getScuRightSdcSceneStatus = 1293;
        static final int TRANSACTION_getScuRightSdcURadarDistance = 1298;
        static final int TRANSACTION_getScuRoadVoiceTips = 1132;
        static final int TRANSACTION_getScuSdcAutoModeStatus = 1294;
        static final int TRANSACTION_getScuSdcCtrlIndex1 = 1295;
        static final int TRANSACTION_getScuSdcCtrlIndex2 = 1296;
        static final int TRANSACTION_getScuSdcRadarFusion = 1335;
        static final int TRANSACTION_getScuSdcTips = 1254;
        static final int TRANSACTION_getScuSdcTts = 1255;
        static final int TRANSACTION_getScuSdcUltrasonicRadarVoiceTone = 1250;
        static final int TRANSACTION_getScuSensorData = 858;
        static final int TRANSACTION_getScuSideCamsFailureSt = 1192;
        static final int TRANSACTION_getScuSlaAlarmSwitchState = 1163;
        static final int TRANSACTION_getScuSlaStatus = 1105;
        static final int TRANSACTION_getScuSlotData = 868;
        static final int TRANSACTION_getScuSlotForPark = 861;
        static final int TRANSACTION_getScuSlotTheta = 779;
        static final int TRANSACTION_getScuSlotsNumber = 930;
        static final int TRANSACTION_getScuSpeedLimitControlSystemState = 1424;
        static final int TRANSACTION_getScuSpeedLimitDriverConfirmStatus = 1422;
        static final int TRANSACTION_getScuSpeedLimitRange = 1423;
        static final int TRANSACTION_getScuSpeedLimitRemindVoice = 1432;
        static final int TRANSACTION_getScuSpeedLimitSwitchState = 1414;
        static final int TRANSACTION_getScuSteeringWheelEps = 1345;
        static final int TRANSACTION_getScuSuperParkMode = 853;
        static final int TRANSACTION_getScuTargetParkingPosition = 781;
        static final int TRANSACTION_getScuURadarDataInfo = 1361;
        static final int TRANSACTION_getScuXpilot3Status = 1215;
        static final int TRANSACTION_getSeatErrorState = 110;
        static final int TRANSACTION_getSecRowLeftBlowLevel = 2046;
        static final int TRANSACTION_getSecRowLeftSeatFuncSt = 2078;
        static final int TRANSACTION_getSecRowLeftSeatPos = 2050;
        static final int TRANSACTION_getSecRowLtSeatAnglePos = 2093;
        static final int TRANSACTION_getSecRowLtSeatHeadHorzPos = 2099;
        static final int TRANSACTION_getSecRowLtSeatHeadVerticalPos = 2097;
        static final int TRANSACTION_getSecRowLtSeatHorzPos = 2091;
        static final int TRANSACTION_getSecRowLtSeatLegVerticalPos = 2095;
        static final int TRANSACTION_getSecRowLtSeatState = 2167;
        static final int TRANSACTION_getSecRowRightBlowLevel = 2048;
        static final int TRANSACTION_getSecRowRightSeatFuncSt = 2079;
        static final int TRANSACTION_getSecRowRightSeatPos = 2052;
        static final int TRANSACTION_getSecRowRtSeatAnglePos = 2103;
        static final int TRANSACTION_getSecRowRtSeatHeadHorzPos = 2109;
        static final int TRANSACTION_getSecRowRtSeatHeadVerticalPos = 2107;
        static final int TRANSACTION_getSecRowRtSeatHorzPos = 2101;
        static final int TRANSACTION_getSecRowRtSeatLegVerticalPos = 2105;
        static final int TRANSACTION_getSecRowRtSeatState = 2168;
        static final int TRANSACTION_getSfmAnglePos = 2043;
        static final int TRANSACTION_getSfmCtrlState = 2041;
        static final int TRANSACTION_getSideReversingWarning = 212;
        static final int TRANSACTION_getSimStatusAsync = 684;
        static final int TRANSACTION_getSpcGrossEnergyGeneration = 1377;
        static final int TRANSACTION_getSpcRecentEnergyGeneration = 1378;
        static final int TRANSACTION_getSpcSolarPower = 1380;
        static final int TRANSACTION_getSpcSolarWorkSt = 1376;
        static final int TRANSACTION_getSpdLimitWarnType = 581;
        static final int TRANSACTION_getSpeedLimitWarningSwitch = 286;
        static final int TRANSACTION_getSpeedLimitWarningValue = 288;
        static final int TRANSACTION_getSpeedUpChargeMode = 1118;
        static final int TRANSACTION_getSrsAirbagFaultStatus = 647;
        static final int TRANSACTION_getSrsBackLeftBeltFastenStatus = 643;
        static final int TRANSACTION_getSrsBackMiddleBeltFastenStatus = 644;
        static final int TRANSACTION_getSrsBackRightBeltFastenStatus = 645;
        static final int TRANSACTION_getSrsCrashOutputStatus = 646;
        static final int TRANSACTION_getSrsDrvBeltFastenStatus = 641;
        static final int TRANSACTION_getSrsPassengerCrashOccurSwSt = 1367;
        static final int TRANSACTION_getSrsPsnBeltFastenStatus = 642;
        static final int TRANSACTION_getSrsRearLeftSeatOccupancyStatus = 1234;
        static final int TRANSACTION_getSrsRearMiddleSeatOccupancyStatus = 1235;
        static final int TRANSACTION_getSrsRearRightSeatOccupancyStatus = 1236;
        static final int TRANSACTION_getSrsSelfCheckStatus = 648;
        static final int TRANSACTION_getStartCopyTboxLogResponse = 1772;
        static final int TRANSACTION_getStartTboxOTAResponse = 698;
        static final int TRANSACTION_getStealthMode = 734;
        static final int TRANSACTION_getSteerWheelRotationAngle = 231;
        static final int TRANSACTION_getStopTboxOTAResponse = 699;
        static final int TRANSACTION_getSwsButtonsRawData = 1004;
        static final int TRANSACTION_getTBoxBandModem = 401;
        static final int TRANSACTION_getTBoxChargeLimitValue = 364;
        static final int TRANSACTION_getTBoxConnectionStatus = 357;
        static final int TRANSACTION_getTBoxLastApnMsg = 396;
        static final int TRANSACTION_getTBoxLastBandModemMsg = 399;
        static final int TRANSACTION_getTBoxLastModemMsg = 397;
        static final int TRANSACTION_getTBoxModemInfo = 356;
        static final int TRANSACTION_getTailRadarData = 230;
        static final int TRANSACTION_getTailRadarFaultSt = 185;
        static final int TRANSACTION_getTailRadarLevel = 184;
        static final int TRANSACTION_getTbox4GUpgradingProgress = 896;
        static final int TRANSACTION_getTboxACChargeUnlockST = 1846;
        static final int TRANSACTION_getTboxAutoPowerOffSt = 926;
        static final int TRANSACTION_getTboxAvpStartStatus = 834;
        static final int TRANSACTION_getTboxBatteryKeepTempAppointTime = 1175;
        static final int TRANSACTION_getTboxCanControlMsg = 804;
        static final int TRANSACTION_getTboxCancelPowerOffSt = 928;
        static final int TRANSACTION_getTboxDvBattMsg = 844;
        static final int TRANSACTION_getTboxDvTempMsg = 872;
        static final int TRANSACTION_getTboxEcallMuteRequest = 1743;
        static final int TRANSACTION_getTboxEcallState = 1744;
        static final int TRANSACTION_getTboxFactoryPreCert = 1440;
        static final int TRANSACTION_getTboxGpsMgaResponse = 1009;
        static final int TRANSACTION_getTboxIOTBusinessType = 1845;
        static final int TRANSACTION_getTboxModemCaptureResponse = 1770;
        static final int TRANSACTION_getTboxMultiBleRenewalResponse = 1429;
        static final int TRANSACTION_getTboxNetmConfInfo = 1998;
        static final int TRANSACTION_getTboxPigeonNotification = 1736;
        static final int TRANSACTION_getTboxPowerOffCountdown = 929;
        static final int TRANSACTION_getTboxPsuMsg = 716;
        static final int TRANSACTION_getTboxRemoteBatteryKeepTempReq = 1173;
        static final int TRANSACTION_getTboxRemoteLluMode = 1081;
        static final int TRANSACTION_getTboxRenewalPartsResponse = 1080;
        static final int TRANSACTION_getTboxRepairModeState = 1049;
        static final int TRANSACTION_getTboxRtcTimeStamp = 345;
        static final int TRANSACTION_getTboxSoldierGsensorData = 938;
        static final int TRANSACTION_getTboxSoldierSwState = 936;
        static final int TRANSACTION_getTboxSoldierWorkState = 937;
        static final int TRANSACTION_getTboxSoliderCameraState = 1060;
        static final int TRANSACTION_getTboxSoliderEnableState = 1065;
        static final int TRANSACTION_getTboxTmcuUpgradingProgress = 894;
        static final int TRANSACTION_getTboxToggleGpsLogSwitchResult = 1208;
        static final int TRANSACTION_getTboxUpgradePrepareResponse = 1359;
        static final int TRANSACTION_getTboxVersionInfoAsync = 351;
        static final int TRANSACTION_getTboxVersionInfoResponse = 695;
        static final int TRANSACTION_getThemeFirstColor = 373;
        static final int TRANSACTION_getThemeSecondColor = 375;
        static final int TRANSACTION_getTorque = 320;
        static final int TRANSACTION_getTpmsAbnormalTirePressureWarnLampStatus = 898;
        static final int TRANSACTION_getTpmsAllSensorStatus = 1460;
        static final int TRANSACTION_getTpmsAllTirePressureWarnings = 940;
        static final int TRANSACTION_getTpmsAllTireTemperature = 947;
        static final int TRANSACTION_getTpmsAllTireTemperatureWarnings = 941;
        static final int TRANSACTION_getTpmsSystemFaultWarnLampStatus = 897;
        static final int TRANSACTION_getTpmsTirePressureStatus = 183;
        static final int TRANSACTION_getTpmsTirePressureValue = 501;
        static final int TRANSACTION_getTpmsTirePressureWarningInfo = 899;
        static final int TRANSACTION_getTpmsllTirePerssureSensorStatus = 942;
        static final int TRANSACTION_getTrafficSignRecognition = 579;
        static final int TRANSACTION_getTrdLeftDomeLightSwitchStatus = 2155;
        static final int TRANSACTION_getTrdRightDomeLightSwitchStatus = 2157;
        static final int TRANSACTION_getTrdRowLeftSeatTiltState = 2128;
        static final int TRANSACTION_getTrdRowLtSeatHeadMoveState = 2169;
        static final int TRANSACTION_getTrdRowLtSeatHeadVerticalPos = 2113;
        static final int TRANSACTION_getTrdRowLtSeatTiltPos = 2111;
        static final int TRANSACTION_getTrdRowMidSeatHeadMoveState = 2170;
        static final int TRANSACTION_getTrdRowMidSeatHeadVerticalPos = 2119;
        static final int TRANSACTION_getTrdRowRightSeatTiltState = 2129;
        static final int TRANSACTION_getTrdRowRtSeatHeadMoveState = 2171;
        static final int TRANSACTION_getTrdRowRtSeatHeadVerticalPos = 2117;
        static final int TRANSACTION_getTrdRowRtSeatTiltPos = 2115;
        static final int TRANSACTION_getTrdRowSeatAllPos = 2054;
        static final int TRANSACTION_getTrdRowSeatStowState = 2130;
        static final int TRANSACTION_getUpgradingTboxByUdiskResponse = 907;
        static final int TRANSACTION_getV2LDischargeErrorReason = 2131;
        static final int TRANSACTION_getVCUAWDModeSw = 2033;
        static final int TRANSACTION_getVMCRwsSwitchState = 2121;
        static final int TRANSACTION_getVMCSystemState = 2124;
        static final int TRANSACTION_getVMCZWalkModeState = 2123;
        static final int TRANSACTION_getVcuAcChargCurrentMaxLimitedValue = 2089;
        static final int TRANSACTION_getVcuAcChargeCur = 618;
        static final int TRANSACTION_getVcuAcChargeCurAfterVoltBoosted = 1070;
        static final int TRANSACTION_getVcuAcChargeVolt = 617;
        static final int TRANSACTION_getVcuAcChargeVoltAfterVoltBoosted = 1071;
        static final int TRANSACTION_getVcuAcInputStatus = 792;
        static final int TRANSACTION_getVcuAcPowerConsume = 124;
        static final int TRANSACTION_getVcuAccPedalStatus = 652;
        static final int TRANSACTION_getVcuAsDriveModeStatus = 1599;
        static final int TRANSACTION_getVcuAutoEasyLoadingSwitchStatus = 1986;
        static final int TRANSACTION_getVcuAvalibleDrivingDistance = 142;
        static final int TRANSACTION_getVcuAvalibleDrivingDistanceFloat = 1973;
        static final int TRANSACTION_getVcuAvgVehiclePowerConsume = 127;
        static final int TRANSACTION_getVcuBatBumpRecrdRequest = 1626;
        static final int TRANSACTION_getVcuBatteryCoolingState = 123;
        static final int TRANSACTION_getVcuBatteryCur = 638;
        static final int TRANSACTION_getVcuBatteryLevelPercent = 636;
        static final int TRANSACTION_getVcuBatteryMinTemperature = 137;
        static final int TRANSACTION_getVcuBatteryVolt = 637;
        static final int TRANSACTION_getVcuBatteryWarmingStatus = 125;
        static final int TRANSACTION_getVcuBatteryWastageStatus = 135;
        static final int TRANSACTION_getVcuBmsActualSocValue = 1835;
        static final int TRANSACTION_getVcuBmsBatteryAverageTemperature = 1804;
        static final int TRANSACTION_getVcuBmsBatteryCurrent = 1802;
        static final int TRANSACTION_getVcuBmsBatteryVoltage = 1803;
        static final int TRANSACTION_getVcuBmsChargeStatus = 1805;
        static final int TRANSACTION_getVcuBmsCurrentBatterySocDisp = 1854;
        static final int TRANSACTION_getVcuBmsMaximumAvailChargePower = 1836;
        static final int TRANSACTION_getVcuBmsMaximumAvailDischargePower = 1837;
        static final int TRANSACTION_getVcuBrakeLightOnOffStatus = 1627;
        static final int TRANSACTION_getVcuBreakPedalStatus = 651;
        static final int TRANSACTION_getVcuCarStationaryStatus = 1339;
        static final int TRANSACTION_getVcuCdcuChargeGunStatus = 1467;
        static final int TRANSACTION_getVcuChargeDischargePower = 1855;
        static final int TRANSACTION_getVcuChargeError = 791;
        static final int TRANSACTION_getVcuChargeHighVoltageLoadPower = 1858;
        static final int TRANSACTION_getVcuChargeMode = 134;
        static final int TRANSACTION_getVcuChargeRemainingTime = 126;
        static final int TRANSACTION_getVcuChargeSocQuantity = 625;
        static final int TRANSACTION_getVcuChargeSocQuantityFloat = 1476;
        static final int TRANSACTION_getVcuChargeStatus = 121;
        static final int TRANSACTION_getVcuChargerLowVolSt = 1954;
        static final int TRANSACTION_getVcuChargingPlugStatus = 120;
        static final int TRANSACTION_getVcuCltcAvailableDrivingDistance = 1426;
        static final int TRANSACTION_getVcuCltcAvailableDrivingDistanceFloat = 1632;
        static final int TRANSACTION_getVcuCruiseControlStatus = 1072;
        static final int TRANSACTION_getVcuDcChargeCur = 619;
        static final int TRANSACTION_getVcuDcChargeVolt = 620;
        static final int TRANSACTION_getVcuDcPreWarmInStatus = 1472;
        static final int TRANSACTION_getVcuDcPreWarmRequestStatus = 1471;
        static final int TRANSACTION_getVcuDcPreWarmSwitchStatus = 1469;
        static final int TRANSACTION_getVcuDepolarizeStatus = 1609;
        static final int TRANSACTION_getVcuDisCargeLimit = 622;
        static final int TRANSACTION_getVcuDischargeQuantity = 624;
        static final int TRANSACTION_getVcuDischargeQuantityFloat = 1475;
        static final int TRANSACTION_getVcuDriveMileIncreaseStatus = 1128;
        static final int TRANSACTION_getVcuDrivingMode = 138;
        static final int TRANSACTION_getVcuDynamicAvailableDrivingDistance = 1844;
        static final int TRANSACTION_getVcuEbsBatterySoc = 788;
        static final int TRANSACTION_getVcuElectricQuantityPercent = 122;
        static final int TRANSACTION_getVcuEnduranceMileageMode = 1157;
        static final int TRANSACTION_getVcuEnergyRecycleLevel = 140;
        static final int TRANSACTION_getVcuErhDebugInfo = 790;
        static final int TRANSACTION_getVcuEvErrLampDsp = 851;
        static final int TRANSACTION_getVcuEvErrMsgDsp = 852;
        static final int TRANSACTION_getVcuEvsysReadyState = 626;
        static final int TRANSACTION_getVcuExhibModeSwitchStatus = 1410;
        static final int TRANSACTION_getVcuExtremeFastChargingSt = 944;
        static final int TRANSACTION_getVcuGearState = 141;
        static final int TRANSACTION_getVcuKeyBatteryStatus = 1725;
        static final int TRANSACTION_getVcuLastHundredKmAverageVehConsume = 1976;
        static final int TRANSACTION_getVcuLastTwentyKmAverageVehConsume = 1975;
        static final int TRANSACTION_getVcuLastTwoPointFiveKmAverageVehConsume = 1974;
        static final int TRANSACTION_getVcuMotorPowerMode = 1395;
        static final int TRANSACTION_getVcuNGearWarningSwitchStatus = 999;
        static final int TRANSACTION_getVcuNedcAvalibleDrivingDistanceFloat = 1735;
        static final int TRANSACTION_getVcuObcAcCurrent = 1244;
        static final int TRANSACTION_getVcuObcAcVoltage = 1243;
        static final int TRANSACTION_getVcuObcAcVoltageStatus = 1245;
        static final int TRANSACTION_getVcuObcFaultPhaseLossStatus = 1431;
        static final int TRANSACTION_getVcuPowerResponseMode = 1393;
        static final int TRANSACTION_getVcuPureDriveModeFeedback = 787;
        static final int TRANSACTION_getVcuRawCarSpeed = 786;
        static final int TRANSACTION_getVcuRealGearLevel = 997;
        static final int TRANSACTION_getVcuResHeatManaTime = 616;
        static final int TRANSACTION_getVcuSecondaryPowerOffResponce = 1465;
        static final int TRANSACTION_getVcuSnowMode = 736;
        static final int TRANSACTION_getVcuSpecialDrivingMode = 1391;
        static final int TRANSACTION_getVcuSsaSwitchStatus = 1636;
        static final int TRANSACTION_getVcuStopChargeReason = 639;
        static final int TRANSACTION_getVcuSupDebugInfo = 789;
        static final int TRANSACTION_getVcuSuperChargeDiffIncreaseRange = 1951;
        static final int TRANSACTION_getVcuSuperChargeFlag = 1638;
        static final int TRANSACTION_getVcuTrailerModeSwitchStatus = 1447;
        static final int TRANSACTION_getVcuVehLast100mConsume = 678;
        static final int TRANSACTION_getVcuVirtualAccPedalStatus = 1589;
        static final int TRANSACTION_getVcuWltpAvailableDrivingDistance = 1158;
        static final int TRANSACTION_getVcuWltpAvailableDrivingDistanceFloat = 1631;
        static final int TRANSACTION_getVcuXPortIntellCalcCfg = 1719;
        static final int TRANSACTION_getVcuXPortIntellCalcCfg20Hz = 1720;
        static final int TRANSACTION_getVcuXPortIntellCalcCfg50Hz = 1721;
        static final int TRANSACTION_getVcuXpedalCtrlMode = 1717;
        static final int TRANSACTION_getVcuXpedalModeSwitchStatus = 1397;
        static final int TRANSACTION_getVcuXsportMode = 1807;
        static final int TRANSACTION_getVpmLdwLeftWarningStatus = 669;
        static final int TRANSACTION_getVpmLdwRightWarningStatus = 670;
        static final int TRANSACTION_getVpmRdpLeftWarningStatus = 1365;
        static final int TRANSACTION_getVpmRdpRightWarningStatus = 1366;
        static final int TRANSACTION_getWasherFluidWarning = 1097;
        static final int TRANSACTION_getWelcomeModeBackStatus = 112;
        static final int TRANSACTION_getWindowRemoteCtrlCfg = 477;
        static final int TRANSACTION_getXpilotStatus = 676;
        static final int TRANSACTION_getXpuApRemoteSw = 1443;
        static final int TRANSACTION_getXpuAsLockScenario = 1730;
        static final int TRANSACTION_getXpuAsTargetMaximumHeightRequest = 1749;
        static final int TRANSACTION_getXpuAsTargetMinimumHeightRequest = 1748;
        static final int TRANSACTION_getXpuAutoParkingTipsType = 1729;
        static final int TRANSACTION_getXpuBrightness = 1087;
        static final int TRANSACTION_getXpuCityNgpSwitchStatus = 1629;
        static final int TRANSACTION_getXpuConnectionStatus = 1033;
        static final int TRANSACTION_getXpuDriverHeadFaceArea = 1942;
        static final int TRANSACTION_getXpuHeadPoseData = 1672;
        static final int TRANSACTION_getXpuHmiDopRemind = 1673;
        static final int TRANSACTION_getXpuISLCDriverSet = 1685;
        static final int TRANSACTION_getXpuIntelligentChargePortSystemStatus = 1731;
        static final int TRANSACTION_getXpuIntelligentChargePortSystemToneType = 1728;
        static final int TRANSACTION_getXpuIntelligentChargePortTipsType = 1726;
        static final int TRANSACTION_getXpuIntelligentChargePortTtsBroadcastType = 1727;
        static final int TRANSACTION_getXpuLLCCDetourSw = 1948;
        static final int TRANSACTION_getXpuLatCtrlRemind = 677;
        static final int TRANSACTION_getXpuLccLStraightSw = 1978;
        static final int TRANSACTION_getXpuLongCtrlRemind = 675;
        static final int TRANSACTION_getXpuLongLatPeriodData = 1781;
        static final int TRANSACTION_getXpuLssSensitivitySwitchStatus = 1801;
        static final int TRANSACTION_getXpuModeIndexDefine = 1713;
        static final int TRANSACTION_getXpuNaviConfirmProto = 1981;
        static final int TRANSACTION_getXpuNedcSwitchStatus = 1155;
        static final int TRANSACTION_getXpuNgpCustomSpeedCountLever = 2161;
        static final int TRANSACTION_getXpuNgpCustomSpeedCountPercent = 2163;
        static final int TRANSACTION_getXpuNgpCustomSpeedSwitchStatus = 2159;
        static final int TRANSACTION_getXpuNgpModeIndexMode = 1712;
        static final int TRANSACTION_getXpuNgpOptimalLaneSw = 1683;
        static final int TRANSACTION_getXpuNgpSwitchTransitionStatus = 1669;
        static final int TRANSACTION_getXpuNgpULCSwMode = 1681;
        static final int TRANSACTION_getXpuNraControlStatus = 1612;
        static final int TRANSACTION_getXpuNraSwitchStatus = 1611;
        static final int TRANSACTION_getXpuRaebActiveStatus = 1604;
        static final int TRANSACTION_getXpuRaebSwitchStatus = 1546;
        static final int TRANSACTION_getXpuScpChargePortCommandStatus = 1733;
        static final int TRANSACTION_getXpuScpSwitchStatus = 1544;
        static final int TRANSACTION_getXpuSlaSpeedWarningStatus = 1732;
        static final int TRANSACTION_getXpuSlifSoundStatus = 1666;
        static final int TRANSACTION_getXpuSlwfVoiceStatus = 1668;
        static final int TRANSACTION_getXpuUpdateProgress = 1032;
        static final int TRANSACTION_getXpuUpdateResponse = 1029;
        static final int TRANSACTION_getXpuUpdateResult = 1031;
        static final int TRANSACTION_getXpuVehLocationProto = 1964;
        static final int TRANSACTION_getXpuXmartPigeonMode = 1737;
        static final int TRANSACTION_hasEspAvhFault = 739;
        static final int TRANSACTION_hasEspFault = 737;
        static final int TRANSACTION_hasEspHdcFault = 738;
        static final int TRANSACTION_hasRoofCamera = 228;
        static final int TRANSACTION_isAmpMute = 561;
        static final int TRANSACTION_isAmpStandByEnabled = 555;
        static final int TRANSACTION_isBcmBonnetOpened = 361;
        static final int TRANSACTION_isBcmDriverOnSeat = 634;
        static final int TRANSACTION_isBcmDrvAutoLockEnabled = 60;
        static final int TRANSACTION_isBcmElectricSeatBeltEnabled = 80;
        static final int TRANSACTION_isBcmEmergencyBrakeWarningEnabled = 49;
        static final int TRANSACTION_isBcmInternalLightOn = 47;
        static final int TRANSACTION_isBcmOutlineMarkerLampsOn = 44;
        static final int TRANSACTION_isBcmParkingAutoUnlockEnabled = 62;
        static final int TRANSACTION_isBcmRearFogLampOn = 38;
        static final int TRANSACTION_isBcmRearSeatBeltWarningEnabled = 82;
        static final int TRANSACTION_isDhcDoorknobAutoOpenEnabled = 609;
        static final int TRANSACTION_isEspAvhEnabled = 265;
        static final int TRANSACTION_isEspHdcEnabled = 261;
        static final int TRANSACTION_isMsbEnabled = 607;
        static final int TRANSACTION_isSrsBackBeltWarningEnabled = 612;
        static final int TRANSACTION_isSrsPsnOnSeat = 613;
        static final int TRANSACTION_isVcuBatteryCold = 679;
        static final int TRANSACTION_isVcuChargeSpeedSlow = 680;
        static final int TRANSACTION_isVcuParkingGearValid = 667;
        static final int TRANSACTION_notifyScuRearViewMirrorAdjustmentPageState = 1186;
        static final int TRANSACTION_openBcmBonnet = 360;
        static final int TRANSACTION_registerEpsListener = 1056;
        static final int TRANSACTION_registerScuListener = 902;
        static final int TRANSACTION_registerVcuListener = 1054;
        static final int TRANSACTION_requestIcmDashboardLightsStatus = 1370;
        static final int TRANSACTION_requestTBoxBandModemStatus = 398;
        static final int TRANSACTION_requestTBoxModemStatus = 395;
        static final int TRANSACTION_resetIcmMeterMileageA = 266;
        static final int TRANSACTION_resetIcmMeterMileageB = 267;
        static final int TRANSACTION_resetTbox = 1021;
        static final int TRANSACTION_saveMsmDAllPositionsToMcu = 1449;
        static final int TRANSACTION_saveMsmDriverAllPositionsToMcu = 889;
        static final int TRANSACTION_saveMsmPassengerAllPositionsToMcu = 1671;
        static final int TRANSACTION_sendBcmSeatBeltRequest = 1082;
        static final int TRANSACTION_sendCNGPCityMapCtrlReq = 1949;
        static final int TRANSACTION_sendCduVolumeToAmp = 1083;
        static final int TRANSACTION_sendChargeCompleteTimeToMcu = 1018;
        static final int TRANSACTION_sendContacts = 296;
        static final int TRANSACTION_sendDiagnoseMsgToMcu = 25;
        static final int TRANSACTION_sendDisplayTypeMsgToMcu = 18;
        static final int TRANSACTION_sendDugReqMsgToMcu = 17;
        static final int TRANSACTION_sendFinishCopyTboxLogRequest = 1773;
        static final int TRANSACTION_sendGpsInfoMsgToMcu = 28;
        static final int TRANSACTION_sendIcmLogCompressRequest = 1759;
        static final int TRANSACTION_sendIcmRandisDisplayType = 2165;
        static final int TRANSACTION_sendIcmUpdateRequest = 1073;
        static final int TRANSACTION_sendLCMSLogCtrlReq = 1940;
        static final int TRANSACTION_sendMcuBleAccountDataFeedback = 1090;
        static final int TRANSACTION_sendMcuBmsMsgToMcu = 20;
        static final int TRANSACTION_sendMcuGeofenceStatus = 1856;
        static final int TRANSACTION_sendMcuMapVersion = 1421;
        static final int TRANSACTION_sendMcuOpenWifiHotspotResponse = 1369;
        static final int TRANSACTION_sendMcuOtaUpdateFile = 1970;
        static final int TRANSACTION_sendMcuTboxVBusControlCommand = 1427;
        static final int TRANSACTION_sendOta1MsgToMcu = 21;
        static final int TRANSACTION_sendPhoneRemoteAPEvent = 1751;
        static final int TRANSACTION_sendPigeonAndXPURemoteAPHeartBeat = 1750;
        static final int TRANSACTION_sendPmSilentMsgToMcu = 19;
        static final int TRANSACTION_sendPsuOtaMsgToMcu = 22;
        static final int TRANSACTION_sendPwrDebugMsgToMcu = 16;
        static final int TRANSACTION_sendRCMSLogCtrlReq = 1941;
        static final int TRANSACTION_sendRequestWakeToMcu = 24;
        static final int TRANSACTION_sendReset4gMsgToMcu = 26;
        static final int TRANSACTION_sendResetModemMsgToMcu = 27;
        static final int TRANSACTION_sendRomBinMsg = 312;
        static final int TRANSACTION_sendRoutingForTboxRequest = 1767;
        static final int TRANSACTION_sendSRHeartBeatInfoRequest = 2029;
        static final int TRANSACTION_sendSRLagLogHeartBeatFeedBackRequest = 2031;
        static final int TRANSACTION_sendScuNaviLoadLinkType = 1441;
        static final int TRANSACTION_sendSecretKeyToMcu = 23;
        static final int TRANSACTION_sendStartCopyTboxLogRequest = 1771;
        static final int TRANSACTION_sendTboxApnTrafficInfo = 1997;
        static final int TRANSACTION_sendTboxBleAccountLoginFeedback = 1089;
        static final int TRANSACTION_sendTboxEmergencyWifiBleMessage = 1364;
        static final int TRANSACTION_sendTboxFactoryPreCert = 1439;
        static final int TRANSACTION_sendTboxGpsAntPowerControlReq = 972;
        static final int TRANSACTION_sendTboxGpsHwResetRequest = 1005;
        static final int TRANSACTION_sendTboxGpsMgaRequest = 1008;
        static final int TRANSACTION_sendTboxLocationInfo = 1120;
        static final int TRANSACTION_sendTboxModemCaptureRequest = 1769;
        static final int TRANSACTION_sendTboxMultiBleRenewalRequest = 1428;
        static final int TRANSACTION_sendTboxOtaWorkingStatus = 1943;
        static final int TRANSACTION_sendTboxRemoteDiagInfo = 348;
        static final int TRANSACTION_sendTboxRenewalPartsRequest = 1079;
        static final int TRANSACTION_sendTboxSoldierTick = 939;
        static final int TRANSACTION_sendTboxWakeOrderRTC = 1984;
        static final int TRANSACTION_sendTestMsgToMcu = 15;
        static final int TRANSACTION_sendUpgradingTboxByUdiskReq = 906;
        static final int TRANSACTION_sendXpuCountryCodeInfo = 1634;
        static final int TRANSACTION_sendXpuGeoFencingConfig = 1633;
        static final int TRANSACTION_sendXpuScpGeoInfo = 1868;
        static final int TRANSACTION_sendXpuTransferVpaAbInfo = 1606;
        static final int TRANSACTION_sendXpuTransferVpaCmd = 1605;
        static final int TRANSACTION_sendXpuUpdateRequest = 1028;
        static final int TRANSACTION_sendXpuZgEventMessage = 1820;
        static final int TRANSACTION_sendXpuZgPeriodMessage = 1821;
        static final int TRANSACTION_setAdasMapInfo = 598;
        static final int TRANSACTION_setAdasMeta = 250;
        static final int TRANSACTION_setAdasPosition = 251;
        static final int TRANSACTION_setAdasProfLong = 252;
        static final int TRANSACTION_setAdasProfShort = 253;
        static final int TRANSACTION_setAdasSegment = 254;
        static final int TRANSACTION_setAdasStub = 255;
        static final int TRANSACTION_setAllLightData = 382;
        static final int TRANSACTION_setAmpChannelSwitchControlStatus = 1593;
        static final int TRANSACTION_setAmpChannelVolAndSource = 650;
        static final int TRANSACTION_setAmpChannelVolumeControlValue = 1594;
        static final int TRANSACTION_setAmpCoolingRequestTemp = 539;
        static final int TRANSACTION_setAmpDolbyAtomsSwitchStatus = 1658;
        static final int TRANSACTION_setAmpDyn3DEffectLevel = 1663;
        static final int TRANSACTION_setAmpDynSdvcLevel = 1661;
        static final int TRANSACTION_setAmpEffectStatus = 1659;
        static final int TRANSACTION_setAmpFreqGainGroupControlValue = 1798;
        static final int TRANSACTION_setAmpGroupSwitchControlStatus = 1595;
        static final int TRANSACTION_setAmpGroupVolumeControlValue = 1596;
        static final int TRANSACTION_setAmpMusicScene = 552;
        static final int TRANSACTION_setAmpMusicStyle = 550;
        static final int TRANSACTION_setAmpMute = 560;
        static final int TRANSACTION_setAmpPowerRequestSwitchStatus = 1488;
        static final int TRANSACTION_setAmpSdsscLevel = 1793;
        static final int TRANSACTION_setAmpSoundFieldMode = 556;
        static final int TRANSACTION_setAmpSoundSourceDolbyFormat = 1795;
        static final int TRANSACTION_setAmpSoundStyle = 1796;
        static final int TRANSACTION_setAmpSoundTrackMode = 564;
        static final int TRANSACTION_setAmpStandByEnabled = 554;
        static final int TRANSACTION_setAmpTempRiseSpeedState = 540;
        static final int TRANSACTION_setAmpVolume = 562;
        static final int TRANSACTION_setAnalogSoundEffect = 358;
        static final int TRANSACTION_setAnalogSoundEnable = 359;
        static final int TRANSACTION_setApmAudioEffect = 558;
        static final int TRANSACTION_setArsFoldOrUnfold = 1962;
        static final int TRANSACTION_setArsInitState = 2004;
        static final int TRANSACTION_setArsWorkingMode = 1885;
        static final int TRANSACTION_setAtlConfiguration = 1205;
        static final int TRANSACTION_setAtlDowOpen = 402;
        static final int TRANSACTION_setAtlLin1Data = 2044;
        static final int TRANSACTION_setAtlLin2Data = 1522;
        static final int TRANSACTION_setAtlLin3Data = 1523;
        static final int TRANSACTION_setAtlOpen = 367;
        static final int TRANSACTION_setAtlPowerRequestSwitchStatus = 1490;
        static final int TRANSACTION_setAtlSwitchStatus = 1520;
        static final int TRANSACTION_setAudioBalanceFader = 342;
        static final int TRANSACTION_setAudioGEQParams = 341;
        static final int TRANSACTION_setAudioMode = 337;
        static final int TRANSACTION_setAudioParameters = 343;
        static final int TRANSACTION_setAutoBrightness = 376;
        static final int TRANSACTION_setAutoLightSwitch = 1119;
        static final int TRANSACTION_setAutoParkInState = 208;
        static final int TRANSACTION_setAutoParkOutState = 207;
        static final int TRANSACTION_setAutoParkReq = 586;
        static final int TRANSACTION_setAutoParkSwitch = 592;
        static final int TRANSACTION_setAutoPilotLocationInfo = 206;
        static final int TRANSACTION_setAutoWindowLockSw = 727;
        static final int TRANSACTION_setAvasAcChargingSoundSwitch = 423;
        static final int TRANSACTION_setAvasChargeSoundSwitchStatus = 1561;
        static final int TRANSACTION_setAvasDcChargingSoundSwitch = 425;
        static final int TRANSACTION_setAvasDisconnectChargingSoundSwitch = 427;
        static final int TRANSACTION_setAvasExternalSoundCmd = 433;
        static final int TRANSACTION_setAvasExternalSoundModeCmd = 443;
        static final int TRANSACTION_setAvasExternalVolume = 436;
        static final int TRANSACTION_setAvasFriendlySayHiSound = 434;
        static final int TRANSACTION_setAvasFullChargeWaitForWakeUpSoundSwitch = 419;
        static final int TRANSACTION_setAvasLockSoundEffect = 1567;
        static final int TRANSACTION_setAvasLockUnlockSoundSwitchStatus = 1559;
        static final int TRANSACTION_setAvasLowSpeedSoundEffect = 431;
        static final int TRANSACTION_setAvasLowSpeedSoundSwitch = 429;
        static final int TRANSACTION_setAvasLowSpeedVolume = 438;
        static final int TRANSACTION_setAvasPhotoSoundSwitch = 887;
        static final int TRANSACTION_setAvasSleepSoundSwitch = 421;
        static final int TRANSACTION_setAvasSocSoundSwitchStatus = 1563;
        static final int TRANSACTION_setAvasSocSoundVolumeToMcu = 1913;
        static final int TRANSACTION_setAvasUnlockSoundEffect = 1565;
        static final int TRANSACTION_setAvasWaitForWakeUpSoundSwitch = 417;
        static final int TRANSACTION_setAvm3603dAngle = 1971;
        static final int TRANSACTION_setAvmCalibrationMode = 542;
        static final int TRANSACTION_setAvmCameraAngle = 221;
        static final int TRANSACTION_setAvmCameraDisplayMode = 225;
        static final int TRANSACTION_setAvmFineTuneMode = 548;
        static final int TRANSACTION_setAvmMultipleDisplayProperties = 1020;
        static final int TRANSACTION_setAvmOverlayWorkSt = 544;
        static final int TRANSACTION_setAvmRoofCameraRaise = 223;
        static final int TRANSACTION_setAvmTransBodySwitchStatus = 1972;
        static final int TRANSACTION_setAvmTransparentChassisState = 546;
        static final int TRANSACTION_setBatteryKeepTempSwitch = 1115;
        static final int TRANSACTION_setBcmAllExteriorMirrorsPositions = 867;
        static final int TRANSACTION_setBcmAsCampingModeSwitchStatus = 1704;
        static final int TRANSACTION_setBcmAsDrivingMode = 1738;
        static final int TRANSACTION_setBcmAsLeopardModeSwitchStatus = 1817;
        static final int TRANSACTION_setBcmAsSpecialDrivingMode = 1739;
        static final int TRANSACTION_setBcmAsTrailerModeSwitchStatus = 1539;
        static final int TRANSACTION_setBcmAsVehicleMode = 1819;
        static final int TRANSACTION_setBcmAutoWindowCmd = 475;
        static final int TRANSACTION_setBcmAutoWindowsControl = 1183;
        static final int TRANSACTION_setBcmBackDefrostMode = 89;
        static final int TRANSACTION_setBcmBackDefrostMode_ = 88;
        static final int TRANSACTION_setBcmBackMirrorHeatMode = 92;
        static final int TRANSACTION_setBcmBackMirrorHeatMode_ = 91;
        static final int TRANSACTION_setBcmChairWelcomeMode = 78;
        static final int TRANSACTION_setBcmChargePortUnlock = 109;
        static final int TRANSACTION_setBcmChildLockCfg = 478;
        static final int TRANSACTION_setBcmColumnHorizonalMove = 1549;
        static final int TRANSACTION_setBcmColumnHorizonalPosition = 1574;
        static final int TRANSACTION_setBcmColumnPositionMove = 1603;
        static final int TRANSACTION_setBcmColumnPositionSaveToMcu = 1714;
        static final int TRANSACTION_setBcmColumnVerticalMove = 1548;
        static final int TRANSACTION_setBcmColumnVerticalPosition = 1573;
        static final int TRANSACTION_setBcmCustomerModeFlagSwitchStatus = 1640;
        static final int TRANSACTION_setBcmCwcSwitch = 1209;
        static final int TRANSACTION_setBcmDayLightMode = 495;
        static final int TRANSACTION_setBcmDomeLightBrightLevel = 1500;
        static final int TRANSACTION_setBcmDomeLightCfg = 499;
        static final int TRANSACTION_setBcmDomeLightModeStatus = 1498;
        static final int TRANSACTION_setBcmDoorLock = 64;
        static final int TRANSACTION_setBcmDrvAutoLockEnabled = 59;
        static final int TRANSACTION_setBcmEasyLoadingSwitch = 1406;
        static final int TRANSACTION_setBcmElectricSeatBeltEnabled = 79;
        static final int TRANSACTION_setBcmEmergencyBrakeWarning = 48;
        static final int TRANSACTION_setBcmEngineeringModeStatus = 1536;
        static final int TRANSACTION_setBcmFRCwcSwitch = 2007;
        static final int TRANSACTION_setBcmFollowMeHomeCfg = 1203;
        static final int TRANSACTION_setBcmFollowMeTime = 493;
        static final int TRANSACTION_setBcmFootKickSwitchStatus = 1510;
        static final int TRANSACTION_setBcmFrontLampMode = 40;
        static final int TRANSACTION_setBcmFrontLeftDomeLightSwitchStatus = 1502;
        static final int TRANSACTION_setBcmFrontMirrorHeatSwitchStatus = 1478;
        static final int TRANSACTION_setBcmFrontRightDomeLightSwitchStatus = 1504;
        static final int TRANSACTION_setBcmGroupLedBrigntness = 1790;
        static final int TRANSACTION_setBcmGroupLedColor = 1785;
        static final int TRANSACTION_setBcmGroupLedControlStatus = 1783;
        static final int TRANSACTION_setBcmGroupLedFadeTime = 1787;
        static final int TRANSACTION_setBcmGroupLedTemperature = 1788;
        static final int TRANSACTION_setBcmHandleAutoSwitch = 1402;
        static final int TRANSACTION_setBcmHazardLampsFlash = 63;
        static final int TRANSACTION_setBcmHeadLampLevelingReqValue = 1514;
        static final int TRANSACTION_setBcmHeightLvlConfigValue = 1398;
        static final int TRANSACTION_setBcmHighBeamMode = 635;
        static final int TRANSACTION_setBcmInternalLightOn = 46;
        static final int TRANSACTION_setBcmLeftChildLockSwitchStatus = 1484;
        static final int TRANSACTION_setBcmLeftMirrorCtrlCmd = 480;
        static final int TRANSACTION_setBcmLeftMirrorHorizPos = 482;
        static final int TRANSACTION_setBcmLeftMirrorMove = 864;
        static final int TRANSACTION_setBcmLeftMirrorVerticalPos = 486;
        static final int TRANSACTION_setBcmLeftSdcAutoOrManualControl = 1152;
        static final int TRANSACTION_setBcmLeftSdcDoorPosition = 1160;
        static final int TRANSACTION_setBcmLeftSdcSwitch = 970;
        static final int TRANSACTION_setBcmLeftSdcWindowsAutoDownSwitch = 1148;
        static final int TRANSACTION_setBcmLightMeHomeMode = 57;
        static final int TRANSACTION_setBcmLockAvasSwitchStatus = 1496;
        static final int TRANSACTION_setBcmLockHazardLightSwitchStatus = 1492;
        static final int TRANSACTION_setBcmLockHornSwitchStatus = 1494;
        static final int TRANSACTION_setBcmLowBeamOffConfirmSt = 2003;
        static final int TRANSACTION_setBcmMaintainModeSw = 1382;
        static final int TRANSACTION_setBcmMirrorAutoFoldSwitchStatus = 1824;
        static final int TRANSACTION_setBcmNfcCardEnabled = 473;
        static final int TRANSACTION_setBcmParkLightRelatedFMBLightConfig = 1034;
        static final int TRANSACTION_setBcmParkingAutoUnlockEnabled = 61;
        static final int TRANSACTION_setBcmPassengerSeatBlowLevel = 1532;
        static final int TRANSACTION_setBcmPollingOpenCfg = 824;
        static final int TRANSACTION_setBcmPsnSeatHeatLevel = 720;
        static final int TRANSACTION_setBcmRLCwcSwitch = 2143;
        static final int TRANSACTION_setBcmRRCwcSwitch = 2147;
        static final int TRANSACTION_setBcmRearFogLampOn = 39;
        static final int TRANSACTION_setBcmRearLeftDomeLightSwitchStatus = 1506;
        static final int TRANSACTION_setBcmRearLeftSeatHeatSw = 1121;
        static final int TRANSACTION_setBcmRearRightDomeLightSwitchStatus = 1508;
        static final int TRANSACTION_setBcmRearRightSeatHeatSw = 1123;
        static final int TRANSACTION_setBcmRearSeatBeltWarningEnabled = 81;
        static final int TRANSACTION_setBcmRearViewAutoDownCfg = 827;
        static final int TRANSACTION_setBcmRearViewMirrorPos = 45;
        static final int TRANSACTION_setBcmRearWiperServiceSwitchStatus = 1480;
        static final int TRANSACTION_setBcmReverseMirrorCfgCmd = 490;
        static final int TRANSACTION_setBcmRightChildLockSwitchStatus = 1486;
        static final int TRANSACTION_setBcmRightMirrorCtrlCmd = 481;
        static final int TRANSACTION_setBcmRightMirrorHorizPos = 484;
        static final int TRANSACTION_setBcmRightMirrorMove = 865;
        static final int TRANSACTION_setBcmRightMirrorVerticalPos = 488;
        static final int TRANSACTION_setBcmRightSdcAutoOrManualControl = 1153;
        static final int TRANSACTION_setBcmRightSdcDoorPosition = 1161;
        static final int TRANSACTION_setBcmRightSdcSwitch = 971;
        static final int TRANSACTION_setBcmRightSdcWindowsAutoDownSwitch = 1150;
        static final int TRANSACTION_setBcmSaberLightSw = 1375;
        static final int TRANSACTION_setBcmSdcBrakeCloseDoorCfg = 1779;
        static final int TRANSACTION_setBcmSdcKeyCloseCtrlCfg = 1138;
        static final int TRANSACTION_setBcmSdcKeyOpenCtrlCfg = 1136;
        static final int TRANSACTION_setBcmSdcMaxAutoDoorOpeningAngle = 1140;
        static final int TRANSACTION_setBcmSdcMode = 967;
        static final int TRANSACTION_setBcmSeatBlowLevel = 98;
        static final int TRANSACTION_setBcmSeatBlowLevel_ = 97;
        static final int TRANSACTION_setBcmSeatHeatLevel = 95;
        static final int TRANSACTION_setBcmSeatHeatLevel_ = 94;
        static final int TRANSACTION_setBcmSecRowSeatEasyEntrySwitchStatus = 1823;
        static final int TRANSACTION_setBcmShadeControllerComfortCommand = 1237;
        static final int TRANSACTION_setBcmShadeControllerInitialization = 1240;
        static final int TRANSACTION_setBcmShadeControllerPosition = 1238;
        static final int TRANSACTION_setBcmShcReq = 492;
        static final int TRANSACTION_setBcmSoftLvlConfigValue = 1400;
        static final int TRANSACTION_setBcmSteeringWheelHeatingStatus = 1482;
        static final int TRANSACTION_setBcmSuspenWelcomeSwitch = 1409;
        static final int TRANSACTION_setBcmSwsControlSceneStatus = 1630;
        static final int TRANSACTION_setBcmTargetAsHeightLvlConfigValue = 1904;
        static final int TRANSACTION_setBcmTrailerHitchSwitchStatus = 1529;
        static final int TRANSACTION_setBcmTrailerModeStatus = 1753;
        static final int TRANSACTION_setBcmTrailerModeSwitchStatus = 1715;
        static final int TRANSACTION_setBcmTransportModeSwitchStatus = 1538;
        static final int TRANSACTION_setBcmTrunkOpen = 67;
        static final int TRANSACTION_setBcmTrunkOpenRequestPosition = 1518;
        static final int TRANSACTION_setBcmTrunkSetPositionRequest = 1519;
        static final int TRANSACTION_setBcmTwcMode = 968;
        static final int TRANSACTION_setBcmTwcUpdownSwitch = 969;
        static final int TRANSACTION_setBcmUnlockResponseMode = 83;
        static final int TRANSACTION_setBcmWashCarModeSwitchStatus = 1513;
        static final int TRANSACTION_setBcmWindowLockState = 1608;
        static final int TRANSACTION_setBcmWindowMoveCmd = 472;
        static final int TRANSACTION_setBcmWindowMovePosition = 383;
        static final int TRANSACTION_setBcmWindowRemoteCtrlCfg = 476;
        static final int TRANSACTION_setBcmWindowsMovePositions = 966;
        static final int TRANSACTION_setBcmWiperInterval = 69;
        static final int TRANSACTION_setBcmWiperRainDetectSensitivity = 1023;
        static final int TRANSACTION_setBcmWiperServiceMode = 627;
        static final int TRANSACTION_setBcmX5dCinemaModeStatus = 1865;
        static final int TRANSACTION_setBcmXmeditationModeStatus = 1866;
        static final int TRANSACTION_setBcmXmovieModeStatus = 1864;
        static final int TRANSACTION_setBcmXsleepModeStatus = 1863;
        static final int TRANSACTION_setBlindAreaDetectionWarning = 205;
        static final int TRANSACTION_setBrightnessLevel = 378;
        static final int TRANSACTION_setBtMusicState = 302;
        static final int TRANSACTION_setBtPhoneCall = 892;
        static final int TRANSACTION_setCFChildLock = 2020;
        static final int TRANSACTION_setCFKeepTempSwitch = 2022;
        static final int TRANSACTION_setCFKeepTempTime = 2024;
        static final int TRANSACTION_setCFKeepTempTimeMemoryRequest = 2027;
        static final int TRANSACTION_setCFPowerSwitch = 2010;
        static final int TRANSACTION_setCFTempInc = 2014;
        static final int TRANSACTION_setCFTempValue = 2016;
        static final int TRANSACTION_setCFWorkMode = 2018;
        static final int TRANSACTION_setCarExhibitionModeVol = 334;
        static final int TRANSACTION_setCarFridgeDoorCtrl = 2012;
        static final int TRANSACTION_setCarpetLightWelcomeSw = 2034;
        static final int TRANSACTION_setCdcFunctionMode = 605;
        static final int TRANSACTION_setChairPositionEnd = 76;
        static final int TRANSACTION_setChairPositionStart = 75;
        static final int TRANSACTION_setChairSlowlyAhead = 70;
        static final int TRANSACTION_setChairSlowlyBack = 71;
        static final int TRANSACTION_setChairSlowlyEnd = 72;
        static final int TRANSACTION_setChargeAppointTime = 615;
        static final int TRANSACTION_setChargeGunUnlock = 614;
        static final int TRANSACTION_setCiuCarWash = 808;
        static final int TRANSACTION_setCiuConfigurationActive = 960;
        static final int TRANSACTION_setCiuDelayOff = 962;
        static final int TRANSACTION_setCiuDeleteFaceId = 752;
        static final int TRANSACTION_setCiuDeleteMulti = 761;
        static final int TRANSACTION_setCiuDeliveryUploadMode = 964;
        static final int TRANSACTION_setCiuDistractionStatus = 810;
        static final int TRANSACTION_setCiuDmsMode = 813;
        static final int TRANSACTION_setCiuDmsStatus = 741;
        static final int TRANSACTION_setCiuDvrLockMode = 767;
        static final int TRANSACTION_setCiuDvrMode = 765;
        static final int TRANSACTION_setCiuFaceActionRequest = 758;
        static final int TRANSACTION_setCiuFaceIdMode = 742;
        static final int TRANSACTION_setCiuFaceIdSwitch = 751;
        static final int TRANSACTION_setCiuFatigueStatus = 812;
        static final int TRANSACTION_setCiuFirmFaceCancel = 759;
        static final int TRANSACTION_setCiuFormatMode = 771;
        static final int TRANSACTION_setCiuPhotoProcess = 766;
        static final int TRANSACTION_setCiuRainSw = 805;
        static final int TRANSACTION_setCiuRegHint = 754;
        static final int TRANSACTION_setCiuRegisterRequestMulti = 760;
        static final int TRANSACTION_setCiuStartRegFlag = 756;
        static final int TRANSACTION_setCiuStartRegFlow = 755;
        static final int TRANSACTION_setCiuUid = 744;
        static final int TRANSACTION_setCiuVideoOutputMode = 768;
        static final int TRANSACTION_setCmsAllExteriorMirrorsPositions = 1946;
        static final int TRANSACTION_setCutLinePreventSw = 568;
        static final int TRANSACTION_setDhcDoorknobAutoOpenEnabled = 608;
        static final int TRANSACTION_setDoorOpenWarning = 574;
        static final int TRANSACTION_setDoubleThemeColor = 371;
        static final int TRANSACTION_setDrivingMode = 13;
        static final int TRANSACTION_setDvrEnable = 957;
        static final int TRANSACTION_setEpsWorkMode = 258;
        static final int TRANSACTION_setEspAvhEnabled = 264;
        static final int TRANSACTION_setEspBpfStatus = 1848;
        static final int TRANSACTION_setEspCstStatus = 1847;
        static final int TRANSACTION_setEspEpbSystemSwitch = 1444;
        static final int TRANSACTION_setEspHdcEnabled = 260;
        static final int TRANSACTION_setEspIbsBrakeMode = 362;
        static final int TRANSACTION_setEspOffRoadSwitch = 1404;
        static final int TRANSACTION_setEspTsmSwitchStatus = 1542;
        static final int TRANSACTION_setEspWorkMode = 262;
        static final int TRANSACTION_setFCTempDec = 2015;
        static final int TRANSACTION_setFaceIdModeState = 951;
        static final int TRANSACTION_setFactoryOledData = 107;
        static final int TRANSACTION_setFactoryOledDisplayMode = 108;
        static final int TRANSACTION_setFarLampAutoSwitch = 566;
        static final int TRANSACTION_setFatigueDetectionSw = 576;
        static final int TRANSACTION_setFmVolume = 333;
        static final int TRANSACTION_setFrontCollisionSecurity = 204;
        static final int TRANSACTION_setGpsPollingType = 1006;
        static final int TRANSACTION_setGpsReset = 713;
        static final int TRANSACTION_setGroutLightData = 381;
        static final int TRANSACTION_setHavacSfsChannel = 1265;
        static final int TRANSACTION_setHighSpeedNavigation = 584;
        static final int TRANSACTION_setHvacAcEnabled = 159;
        static final int TRANSACTION_setHvacAirCirculationPeriod = 532;
        static final int TRANSACTION_setHvacAirCycleMode = 163;
        static final int TRANSACTION_setHvacAirDistributionMode = 535;
        static final int TRANSACTION_setHvacAirPurgeEnabed = 160;
        static final int TRANSACTION_setHvacAqsEnabled = 520;
        static final int TRANSACTION_setHvacAqsSensitivity = 522;
        static final int TRANSACTION_setHvacAutoDefogSwitch = 1273;
        static final int TRANSACTION_setHvacAutoModeEnabled = 165;
        static final int TRANSACTION_setHvacAutoModePreference = 164;
        static final int TRANSACTION_setHvacDefrostMode = 162;
        static final int TRANSACTION_setHvacDeodorizeSwitch = 1267;
        static final int TRANSACTION_setHvacDrvLeftFanHorPos = 504;
        static final int TRANSACTION_setHvacDrvLeftFanVerPos = 506;
        static final int TRANSACTION_setHvacDrvRightFanHorPos = 508;
        static final int TRANSACTION_setHvacDrvRightFanVerPos = 510;
        static final int TRANSACTION_setHvacDrvSeatTempDec = 387;
        static final int TRANSACTION_setHvacDrvSeatTempDown = 158;
        static final int TRANSACTION_setHvacDrvSeatTempInc = 386;
        static final int TRANSACTION_setHvacDrvSeatTempUp = 157;
        static final int TRANSACTION_setHvacDrvSeatTempValue = 156;
        static final int TRANSACTION_setHvacEavDrvWindMode = 528;
        static final int TRANSACTION_setHvacEavPsnWindMode = 530;
        static final int TRANSACTION_setHvacEconEnabled = 526;
        static final int TRANSACTION_setHvacFanPosition = 151;
        static final int TRANSACTION_setHvacFanSpeedDec = 385;
        static final int TRANSACTION_setHvacFanSpeedDown = 150;
        static final int TRANSACTION_setHvacFanSpeedInc = 384;
        static final int TRANSACTION_setHvacFanSpeedLevel = 149;
        static final int TRANSACTION_setHvacFanSpeedUp = 148;
        static final int TRANSACTION_setHvacMachineStateSwitch = 1982;
        static final int TRANSACTION_setHvacNewFreshSwitchStatus = 1944;
        static final int TRANSACTION_setHvacPowerEnabled = 161;
        static final int TRANSACTION_setHvacPsnLeftFanHorPos = 512;
        static final int TRANSACTION_setHvacPsnLeftFanVerPos = 514;
        static final int TRANSACTION_setHvacPsnRightFanHorPos = 516;
        static final int TRANSACTION_setHvacPsnRightFanVerPos = 518;
        static final int TRANSACTION_setHvacPsnSeatTempDec = 389;
        static final int TRANSACTION_setHvacPsnSeatTempDown = 155;
        static final int TRANSACTION_setHvacPsnSeatTempInc = 388;
        static final int TRANSACTION_setHvacPsnSeatTempUp = 154;
        static final int TRANSACTION_setHvacPsnSeatTempValue = 153;
        static final int TRANSACTION_setHvacRearAutoModeEnabled = 1923;
        static final int TRANSACTION_setHvacRearFanSpeedDec = 1928;
        static final int TRANSACTION_setHvacRearFanSpeedInc = 1927;
        static final int TRANSACTION_setHvacRearFanSpeedLevel = 1929;
        static final int TRANSACTION_setHvacRearWindLessSwitch = 1965;
        static final int TRANSACTION_setHvacSecRowLeftTempDec = 1916;
        static final int TRANSACTION_setHvacSecRowLeftTempInc = 1915;
        static final int TRANSACTION_setHvacSecRowRightTempDec = 1918;
        static final int TRANSACTION_setHvacSecRowRightTempInc = 1917;
        static final int TRANSACTION_setHvacSelfDrySwStatus = 881;
        static final int TRANSACTION_setHvacSfsChannelResetRequest = 1535;
        static final int TRANSACTION_setHvacSfsConcentration = 1343;
        static final int TRANSACTION_setHvacSfsSwitch = 1262;
        static final int TRANSACTION_setHvacSfsTypeMode = 1534;
        static final int TRANSACTION_setHvacSweepWindStatus = 524;
        static final int TRANSACTION_setHvacTempLeftSyncEnabled = 152;
        static final int TRANSACTION_setHvacTempPtcStatus = 822;
        static final int TRANSACTION_setHvacTempRightSyncEnabled = 502;
        static final int TRANSACTION_setHvacTempSecRowLeftValue = 1919;
        static final int TRANSACTION_setHvacTempSecRowRightValue = 1921;
        static final int TRANSACTION_setHvacTempThirdRowtValue = 1933;
        static final int TRANSACTION_setHvacThirdRowTempDec = 1932;
        static final int TRANSACTION_setHvacThirdRowTempInc = 1931;
        static final int TRANSACTION_setHvacThirdRowWindBlowMode = 1936;
        static final int TRANSACTION_setHvacWarpSpeedCoolingSwitch = 1271;
        static final int TRANSACTION_setHvacWarpSpeedWarmingSwitch = 1269;
        static final int TRANSACTION_setIcmAccount = 313;
        static final int TRANSACTION_setIcmAlarmVolume = 268;
        static final int TRANSACTION_setIcmAllCardsRefresh = 705;
        static final int TRANSACTION_setIcmBrightness = 722;
        static final int TRANSACTION_setIcmCarSetting = 707;
        static final int TRANSACTION_setIcmDayNightMode = 1171;
        static final int TRANSACTION_setIcmDayNightSwitch = 283;
        static final int TRANSACTION_setIcmDistractionLevel = 833;
        static final int TRANSACTION_setIcmDmsMode = 831;
        static final int TRANSACTION_setIcmDriverTempValue = 293;
        static final int TRANSACTION_setIcmFaceInfo = 1011;
        static final int TRANSACTION_setIcmFatigueLevel = 832;
        static final int TRANSACTION_setIcmInfoCardAdd = 702;
        static final int TRANSACTION_setIcmInfoCardRemove = 704;
        static final int TRANSACTION_setIcmInfoCardUpdate = 703;
        static final int TRANSACTION_setIcmInfoFlowMsg = 706;
        static final int TRANSACTION_setIcmLeftCard = 1372;
        static final int TRANSACTION_setIcmMediaSource = 277;
        static final int TRANSACTION_setIcmModeInfoArray = 1762;
        static final int TRANSACTION_setIcmMusicInfo = 904;
        static final int TRANSACTION_setIcmMusicPlaybackTimeInfo = 905;
        static final int TRANSACTION_setIcmNavigation = 281;
        static final int TRANSACTION_setIcmNavigationBmp = 711;
        static final int TRANSACTION_setIcmNavigationInfo = 712;
        static final int TRANSACTION_setIcmOsdShow = 701;
        static final int TRANSACTION_setIcmRadioType = 1010;
        static final int TRANSACTION_setIcmRightCard = 1373;
        static final int TRANSACTION_setIcmScreenLight = 279;
        static final int TRANSACTION_setIcmSoundThemeType = 1857;
        static final int TRANSACTION_setIcmSyncSignal = 700;
        static final int TRANSACTION_setIcmSyncTime = 710;
        static final int TRANSACTION_setIcmSystemTimeValue = 303;
        static final int TRANSACTION_setIcmTemperature = 271;
        static final int TRANSACTION_setIcmTimeFormat = 270;
        static final int TRANSACTION_setIcmUpdateFileTransferStatus = 1075;
        static final int TRANSACTION_setIcmUserScenarioExitDialog = 1891;
        static final int TRANSACTION_setIcmUserScenarioInfo = 1890;
        static final int TRANSACTION_setIcmWeather = 708;
        static final int TRANSACTION_setIcmWheelkey = 709;
        static final int TRANSACTION_setIcmWindBlowMode = 289;
        static final int TRANSACTION_setIcmWindLevel = 291;
        static final int TRANSACTION_setIcmWindMode = 275;
        static final int TRANSACTION_setIcmWindPower = 273;
        static final int TRANSACTION_setIcmWiperRainDetectSensitivity = 1696;
        static final int TRANSACTION_setIgHeartBeat = 4;
        static final int TRANSACTION_setImsAutoVisionSw = 2134;
        static final int TRANSACTION_setImsBrightLevel = 2136;
        static final int TRANSACTION_setImsModeReq = 2132;
        static final int TRANSACTION_setImsVisionCtrl = 2138;
        static final int TRANSACTION_setIntelligentCallButton = 589;
        static final int TRANSACTION_setIntelligentSpeedLimit = 203;
        static final int TRANSACTION_setKeyRemoteParkType = 587;
        static final int TRANSACTION_setKeyRemoteSMButton = 596;
        static final int TRANSACTION_setLCMSAutoBrightSw = 1869;
        static final int TRANSACTION_setLCMSBright = 1871;
        static final int TRANSACTION_setLCMSBrightWithStoreflag = 1960;
        static final int TRANSACTION_setLCMSDanObjectRecSw = 1877;
        static final int TRANSACTION_setLCMSHighSpeedViewSw = 1873;
        static final int TRANSACTION_setLCMSLowSpeedViewSw = 1875;
        static final int TRANSACTION_setLCMSReverseAssitSw = 1879;
        static final int TRANSACTION_setLCMSTurnExtSw = 1881;
        static final int TRANSACTION_setLCMSViewRecovery = 1883;
        static final int TRANSACTION_setLRCMSAllExteriorMirrorsPositions = 1956;
        static final int TRANSACTION_setLRCMSViewAngle = 1958;
        static final int TRANSACTION_setLaneAlignmentAssist = 582;
        static final int TRANSACTION_setLaneChangeAssist = 202;
        static final int TRANSACTION_setLaneDepartureWarning = 201;
        static final int TRANSACTION_setLaneSupportSystemStateAndWarning = 1999;
        static final int TRANSACTION_setLeavePollingLockSw = 729;
        static final int TRANSACTION_setLeftSlideDoorCtrl = 1989;
        static final int TRANSACTION_setLeftSlideDoorMode = 2125;
        static final int TRANSACTION_setLluAcChargeMode = 661;
        static final int TRANSACTION_setLluAndroidLlSt = 1381;
        static final int TRANSACTION_setLluBreathMode = 440;
        static final int TRANSACTION_setLluChargingSwitch = 412;
        static final int TRANSACTION_setLluCurrentFunction = 869;
        static final int TRANSACTION_setLluDcChargeMode = 663;
        static final int TRANSACTION_setLluEnableStatus = 404;
        static final int TRANSACTION_setLluFindCarSwitch = 975;
        static final int TRANSACTION_setLluLockSocDspSwitch = 883;
        static final int TRANSACTION_setLluLockUnlockSocDspSwitch = 977;
        static final int TRANSACTION_setLluPersonAngle = 983;
        static final int TRANSACTION_setLluPersonWalkDirection = 984;
        static final int TRANSACTION_setLluPhotoMode = 665;
        static final int TRANSACTION_setLluPhotoSwitch = 414;
        static final int TRANSACTION_setLluPowerRequestSwitchStatus = 1459;
        static final int TRANSACTION_setLluPrivateCtrl = 416;
        static final int TRANSACTION_setLluScriptData = 956;
        static final int TRANSACTION_setLluScriptParameter = 955;
        static final int TRANSACTION_setLluScriptStRequest = 953;
        static final int TRANSACTION_setLluSelfActive = 846;
        static final int TRANSACTION_setLluShowOffMode = 657;
        static final int TRANSACTION_setLluShowOffSwitch = 408;
        static final int TRANSACTION_setLluSleepMode = 659;
        static final int TRANSACTION_setLluSleepSwitch = 410;
        static final int TRANSACTION_setLluSpeedLimitCfg = 981;
        static final int TRANSACTION_setLluUnLockSocDspSwitch = 885;
        static final int TRANSACTION_setLluWakeWaitMode = 655;
        static final int TRANSACTION_setLluWakeWaitSwitch = 406;
        static final int TRANSACTION_setLocationInfo = 200;
        static final int TRANSACTION_setMcuAndroidOtaStatus = 974;
        static final int TRANSACTION_setMcuAutoPowerOffSw = 1000;
        static final int TRANSACTION_setMcuChairWelcomeMode = 891;
        static final int TRANSACTION_setMcuDelaySleep = 1088;
        static final int TRANSACTION_setMcuDvTempSamplingPeriod = 880;
        static final int TRANSACTION_setMcuDvTestReq = 879;
        static final int TRANSACTION_setMcuFaceIdSw = 949;
        static final int TRANSACTION_setMcuFactoryModeSwitch = 1338;
        static final int TRANSACTION_setMcuFlash = 12;
        static final int TRANSACTION_setMcuHorn = 11;
        static final int TRANSACTION_setMcuHornsStates = 1017;
        static final int TRANSACTION_setMcuIgOff = 3;
        static final int TRANSACTION_setMcuIgOn = 2;
        static final int TRANSACTION_setMcuIsWakeUpByPhone = 7;
        static final int TRANSACTION_setMcuLLuSelfControlData = 1222;
        static final int TRANSACTION_setMcuLluChargingSwitch = 993;
        static final int TRANSACTION_setMcuLluEnableStatus = 985;
        static final int TRANSACTION_setMcuLluModeCtrl = 1221;
        static final int TRANSACTION_setMcuLluPhotoSwitch = 995;
        static final int TRANSACTION_setMcuLluShowOffSwitch = 989;
        static final int TRANSACTION_setMcuLluSleepSwitch = 991;
        static final int TRANSACTION_setMcuLluWakeWaitSwitch = 987;
        static final int TRANSACTION_setMcuMonitorSwitch = 1039;
        static final int TRANSACTION_setMcuPowerOffCountdownAction = 1002;
        static final int TRANSACTION_setMcuPsuTestReq = 873;
        static final int TRANSACTION_setMcuRemoteControlFeedback = 900;
        static final int TRANSACTION_setMcuRepairMode = 845;
        static final int TRANSACTION_setMcuRtcTime = 30;
        static final int TRANSACTION_setMcuRvcEnable = 1591;
        static final int TRANSACTION_setMcuRvcState = 1166;
        static final int TRANSACTION_setMcuRvcVersion = 1592;
        static final int TRANSACTION_setMcuSocRespDTCInfo = 1850;
        static final int TRANSACTION_setMcuTimeZone = 32;
        static final int TRANSACTION_setMcuTrunkPowerOffDelay = 1225;
        static final int TRANSACTION_setMcuTrunkPowerSw = 1223;
        static final int TRANSACTION_setMcuUpdateReqStatus = 690;
        static final int TRANSACTION_setMeterBackLightLevel = 309;
        static final int TRANSACTION_setMeterSoundState = 295;
        static final int TRANSACTION_setMqttLogInfo = 9;
        static final int TRANSACTION_setMsbEnabled = 606;
        static final int TRANSACTION_setMsmDriverAllPositions = 866;
        static final int TRANSACTION_setMsmDriverAllPositionsToLDCU = 1851;
        static final int TRANSACTION_setMsmDriverSeatCushTiltPos = 1451;
        static final int TRANSACTION_setMsmDriverSeatCushTiltPosition = 1540;
        static final int TRANSACTION_setMsmDriverSeatLegHorzPosition = 1892;
        static final int TRANSACTION_setMsmDriverSeatLumbControlSwitchEnable = 1952;
        static final int TRANSACTION_setMsmDriverSeatMassgElem = 1674;
        static final int TRANSACTION_setMsmDriverSeatMassgIntensity = 1643;
        static final int TRANSACTION_setMsmDriverSeatMassgProgMode = 1641;
        static final int TRANSACTION_setMsmDriverSeatPositionMemoryRequest = 1830;
        static final int TRANSACTION_setMsmDriverSeatTiltLevelOff = 1450;
        static final int TRANSACTION_setMsmDriverWelcomeActive = 1906;
        static final int TRANSACTION_setMsmDrvLegVertiMove = 447;
        static final int TRANSACTION_setMsmDrvLumbHorzMove = 448;
        static final int TRANSACTION_setMsmDrvLumbVertiMove = 449;
        static final int TRANSACTION_setMsmDrvSeatBackMove = 445;
        static final int TRANSACTION_setMsmDrvSeatBackPosition = 454;
        static final int TRANSACTION_setMsmDrvSeatHorizMove = 444;
        static final int TRANSACTION_setMsmDrvSeatHorizPosition = 450;
        static final int TRANSACTION_setMsmDrvSeatLegPosition = 456;
        static final int TRANSACTION_setMsmDrvSeatVertiMove = 446;
        static final int TRANSACTION_setMsmDrvSeatVertiPosition = 452;
        static final int TRANSACTION_setMsmPassengerAllPositions = 1287;
        static final int TRANSACTION_setMsmPassengerAllPositionsToLDCU = 1300;
        static final int TRANSACTION_setMsmPassengerSeatBackPosition = 1279;
        static final int TRANSACTION_setMsmPassengerSeatCushExt = 1452;
        static final int TRANSACTION_setMsmPassengerSeatCushExtPosition = 1541;
        static final int TRANSACTION_setMsmPassengerSeatHorizontalPosition = 1275;
        static final int TRANSACTION_setMsmPassengerSeatLegHorzPosition = 1893;
        static final int TRANSACTION_setMsmPassengerSeatLumbControlSwitchEnable = 1953;
        static final int TRANSACTION_setMsmPassengerSeatLumbHorzPos = 1616;
        static final int TRANSACTION_setMsmPassengerSeatLumbVerticalPos = 1615;
        static final int TRANSACTION_setMsmPassengerSeatMassgElem = 1675;
        static final int TRANSACTION_setMsmPassengerSeatMassgIntensity = 1647;
        static final int TRANSACTION_setMsmPassengerSeatMassgProgMode = 1645;
        static final int TRANSACTION_setMsmPassengerSeatTitlLevelOff = 1511;
        static final int TRANSACTION_setMsmPassengerSeatVerticalPosition = 1277;
        static final int TRANSACTION_setMsmPassengerWelcomeActive = 1907;
        static final int TRANSACTION_setMsmPassengerWelcomeSwitch = 1601;
        static final int TRANSACTION_setMsmPsnSeatBackMove = 463;
        static final int TRANSACTION_setMsmPsnSeatHorizMove = 462;
        static final int TRANSACTION_setMsmPsnSeatVertiMove = 464;
        static final int TRANSACTION_setMsmSecRowLeftSeatAllPos = 1694;
        static final int TRANSACTION_setMsmSecRowLeftSeatCushExtPosition = 1619;
        static final int TRANSACTION_setMsmSecRowLeftSeatCushExtReq = 1617;
        static final int TRANSACTION_setMsmSecRowLeftSeatLegHorzPosReq = 1896;
        static final int TRANSACTION_setMsmSecRowLeftSeatLegHorzPosition = 1898;
        static final int TRANSACTION_setMsmSecRowLeftSeatMassgElem = 1676;
        static final int TRANSACTION_setMsmSecRowLeftSeatMassgIntensity = 1651;
        static final int TRANSACTION_setMsmSecRowLeftSeatMassgProgMode = 1649;
        static final int TRANSACTION_setMsmSecRowRightSeatAllPos = 1695;
        static final int TRANSACTION_setMsmSecRowRightSeatCushExtPosition = 1621;
        static final int TRANSACTION_setMsmSecRowRightSeatCushExtReq = 1618;
        static final int TRANSACTION_setMsmSecRowRightSeatLegHorzPosReq = 1897;
        static final int TRANSACTION_setMsmSecRowRightSeatLegHorzPosition = 1900;
        static final int TRANSACTION_setMsmSecRowRightSeatMassgElem = 1677;
        static final int TRANSACTION_setMsmSecRowRightSeatMassgIntensity = 1655;
        static final int TRANSACTION_setMsmSecRowRightSeatMassgProgMode = 1653;
        static final int TRANSACTION_setMsmSecrowLeftSeatUnlockReq = 1624;
        static final int TRANSACTION_setMsmSecrowLtSeatSTopMoveReq = 1455;
        static final int TRANSACTION_setMsmSecrowLtSeatTiltPosition = 1613;
        static final int TRANSACTION_setMsmSecrowLtSeatTiltReq = 1453;
        static final int TRANSACTION_setMsmSecrowLtSeatUnfoldReq = 1454;
        static final int TRANSACTION_setMsmSecrowRTSeatUnfoldReq = 1458;
        static final int TRANSACTION_setMsmSecrowRightSeatUnlockReq = 1623;
        static final int TRANSACTION_setMsmSecrowRtSeatSTopMoveReq = 1457;
        static final int TRANSACTION_setMsmSecrowRtSeatTiltPosition = 1614;
        static final int TRANSACTION_setMsmSecrowRtSeatTiltReq = 1456;
        static final int TRANSACTION_setMsmdAllPositions = 1448;
        static final int TRANSACTION_setMsmtLeftSeatFoldReq = 2080;
        static final int TRANSACTION_setMsmtRightSeatFoldReq = 2082;
        static final int TRANSACTION_setMsmtSeatStowReq = 2084;
        static final int TRANSACTION_setMultipleDmsStatus = 848;
        static final int TRANSACTION_setMusicInfo = 299;
        static final int TRANSACTION_setNavigationInfo = 298;
        static final int TRANSACTION_setNearPollingUnLockSw = 731;
        static final int TRANSACTION_setNetRadioInfo = 300;
        static final int TRANSACTION_setNetWorkType = 687;
        static final int TRANSACTION_setNotifyCiuAutoLightStatus = 959;
        static final int TRANSACTION_setNotifyMessage = 314;
        static final int TRANSACTION_setOtaMcuReqUpdatefile = 692;
        static final int TRANSACTION_setOtaMcuSendUpdatefile = 693;
        static final int TRANSACTION_setParkLotChoseIndex2Scu = 199;
        static final int TRANSACTION_setParkLotRecvIndex2Scu = 198;
        static final int TRANSACTION_setPhoneAPButton = 197;
        static final int TRANSACTION_setPhoneParkType = 594;
        static final int TRANSACTION_setPhoneSMButton = 196;
        static final int TRANSACTION_setPollingWelcomeSW = 2036;
        static final int TRANSACTION_setPowerOffTunner = 324;
        static final int TRANSACTION_setPowerOnTunner = 323;
        static final int TRANSACTION_setRadarWarningVoiceStatus = 195;
        static final int TRANSACTION_setRadioBand = 329;
        static final int TRANSACTION_setRadioFrequency = 335;
        static final int TRANSACTION_setRadioInfo = 301;
        static final int TRANSACTION_setRadioSearchStationDown = 326;
        static final int TRANSACTION_setRadioSearchStationUp = 325;
        static final int TRANSACTION_setRadioVolumeAutoFocus = 331;
        static final int TRANSACTION_setRadioVolumePercent = 330;
        static final int TRANSACTION_setRearCollisionSecurity = 572;
        static final int TRANSACTION_setRearCrossEmergencyWarning = 570;
        static final int TRANSACTION_setRearHvacAirDistributionMode = 1859;
        static final int TRANSACTION_setRearHvacFanPosition = 1860;
        static final int TRANSACTION_setRearHvacPowerEnabled = 1935;
        static final int TRANSACTION_setRearLogLight = 1996;
        static final int TRANSACTION_setRemoteDiagCaptureResponse = 350;
        static final int TRANSACTION_setRightSlideDoorCtrl = 1993;
        static final int TRANSACTION_setRightSlideDoorMode = 2126;
        static final int TRANSACTION_setScuAssLineChanged = 817;
        static final int TRANSACTION_setScuCommonHomeSlotID = 1043;
        static final int TRANSACTION_setScuCurrentElectronicEyeSpeedLimitAndDistance = 1357;
        static final int TRANSACTION_setScuCurrentRoadSpeedLimit = 1256;
        static final int TRANSACTION_setScuDetailRoadClass = 946;
        static final int TRANSACTION_setScuDistractionSwitch = 1129;
        static final int TRANSACTION_setScuDmsMode = 819;
        static final int TRANSACTION_setScuDsmStatus = 1437;
        static final int TRANSACTION_setScuElkSwitch = 1259;
        static final int TRANSACTION_setScuEventInfoRD = 1734;
        static final int TRANSACTION_setScuFreeParking1Data = 1044;
        static final int TRANSACTION_setScuFreeParking2Data = 1045;
        static final int TRANSACTION_setScuFsdSwitch = 1167;
        static final int TRANSACTION_setScuIntelligentSpeedLimitValue = 1416;
        static final int TRANSACTION_setScuKeyPark = 776;
        static final int TRANSACTION_setScuLdwLkaSwitchStatus = 1355;
        static final int TRANSACTION_setScuLocalWeather = 785;
        static final int TRANSACTION_setScuNaviDangerAreaRDInfo = 1670;
        static final int TRANSACTION_setScuNaviRoadConnectAttrib = 1581;
        static final int TRANSACTION_setScuNgpAvoidTruckSw = 1217;
        static final int TRANSACTION_setScuNgpDriverConfirmLaneChangeSw = 1218;
        static final int TRANSACTION_setScuNgpLaneChangeMode = 1219;
        static final int TRANSACTION_setScuNgpOperationButton = 1195;
        static final int TRANSACTION_setScuNgpPreferFastLaneSw = 1216;
        static final int TRANSACTION_setScuNgpRemindMode = 1220;
        static final int TRANSACTION_setScuNgpTipsWindowsSw = 1199;
        static final int TRANSACTION_setScuOtaTagStatus = 1253;
        static final int TRANSACTION_setScuParkByMemorySw = 1349;
        static final int TRANSACTION_setScuParkingGroundState = 1299;
        static final int TRANSACTION_setScuPhoneSmMode = 774;
        static final int TRANSACTION_setScuRoadAttr = 816;
        static final int TRANSACTION_setScuRoadAttribType = 1411;
        static final int TRANSACTION_setScuRoadAttributes = 945;
        static final int TRANSACTION_setScuSeatBeltReq = 820;
        static final int TRANSACTION_setScuSlaAlarmSwitch = 1162;
        static final int TRANSACTION_setScuSpeedLimitDriverConfirmSwitch = 1412;
        static final int TRANSACTION_setScuSpeedLimitRange = 1413;
        static final int TRANSACTION_setScuSpeedLimitSwitchState = 1415;
        static final int TRANSACTION_setScuSsLeftSystemStatus = 1248;
        static final int TRANSACTION_setScuSsRightSystemStatus = 1249;
        static final int TRANSACTION_setScuTest = 194;
        static final int TRANSACTION_setScuVoiceLaneChangeCommand = 1346;
        static final int TRANSACTION_setSecRowLeftAngleMove = 2056;
        static final int TRANSACTION_setSecRowLeftBlowLevel = 2045;
        static final int TRANSACTION_setSecRowLeftHeadHorizMove = 2059;
        static final int TRANSACTION_setSecRowLeftHeadVertiMove = 2058;
        static final int TRANSACTION_setSecRowLeftHorizMove = 2055;
        static final int TRANSACTION_setSecRowLeftLegVertiMove = 2057;
        static final int TRANSACTION_setSecRowLeftSeatEasyEntryReq = 2076;
        static final int TRANSACTION_setSecRowLeftSeatLumbHorzMove = 2071;
        static final int TRANSACTION_setSecRowLeftSeatLumbVertiMove = 2070;
        static final int TRANSACTION_setSecRowLeftSeatPos = 2049;
        static final int TRANSACTION_setSecRowLeftSeatZeroGravReq = 2074;
        static final int TRANSACTION_setSecRowLtSeatAnglePos = 2092;
        static final int TRANSACTION_setSecRowLtSeatHeadHorzPos = 2098;
        static final int TRANSACTION_setSecRowLtSeatHeadVerticalPos = 2096;
        static final int TRANSACTION_setSecRowLtSeatHorzPos = 2090;
        static final int TRANSACTION_setSecRowLtSeatLegVerticalPos = 2094;
        static final int TRANSACTION_setSecRowRightBlowLevel = 2047;
        static final int TRANSACTION_setSecRowRightHeadHorizMove = 2064;
        static final int TRANSACTION_setSecRowRightHeadVertiMove = 2063;
        static final int TRANSACTION_setSecRowRightHorizMove = 2060;
        static final int TRANSACTION_setSecRowRightLegVertiMove = 2062;
        static final int TRANSACTION_setSecRowRightSeatEasyEntryReq = 2077;
        static final int TRANSACTION_setSecRowRightSeatLumbHorzMove = 2073;
        static final int TRANSACTION_setSecRowRightSeatLumbVertiMove = 2072;
        static final int TRANSACTION_setSecRowRightSeatPos = 2051;
        static final int TRANSACTION_setSecRowRightSeatZeroGravReq = 2075;
        static final int TRANSACTION_setSecRowRighttAngleMove = 2061;
        static final int TRANSACTION_setSecRowRtSeatAnglePos = 2102;
        static final int TRANSACTION_setSecRowRtSeatHeadHorzPos = 2108;
        static final int TRANSACTION_setSecRowRtSeatHeadVerticalPos = 2106;
        static final int TRANSACTION_setSecRowRtSeatHorzPos = 2100;
        static final int TRANSACTION_setSecRowRtSeatLegVerticalPos = 2104;
        static final int TRANSACTION_setSfmAnglePos = 2042;
        static final int TRANSACTION_setSfmCtrl = 2040;
        static final int TRANSACTION_setSideReversingWarning = 193;
        static final int TRANSACTION_setSocCoolingRequestTemp = 538;
        static final int TRANSACTION_setSpdLimitWarnType = 580;
        static final int TRANSACTION_setSpeechStateInfo = 310;
        static final int TRANSACTION_setSpeedLimitWarningSwitch = 285;
        static final int TRANSACTION_setSpeedLimitWarningValue = 287;
        static final int TRANSACTION_setSpeedUpChargeSwitch = 1117;
        static final int TRANSACTION_setSrsBackBeltWarningEnabled = 611;
        static final int TRANSACTION_setSrsPassengerCrashOccurSw = 1368;
        static final int TRANSACTION_setStartFullBandScan = 327;
        static final int TRANSACTION_setStealthMode = 733;
        static final int TRANSACTION_setStopFullBandScan = 328;
        static final int TRANSACTION_setSuperParkMode = 192;
        static final int TRANSACTION_setTBoxBandModem = 400;
        static final int TRANSACTION_setTBoxChargeLimitValue = 365;
        static final int TRANSACTION_setTboxAutoPowerOffConfig = 925;
        static final int TRANSACTION_setTboxBatteryKeepTempAppointTime = 1174;
        static final int TRANSACTION_setTboxBatteryKeepTempSwitch = 1172;
        static final int TRANSACTION_setTboxCameraRemoteControlFeedback = 901;
        static final int TRANSACTION_setTboxCanControlMsg = 803;
        static final int TRANSACTION_setTboxCancelPowerOffConfig = 927;
        static final int TRANSACTION_setTboxChargeGunLock = 847;
        static final int TRANSACTION_setTboxDvTempSamplingPeriod = 871;
        static final int TRANSACTION_setTboxDvTestReq = 870;
        static final int TRANSACTION_setTboxGpsDebugSwitch = 1007;
        static final int TRANSACTION_setTboxGpsLogSwitch = 1207;
        static final int TRANSACTION_setTboxPsuMsg = 715;
        static final int TRANSACTION_setTboxRepairMode = 1048;
        static final int TRANSACTION_setTboxSoldierSw = 935;
        static final int TRANSACTION_setTboxSoliderCameraSwitch = 1059;
        static final int TRANSACTION_setTboxThresholdSwitch = 1061;
        static final int TRANSACTION_setTboxUpgradePrepareRequest = 1358;
        static final int TRANSACTION_setTboxVersionInfoRequest = 696;
        static final int TRANSACTION_setTboxWifiGatewayInfo = 347;
        static final int TRANSACTION_setTboxWifiStatus = 346;
        static final int TRANSACTION_setTheftHeartBeatOff = 6;
        static final int TRANSACTION_setTheftHeartBeatOn = 5;
        static final int TRANSACTION_setThemeFirstColor = 372;
        static final int TRANSACTION_setThemeSecondColor = 374;
        static final int TRANSACTION_setTrafficSignRecognition = 578;
        static final int TRANSACTION_setTrdLeftDomeLightSwitchStatus = 2154;
        static final int TRANSACTION_setTrdRightDomeLightSwitchStatus = 2156;
        static final int TRANSACTION_setTrdRowLeftHeadVertiMove = 2066;
        static final int TRANSACTION_setTrdRowLeftSeatTiltMove = 2065;
        static final int TRANSACTION_setTrdRowLtSeatHeadVerticalPos = 2112;
        static final int TRANSACTION_setTrdRowLtSeatTiltPos = 2110;
        static final int TRANSACTION_setTrdRowMidHeadVertiMove = 2127;
        static final int TRANSACTION_setTrdRowMidSeatHeadVerticalPos = 2118;
        static final int TRANSACTION_setTrdRowMiddleSeatTiltMove = 2069;
        static final int TRANSACTION_setTrdRowRightHeadVertiMove = 2068;
        static final int TRANSACTION_setTrdRowRightSeatTiltMove = 2067;
        static final int TRANSACTION_setTrdRowRtSeatHeadVerticalPos = 2116;
        static final int TRANSACTION_setTrdRowRtSeatTiltPos = 2114;
        static final int TRANSACTION_setTrdRowSeatAllPos = 2053;
        static final int TRANSACTION_setTwoLightData = 380;
        static final int TRANSACTION_setVCUAWDModeSw = 2032;
        static final int TRANSACTION_setVMCRwsSwitch = 2120;
        static final int TRANSACTION_setVMCZWalkModeSwitch = 2122;
        static final int TRANSACTION_setVcuAcChargCurrentMaxLimitedValue = 2088;
        static final int TRANSACTION_setVcuAutoEasyLoadingSwitchStatus = 1985;
        static final int TRANSACTION_setVcuBatBumpRecrdStatus = 1625;
        static final int TRANSACTION_setVcuBestCharge = 796;
        static final int TRANSACTION_setVcuBrakeLightOn = 640;
        static final int TRANSACTION_setVcuCdcuChargeGunCommand = 1466;
        static final int TRANSACTION_setVcuChargeLimit = 798;
        static final int TRANSACTION_setVcuChargeMode = 119;
        static final int TRANSACTION_setVcuChargerLowVolDiag = 1955;
        static final int TRANSACTION_setVcuDcPreWarmRequestStatus = 1470;
        static final int TRANSACTION_setVcuDcPreWarmSwitchStatus = 1468;
        static final int TRANSACTION_setVcuDisChargeEnabled = 623;
        static final int TRANSACTION_setVcuDisChargeLimit = 621;
        static final int TRANSACTION_setVcuDriveMileIncreaseSwitch = 1127;
        static final int TRANSACTION_setVcuEnduranceMileageMode = 1156;
        static final int TRANSACTION_setVcuEnergyRecycleLevel = 139;
        static final int TRANSACTION_setVcuExtremeFastChargingMode = 943;
        static final int TRANSACTION_setVcuFullyCharge = 797;
        static final int TRANSACTION_setVcuMotorPowerMode = 1394;
        static final int TRANSACTION_setVcuNGearWarningSwitch = 998;
        static final int TRANSACTION_setVcuNaviDestInfo = 1553;
        static final int TRANSACTION_setVcuNaviDestType = 1554;
        static final int TRANSACTION_setVcuNaviKValue = 1558;
        static final int TRANSACTION_setVcuNaviPathId = 1556;
        static final int TRANSACTION_setVcuNaviRemainDistance = 1555;
        static final int TRANSACTION_setVcuNaviRemainTime = 1577;
        static final int TRANSACTION_setVcuNaviType = 1557;
        static final int TRANSACTION_setVcuPGearLimOffSwitchStatus = 1637;
        static final int TRANSACTION_setVcuPowerResponseMode = 1392;
        static final int TRANSACTION_setVcuSecondaryPowerOffRequest = 1464;
        static final int TRANSACTION_setVcuSnowMode = 735;
        static final int TRANSACTION_setVcuSpecialCarbinModeSwitch = 1463;
        static final int TRANSACTION_setVcuSpecialDrivingMode = 1390;
        static final int TRANSACTION_setVcuSsaSwitchStatus = 1635;
        static final int TRANSACTION_setVcuTrailerModeSwitchStatus = 1446;
        static final int TRANSACTION_setVcuXPortIntellCalcCfg = 1718;
        static final int TRANSACTION_setVcuXpedalCtrlMode = 1716;
        static final int TRANSACTION_setVcuXpedalModeSwitchStatus = 1396;
        static final int TRANSACTION_setVcuXsportMode = 1806;
        static final int TRANSACTION_setVentilate = 111;
        static final int TRANSACTION_setWeatherInfo = 297;
        static final int TRANSACTION_setWiperRainDetectSensitivityAndInactive = 2166;
        static final int TRANSACTION_setXpuAdasTopSpeedLimitedValue = 1792;
        static final int TRANSACTION_setXpuApRemoteSw = 1442;
        static final int TRANSACTION_setXpuCduBrightness = 1086;
        static final int TRANSACTION_setXpuCityNgpSwitchStatus = 1628;
        static final int TRANSACTION_setXpuEffectiveSpeedLimitType = 1755;
        static final int TRANSACTION_setXpuElectricEyeSpeedDistance = 1746;
        static final int TRANSACTION_setXpuElectricEyeSpeedLimit = 1745;
        static final int TRANSACTION_setXpuISLCDriverSet = 1684;
        static final int TRANSACTION_setXpuLLCCDetourSw = 1947;
        static final int TRANSACTION_setXpuLccLStraightSw = 1977;
        static final int TRANSACTION_setXpuLightChange = 1053;
        static final int TRANSACTION_setXpuLssSensitivitySwitchStatus = 1800;
        static final int TRANSACTION_setXpuMetaCountryCode = 1747;
        static final int TRANSACTION_setXpuMetaSpeedUnits = 1754;
        static final int TRANSACTION_setXpuNaviRemainingDistance = 1979;
        static final int TRANSACTION_setXpuNaviTypeStatus = 1602;
        static final int TRANSACTION_setXpuNedcSwitch = 1052;
        static final int TRANSACTION_setXpuNgpCustomSpeedCountLever = 2160;
        static final int TRANSACTION_setXpuNgpCustomSpeedCountPercent = 2162;
        static final int TRANSACTION_setXpuNgpCustomSpeedSwitchStatus = 2158;
        static final int TRANSACTION_setXpuNgpOptimalLaneSw = 1682;
        static final int TRANSACTION_setXpuNgpULCSwMode = 1680;
        static final int TRANSACTION_setXpuNraSwitchStatus = 1610;
        static final int TRANSACTION_setXpuRadarEmissionSwitchStatus = 1867;
        static final int TRANSACTION_setXpuRaebSwitchStatus = 1545;
        static final int TRANSACTION_setXpuScpSwitchStatus = 1543;
        static final int TRANSACTION_setXpuSlifSoundStatus = 1665;
        static final int TRANSACTION_setXpuSlwfVoiceStatus = 1667;
        static final int TRANSACTION_setXpuUpdateFileTransferStatus = 1030;
        static final int TRANSACTION_startCharge = 113;
        static final int TRANSACTION_startTboxCertInstall = 842;
        static final int TRANSACTION_startTboxCertVerify = 843;
        static final int TRANSACTION_startTboxOTA = 697;
        static final int TRANSACTION_startTboxSlowCharge = 923;
        static final int TRANSACTION_startTboxUpgrading4G = 895;
        static final int TRANSACTION_startTboxUpgradingTmcu = 893;
        static final int TRANSACTION_startVcuCharge = 793;
        static final int TRANSACTION_stopCharge = 366;
        static final int TRANSACTION_stopMsmDriverSeatMoving = 1350;
        static final int TRANSACTION_stopMsmPassengerSeatMoving = 1351;
        static final int TRANSACTION_stopSecRowLeftSeatMoving = 2086;
        static final int TRANSACTION_stopSecRowRightSeatMoving = 2087;
        static final int TRANSACTION_stopTboxOTA = 353;
        static final int TRANSACTION_stopTboxSlowCharge = 924;
        static final int TRANSACTION_stopVcuAcCharge = 794;
        static final int TRANSACTION_stopVcuDcCharge = 795;
        static final int TRANSACTION_unregisterEpsListener = 1057;
        static final int TRANSACTION_unregisterScuListener = 903;
        static final int TRANSACTION_unregisterVcuListener = 1055;
        static final int TRANSACTION_updateMcuBin = 29;

        public static IXpVehicle getDefaultImpl() {
            return Proxy.sDefaultImpl;
        }

        private boolean onTransact$SetFcwAebSensitivitySwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            SetFcwAebSensitivitySwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$deactivateAndroidLluControl$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            deactivateAndroidLluControl();
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$getAllSrsCrashOutputStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] allSrsCrashOutputStatus = getAllSrsCrashOutputStatus();
            parcel2.writeNoException();
            parcel2.writeIntArray(allSrsCrashOutputStatus);
            return true;
        }

        private boolean onTransact$getAmpA2BLinkStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int ampA2BLinkStatus = getAmpA2BLinkStatus();
            parcel2.writeNoException();
            parcel2.writeInt(ampA2BLinkStatus);
            return true;
        }

        private boolean onTransact$getAmpDyn3DEffectLevel$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int ampDyn3DEffectLevel = getAmpDyn3DEffectLevel();
            parcel2.writeNoException();
            parcel2.writeInt(ampDyn3DEffectLevel);
            return true;
        }

        private boolean onTransact$getAmpDynSdvcLevel$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int ampDynSdvcLevel = getAmpDynSdvcLevel();
            parcel2.writeNoException();
            parcel2.writeInt(ampDynSdvcLevel);
            return true;
        }

        private boolean onTransact$getAmpEffectStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int ampEffectStatus = getAmpEffectStatus();
            parcel2.writeNoException();
            parcel2.writeInt(ampEffectStatus);
            return true;
        }

        private boolean onTransact$getAmpFreqGainGroupControlValue$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] ampFreqGainGroupControlValue = getAmpFreqGainGroupControlValue();
            parcel2.writeNoException();
            parcel2.writeIntArray(ampFreqGainGroupControlValue);
            return true;
        }

        private boolean onTransact$getAmpPowerRequestSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int ampPowerRequestSwitchStatus = getAmpPowerRequestSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(ampPowerRequestSwitchStatus);
            return true;
        }

        private boolean onTransact$getAmpSdsscLevel$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int ampSdsscLevel = getAmpSdsscLevel();
            parcel2.writeNoException();
            parcel2.writeInt(ampSdsscLevel);
            return true;
        }

        private boolean onTransact$getAmpSoundSourceDolbyFormat$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int ampSoundSourceDolbyFormat = getAmpSoundSourceDolbyFormat();
            parcel2.writeNoException();
            parcel2.writeInt(ampSoundSourceDolbyFormat);
            return true;
        }

        private boolean onTransact$getAmpSoundStyle$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int ampSoundStyle = getAmpSoundStyle();
            parcel2.writeNoException();
            parcel2.writeInt(ampSoundStyle);
            return true;
        }

        private boolean onTransact$getArsFaultState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int arsFaultState = getArsFaultState();
            parcel2.writeNoException();
            parcel2.writeInt(arsFaultState);
            return true;
        }

        private boolean onTransact$getArsInitState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int arsInitState = getArsInitState();
            parcel2.writeNoException();
            parcel2.writeInt(arsInitState);
            return true;
        }

        private boolean onTransact$getArsPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int arsPosition = getArsPosition();
            parcel2.writeNoException();
            parcel2.writeInt(arsPosition);
            return true;
        }

        private boolean onTransact$getArsWorkingMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int arsWorkingMode = getArsWorkingMode();
            parcel2.writeNoException();
            parcel2.writeInt(arsWorkingMode);
            return true;
        }

        private boolean onTransact$getArsWorkingState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int arsWorkingState = getArsWorkingState();
            parcel2.writeNoException();
            parcel2.writeInt(arsWorkingState);
            return true;
        }

        private boolean onTransact$getAtlLrPowerRequestSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] atlLrPowerRequestSwitchStatus = getAtlLrPowerRequestSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeIntArray(atlLrPowerRequestSwitchStatus);
            return true;
        }

        private boolean onTransact$getAtlSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int atlSwitchStatus = getAtlSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(atlSwitchStatus);
            return true;
        }

        private boolean onTransact$getAvasChargeSoundSpeedVolume$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int avasChargeSoundSpeedVolume = getAvasChargeSoundSpeedVolume();
            parcel2.writeNoException();
            parcel2.writeInt(avasChargeSoundSpeedVolume);
            return true;
        }

        private boolean onTransact$getAvasChargeSoundSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int avasChargeSoundSwitchStatus = getAvasChargeSoundSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(avasChargeSoundSwitchStatus);
            return true;
        }

        private boolean onTransact$getAvasLockSoundEffect$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int avasLockSoundEffect = getAvasLockSoundEffect();
            parcel2.writeNoException();
            parcel2.writeInt(avasLockSoundEffect);
            return true;
        }

        private boolean onTransact$getAvasLockUnlockSoundSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int avasLockUnlockSoundSwitchStatus = getAvasLockUnlockSoundSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(avasLockUnlockSoundSwitchStatus);
            return true;
        }

        private boolean onTransact$getAvasMcuAvasRunnningStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int avasMcuAvasRunnningStatus = getAvasMcuAvasRunnningStatus();
            parcel2.writeNoException();
            parcel2.writeInt(avasMcuAvasRunnningStatus);
            return true;
        }

        private boolean onTransact$getAvasSocSoundSpeedVolume$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int avasSocSoundSpeedVolume = getAvasSocSoundSpeedVolume();
            parcel2.writeNoException();
            parcel2.writeInt(avasSocSoundSpeedVolume);
            return true;
        }

        private boolean onTransact$getAvasSocSoundSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int avasSocSoundSwitchStatus = getAvasSocSoundSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(avasSocSoundSwitchStatus);
            return true;
        }

        private boolean onTransact$getAvasUnlockSoundEffect$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int avasUnlockSoundEffect = getAvasUnlockSoundEffect();
            parcel2.writeNoException();
            parcel2.writeInt(avasUnlockSoundEffect);
            return true;
        }

        private boolean onTransact$getAvasUnlockSoundSpeedVolume$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int avasUnlockSoundSpeedVolume = getAvasUnlockSoundSpeedVolume();
            parcel2.writeNoException();
            parcel2.writeInt(avasUnlockSoundSpeedVolume);
            return true;
        }

        private boolean onTransact$getAvm3603dAngle$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int avm3603dAngle = getAvm3603dAngle();
            parcel2.writeNoException();
            parcel2.writeInt(avm3603dAngle);
            return true;
        }

        private boolean onTransact$getAvmTransBodySwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int avmTransBodySwitchStatus = getAvmTransBodySwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(avmTransBodySwitchStatus);
            return true;
        }

        private boolean onTransact$getBattOutWaterTempature$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float battOutWaterTempature = getBattOutWaterTempature();
            parcel2.writeNoException();
            parcel2.writeFloat(battOutWaterTempature);
            return true;
        }

        private boolean onTransact$getBatteryKeepTempMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int batteryKeepTempMode = getBatteryKeepTempMode();
            parcel2.writeNoException();
            parcel2.writeInt(batteryKeepTempMode);
            return true;
        }

        private boolean onTransact$getBcmActualAsHeightLvlConfigValue$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmActualAsHeightLvlConfigValue = getBcmActualAsHeightLvlConfigValue();
            parcel2.writeNoException();
            parcel2.writeInt(bcmActualAsHeightLvlConfigValue);
            return true;
        }

        private boolean onTransact$getBcmAllWindowsActionFeedbackStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] bcmAllWindowsActionFeedbackStatus = getBcmAllWindowsActionFeedbackStatus();
            parcel2.writeNoException();
            parcel2.writeIntArray(bcmAllWindowsActionFeedbackStatus);
            return true;
        }

        private boolean onTransact$getBcmAsAcceleratedSpeed$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float[] bcmAsAcceleratedSpeed = getBcmAsAcceleratedSpeed();
            parcel2.writeNoException();
            parcel2.writeFloatArray(bcmAsAcceleratedSpeed);
            return true;
        }

        private boolean onTransact$getBcmAsAutoLevelingResult$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmAsAutoLevelingResult = getBcmAsAutoLevelingResult();
            parcel2.writeNoException();
            parcel2.writeInt(bcmAsAutoLevelingResult);
            return true;
        }

        private boolean onTransact$getBcmAsAutoLevelingResultValue$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmAsAutoLevelingResultValue = getBcmAsAutoLevelingResultValue();
            parcel2.writeNoException();
            parcel2.writeInt(bcmAsAutoLevelingResultValue);
            return true;
        }

        private boolean onTransact$getBcmAsCampingModeSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmAsCampingModeSwitchStatus = getBcmAsCampingModeSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmAsCampingModeSwitchStatus);
            return true;
        }

        private boolean onTransact$getBcmAsDrivingMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmAsDrivingMode = getBcmAsDrivingMode();
            parcel2.writeNoException();
            parcel2.writeInt(bcmAsDrivingMode);
            return true;
        }

        private boolean onTransact$getBcmAsEspPataRequestStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmAsEspPataRequestStatus = getBcmAsEspPataRequestStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmAsEspPataRequestStatus);
            return true;
        }

        private boolean onTransact$getBcmAsHeightChangingStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmAsHeightChangingStatus = getBcmAsHeightChangingStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmAsHeightChangingStatus);
            return true;
        }

        private boolean onTransact$getBcmAsLeopardModeSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmAsLeopardModeSwitchStatus = getBcmAsLeopardModeSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmAsLeopardModeSwitchStatus);
            return true;
        }

        private boolean onTransact$getBcmAsLockModeStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmAsLockModeStatus = getBcmAsLockModeStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmAsLockModeStatus);
            return true;
        }

        private boolean onTransact$getBcmAsModeAllowedCampingStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmAsModeAllowedCampingStatus = getBcmAsModeAllowedCampingStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmAsModeAllowedCampingStatus);
            return true;
        }

        private boolean onTransact$getBcmAsRedLampRequest$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmAsRedLampRequest = getBcmAsRedLampRequest();
            parcel2.writeNoException();
            parcel2.writeInt(bcmAsRedLampRequest);
            return true;
        }

        private boolean onTransact$getBcmAsTargetHeight$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmAsTargetHeight = getBcmAsTargetHeight();
            parcel2.writeNoException();
            parcel2.writeInt(bcmAsTargetHeight);
            return true;
        }

        private boolean onTransact$getBcmAsWelcomeModeStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmAsWelcomeModeStatus = getBcmAsWelcomeModeStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmAsWelcomeModeStatus);
            return true;
        }

        private boolean onTransact$getBcmAsWheelPositionHeightAll$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] bcmAsWheelPositionHeightAll = getBcmAsWheelPositionHeightAll();
            parcel2.writeNoException();
            parcel2.writeIntArray(bcmAsWheelPositionHeightAll);
            return true;
        }

        private boolean onTransact$getBcmAsYellowLampRequest$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmAsYellowLampRequest = getBcmAsYellowLampRequest();
            parcel2.writeNoException();
            parcel2.writeInt(bcmAsYellowLampRequest);
            return true;
        }

        private boolean onTransact$getBcmBonnetStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmBonnetStatus = getBcmBonnetStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmBonnetStatus);
            return true;
        }

        private boolean onTransact$getBcmBreakPedalStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmBreakPedalStatus = getBcmBreakPedalStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmBreakPedalStatus);
            return true;
        }

        private boolean onTransact$getBcmColumnHorizonalPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmColumnHorizonalPosition = getBcmColumnHorizonalPosition();
            parcel2.writeNoException();
            parcel2.writeInt(bcmColumnHorizonalPosition);
            return true;
        }

        private boolean onTransact$getBcmColumnVerticalPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmColumnVerticalPosition = getBcmColumnVerticalPosition();
            parcel2.writeNoException();
            parcel2.writeInt(bcmColumnVerticalPosition);
            return true;
        }

        private boolean onTransact$getBcmCoverPlateStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmCoverPlateStatus = getBcmCoverPlateStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmCoverPlateStatus);
            return true;
        }

        private boolean onTransact$getBcmCwcSwitchState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmCwcSwitchState = getBcmCwcSwitchState();
            parcel2.writeNoException();
            parcel2.writeInt(bcmCwcSwitchState);
            return true;
        }

        private boolean onTransact$getBcmDaytimeRunningLightsOutputStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] bcmDaytimeRunningLightsOutputStatus = getBcmDaytimeRunningLightsOutputStatus();
            parcel2.writeNoException();
            parcel2.writeIntArray(bcmDaytimeRunningLightsOutputStatus);
            return true;
        }

        private boolean onTransact$getBcmDomeLightBrightLevel$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmDomeLightBrightLevel = getBcmDomeLightBrightLevel();
            parcel2.writeNoException();
            parcel2.writeInt(bcmDomeLightBrightLevel);
            return true;
        }

        private boolean onTransact$getBcmDomeLightModeStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmDomeLightModeStatus = getBcmDomeLightModeStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmDomeLightModeStatus);
            return true;
        }

        private boolean onTransact$getBcmEasyLoadingState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmEasyLoadingState = getBcmEasyLoadingState();
            parcel2.writeNoException();
            parcel2.writeInt(bcmEasyLoadingState);
            return true;
        }

        private boolean onTransact$getBcmEngineeringModeStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmEngineeringModeStatus = getBcmEngineeringModeStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmEngineeringModeStatus);
            return true;
        }

        private boolean onTransact$getBcmEnvironmentMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmEnvironmentMode = getBcmEnvironmentMode();
            parcel2.writeNoException();
            parcel2.writeInt(bcmEnvironmentMode);
            return true;
        }

        private boolean onTransact$getBcmFRCwcSwitchState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmFRCwcSwitchState = getBcmFRCwcSwitchState();
            parcel2.writeNoException();
            parcel2.writeInt(bcmFRCwcSwitchState);
            return true;
        }

        private boolean onTransact$getBcmFWiperMotorErr$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmFWiperMotorErr = getBcmFWiperMotorErr();
            parcel2.writeNoException();
            parcel2.writeInt(bcmFWiperMotorErr);
            return true;
        }

        private boolean onTransact$getBcmFollowMeHomeCfg$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmFollowMeHomeCfg = getBcmFollowMeHomeCfg();
            parcel2.writeNoException();
            parcel2.writeInt(bcmFollowMeHomeCfg);
            return true;
        }

        private boolean onTransact$getBcmFootKickSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmFootKickSwitchStatus = getBcmFootKickSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmFootKickSwitchStatus);
            return true;
        }

        private boolean onTransact$getBcmFrontLeftDomeLightSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmFrontLeftDomeLightSwitchStatus = getBcmFrontLeftDomeLightSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmFrontLeftDomeLightSwitchStatus);
            return true;
        }

        private boolean onTransact$getBcmFrontMirrorHeatSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmFrontMirrorHeatSwitchStatus = getBcmFrontMirrorHeatSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmFrontMirrorHeatSwitchStatus);
            return true;
        }

        private boolean onTransact$getBcmFrontRightDomeLightSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmFrontRightDomeLightSwitchStatus = getBcmFrontRightDomeLightSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmFrontRightDomeLightSwitchStatus);
            return true;
        }

        private boolean onTransact$getBcmFrontWiperActiveStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmFrontWiperActiveStatus = getBcmFrontWiperActiveStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmFrontWiperActiveStatus);
            return true;
        }

        private boolean onTransact$getBcmGroupLedBrigntness$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] bcmGroupLedBrigntness = getBcmGroupLedBrigntness();
            parcel2.writeNoException();
            parcel2.writeIntArray(bcmGroupLedBrigntness);
            return true;
        }

        private boolean onTransact$getBcmGroupLedColor$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] bcmGroupLedColor = getBcmGroupLedColor();
            parcel2.writeNoException();
            parcel2.writeIntArray(bcmGroupLedColor);
            return true;
        }

        private boolean onTransact$getBcmGroupLedControlStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] bcmGroupLedControlStatus = getBcmGroupLedControlStatus();
            parcel2.writeNoException();
            parcel2.writeIntArray(bcmGroupLedControlStatus);
            return true;
        }

        private boolean onTransact$getBcmGroupLedTemperature$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] bcmGroupLedTemperature = getBcmGroupLedTemperature();
            parcel2.writeNoException();
            parcel2.writeIntArray(bcmGroupLedTemperature);
            return true;
        }

        private boolean onTransact$getBcmHandleAutoState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmHandleAutoState = getBcmHandleAutoState();
            parcel2.writeNoException();
            parcel2.writeInt(bcmHandleAutoState);
            return true;
        }

        private boolean onTransact$getBcmHeadLampCtrlLevel$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmHeadLampCtrlLevel = getBcmHeadLampCtrlLevel();
            parcel2.writeNoException();
            parcel2.writeInt(bcmHeadLampCtrlLevel);
            return true;
        }

        private boolean onTransact$getBcmHeadLampLevelingCtrlMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmHeadLampLevelingCtrlMode = getBcmHeadLampLevelingCtrlMode();
            parcel2.writeNoException();
            parcel2.writeInt(bcmHeadLampLevelingCtrlMode);
            return true;
        }

        private boolean onTransact$getBcmHeadLampLevelingReqValue$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmHeadLampLevelingReqValue = getBcmHeadLampLevelingReqValue();
            parcel2.writeNoException();
            parcel2.writeInt(bcmHeadLampLevelingReqValue);
            return true;
        }

        private boolean onTransact$getBcmHeightLvlConfigValue$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmHeightLvlConfigValue = getBcmHeightLvlConfigValue();
            parcel2.writeNoException();
            parcel2.writeInt(bcmHeightLvlConfigValue);
            return true;
        }

        private boolean onTransact$getBcmHoistModeSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmHoistModeSwitchStatus = getBcmHoistModeSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmHoistModeSwitchStatus);
            return true;
        }

        private boolean onTransact$getBcmLRMirrorHeatSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] bcmLRMirrorHeatSwitchStatus = getBcmLRMirrorHeatSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeIntArray(bcmLRMirrorHeatSwitchStatus);
            return true;
        }

        private boolean onTransact$getBcmLeftChildLockSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmLeftChildLockSwitchStatus = getBcmLeftChildLockSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmLeftChildLockSwitchStatus);
            return true;
        }

        private boolean onTransact$getBcmLeftRightRearMirrorFoldOutputStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] bcmLeftRightRearMirrorFoldOutputStatus = getBcmLeftRightRearMirrorFoldOutputStatus();
            parcel2.writeNoException();
            parcel2.writeIntArray(bcmLeftRightRearMirrorFoldOutputStatus);
            return true;
        }

        private boolean onTransact$getBcmLeftSdcDenormalizeState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmLeftSdcDenormalizeState = getBcmLeftSdcDenormalizeState();
            parcel2.writeNoException();
            parcel2.writeInt(bcmLeftSdcDenormalizeState);
            return true;
        }

        private boolean onTransact$getBcmLeftSdcDoorPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmLeftSdcDoorPosition = getBcmLeftSdcDoorPosition();
            parcel2.writeNoException();
            parcel2.writeInt(bcmLeftSdcDoorPosition);
            return true;
        }

        private boolean onTransact$getBcmLeftSdcHazzardRequest$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmLeftSdcHazzardRequest = getBcmLeftSdcHazzardRequest();
            parcel2.writeNoException();
            parcel2.writeInt(bcmLeftSdcHazzardRequest);
            return true;
        }

        private boolean onTransact$getBcmLeftSdcMoveCommand$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmLeftSdcMoveCommand = getBcmLeftSdcMoveCommand();
            parcel2.writeNoException();
            parcel2.writeInt(bcmLeftSdcMoveCommand);
            return true;
        }

        private boolean onTransact$getBcmLeftSdcSystemErrorState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmLeftSdcSystemErrorState = getBcmLeftSdcSystemErrorState();
            parcel2.writeNoException();
            parcel2.writeInt(bcmLeftSdcSystemErrorState);
            return true;
        }

        private boolean onTransact$getBcmLeftSdcSystemRunningState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmLeftSdcSystemRunningState = getBcmLeftSdcSystemRunningState();
            parcel2.writeNoException();
            parcel2.writeInt(bcmLeftSdcSystemRunningState);
            return true;
        }

        private boolean onTransact$getBcmLeftSdcWindowsAutoDownSwitchState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmLeftSdcWindowsAutoDownSwitchState = getBcmLeftSdcWindowsAutoDownSwitchState();
            parcel2.writeNoException();
            parcel2.writeInt(bcmLeftSdcWindowsAutoDownSwitchState);
            return true;
        }

        private boolean onTransact$getBcmLockAvasSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmLockAvasSwitchStatus = getBcmLockAvasSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmLockAvasSwitchStatus);
            return true;
        }

        private boolean onTransact$getBcmLockHazardLightSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmLockHazardLightSwitchStatus = getBcmLockHazardLightSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmLockHazardLightSwitchStatus);
            return true;
        }

        private boolean onTransact$getBcmLockHornSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmLockHornSwitchStatus = getBcmLockHornSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmLockHornSwitchStatus);
            return true;
        }

        private boolean onTransact$getBcmLowBeamOffConfirmSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmLowBeamOffConfirmSt = getBcmLowBeamOffConfirmSt();
            parcel2.writeNoException();
            parcel2.writeInt(bcmLowBeamOffConfirmSt);
            return true;
        }

        private boolean onTransact$getBcmMaintainModeSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmMaintainModeSwitchStatus = getBcmMaintainModeSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmMaintainModeSwitchStatus);
            return true;
        }

        private boolean onTransact$getBcmMirrorAutoFoldSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmMirrorAutoFoldSwitchStatus = getBcmMirrorAutoFoldSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmMirrorAutoFoldSwitchStatus);
            return true;
        }

        private boolean onTransact$getBcmNfcCardAuthStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmNfcCardAuthStatus = getBcmNfcCardAuthStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmNfcCardAuthStatus);
            return true;
        }

        private boolean onTransact$getBcmPassengerSeatBeltSbrWarningStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] bcmPassengerSeatBeltSbrWarningStatus = getBcmPassengerSeatBeltSbrWarningStatus();
            parcel2.writeNoException();
            parcel2.writeIntArray(bcmPassengerSeatBeltSbrWarningStatus);
            return true;
        }

        private boolean onTransact$getBcmPassengerSeatBlowLevel$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmPassengerSeatBlowLevel = getBcmPassengerSeatBlowLevel();
            parcel2.writeNoException();
            parcel2.writeInt(bcmPassengerSeatBlowLevel);
            return true;
        }

        private boolean onTransact$getBcmPowerOffSource$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmPowerOffSource = getBcmPowerOffSource();
            parcel2.writeNoException();
            parcel2.writeInt(bcmPowerOffSource);
            return true;
        }

        private boolean onTransact$getBcmRLCwcSwitchState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmRLCwcSwitchState = getBcmRLCwcSwitchState();
            parcel2.writeNoException();
            parcel2.writeInt(bcmRLCwcSwitchState);
            return true;
        }

        private boolean onTransact$getBcmRRCwcSwitchState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmRRCwcSwitchState = getBcmRRCwcSwitchState();
            parcel2.writeNoException();
            parcel2.writeInt(bcmRRCwcSwitchState);
            return true;
        }

        private boolean onTransact$getBcmReadyEnableState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmReadyEnableState = getBcmReadyEnableState();
            parcel2.writeNoException();
            parcel2.writeInt(bcmReadyEnableState);
            return true;
        }

        private boolean onTransact$getBcmRearLeftDomeLightSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmRearLeftDomeLightSwitchStatus = getBcmRearLeftDomeLightSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmRearLeftDomeLightSwitchStatus);
            return true;
        }

        private boolean onTransact$getBcmRearLeftHeaterErrorState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmRearLeftHeaterErrorState = getBcmRearLeftHeaterErrorState();
            parcel2.writeNoException();
            parcel2.writeInt(bcmRearLeftHeaterErrorState);
            return true;
        }

        private boolean onTransact$getBcmRearLeftSeatHeatState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmRearLeftSeatHeatState = getBcmRearLeftSeatHeatState();
            parcel2.writeNoException();
            parcel2.writeInt(bcmRearLeftSeatHeatState);
            return true;
        }

        private boolean onTransact$getBcmRearRightDomeLightSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmRearRightDomeLightSwitchStatus = getBcmRearRightDomeLightSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmRearRightDomeLightSwitchStatus);
            return true;
        }

        private boolean onTransact$getBcmRearRightHeaterErrorState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmRearRightHeaterErrorState = getBcmRearRightHeaterErrorState();
            parcel2.writeNoException();
            parcel2.writeInt(bcmRearRightHeaterErrorState);
            return true;
        }

        private boolean onTransact$getBcmRearRightSeatHeatState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmRearRightSeatHeatState = getBcmRearRightSeatHeatState();
            parcel2.writeNoException();
            parcel2.writeInt(bcmRearRightSeatHeatState);
            return true;
        }

        private boolean onTransact$getBcmRearViewMirrorsAdjustStates$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] bcmRearViewMirrorsAdjustStates = getBcmRearViewMirrorsAdjustStates();
            parcel2.writeNoException();
            parcel2.writeIntArray(bcmRearViewMirrorsAdjustStates);
            return true;
        }

        private boolean onTransact$getBcmRearWiperMotorStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmRearWiperMotorStatus = getBcmRearWiperMotorStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmRearWiperMotorStatus);
            return true;
        }

        private boolean onTransact$getBcmRearWiperServiceSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmRearWiperServiceSwitchStatus = getBcmRearWiperServiceSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmRearWiperServiceSwitchStatus);
            return true;
        }

        private boolean onTransact$getBcmRightChildLockSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmRightChildLockSwitchStatus = getBcmRightChildLockSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmRightChildLockSwitchStatus);
            return true;
        }

        private boolean onTransact$getBcmRightSdcDenormalizeState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmRightSdcDenormalizeState = getBcmRightSdcDenormalizeState();
            parcel2.writeNoException();
            parcel2.writeInt(bcmRightSdcDenormalizeState);
            return true;
        }

        private boolean onTransact$getBcmRightSdcDoorPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmRightSdcDoorPosition = getBcmRightSdcDoorPosition();
            parcel2.writeNoException();
            parcel2.writeInt(bcmRightSdcDoorPosition);
            return true;
        }

        private boolean onTransact$getBcmRightSdcHazzardRequest$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmRightSdcHazzardRequest = getBcmRightSdcHazzardRequest();
            parcel2.writeNoException();
            parcel2.writeInt(bcmRightSdcHazzardRequest);
            return true;
        }

        private boolean onTransact$getBcmRightSdcMoveCommand$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmRightSdcMoveCommand = getBcmRightSdcMoveCommand();
            parcel2.writeNoException();
            parcel2.writeInt(bcmRightSdcMoveCommand);
            return true;
        }

        private boolean onTransact$getBcmRightSdcSystemErrorState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmRightSdcSystemErrorState = getBcmRightSdcSystemErrorState();
            parcel2.writeNoException();
            parcel2.writeInt(bcmRightSdcSystemErrorState);
            return true;
        }

        private boolean onTransact$getBcmRightSdcSystemRunningState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmRightSdcSystemRunningState = getBcmRightSdcSystemRunningState();
            parcel2.writeNoException();
            parcel2.writeInt(bcmRightSdcSystemRunningState);
            return true;
        }

        private boolean onTransact$getBcmRightSdcWindowsAutoDownSwitchState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmRightSdcWindowsAutoDownSwitchState = getBcmRightSdcWindowsAutoDownSwitchState();
            parcel2.writeNoException();
            parcel2.writeInt(bcmRightSdcWindowsAutoDownSwitchState);
            return true;
        }

        private boolean onTransact$getBcmSaberLightSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmSaberLightSwitchStatus = getBcmSaberLightSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmSaberLightSwitchStatus);
            return true;
        }

        private boolean onTransact$getBcmScAntiPinchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmScAntiPinchStatus = getBcmScAntiPinchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmScAntiPinchStatus);
            return true;
        }

        private boolean onTransact$getBcmScEcuStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmScEcuStatus = getBcmScEcuStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmScEcuStatus);
            return true;
        }

        private boolean onTransact$getBcmScIceBreakMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmScIceBreakMode = getBcmScIceBreakMode();
            parcel2.writeNoException();
            parcel2.writeInt(bcmScIceBreakMode);
            return true;
        }

        private boolean onTransact$getBcmScLinStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmScLinStatus = getBcmScLinStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmScLinStatus);
            return true;
        }

        private boolean onTransact$getBcmScSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmScSwitchStatus = getBcmScSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmScSwitchStatus);
            return true;
        }

        private boolean onTransact$getBcmScThermalProtectSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmScThermalProtectSt = getBcmScThermalProtectSt();
            parcel2.writeNoException();
            parcel2.writeInt(bcmScThermalProtectSt);
            return true;
        }

        private boolean onTransact$getBcmSdcBrakeCloseDoorCfg$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmSdcBrakeCloseDoorCfg = getBcmSdcBrakeCloseDoorCfg();
            parcel2.writeNoException();
            parcel2.writeInt(bcmSdcBrakeCloseDoorCfg);
            return true;
        }

        private boolean onTransact$getBcmSdcKeyCloseCtrlCfg$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmSdcKeyCloseCtrlCfg = getBcmSdcKeyCloseCtrlCfg();
            parcel2.writeNoException();
            parcel2.writeInt(bcmSdcKeyCloseCtrlCfg);
            return true;
        }

        private boolean onTransact$getBcmSdcKeyOpenCtrlCfg$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmSdcKeyOpenCtrlCfg = getBcmSdcKeyOpenCtrlCfg();
            parcel2.writeNoException();
            parcel2.writeInt(bcmSdcKeyOpenCtrlCfg);
            return true;
        }

        private boolean onTransact$getBcmSdcMaxAutoDoorOpeningAngle$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmSdcMaxAutoDoorOpeningAngle = getBcmSdcMaxAutoDoorOpeningAngle();
            parcel2.writeNoException();
            parcel2.writeInt(bcmSdcMaxAutoDoorOpeningAngle);
            return true;
        }

        private boolean onTransact$getBcmSeatHeatErrStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmSeatHeatErrStatus = getBcmSeatHeatErrStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmSeatHeatErrStatus);
            return true;
        }

        private boolean onTransact$getBcmShadeControllerInitializationSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmShadeControllerInitializationSt = getBcmShadeControllerInitializationSt();
            parcel2.writeNoException();
            parcel2.writeInt(bcmShadeControllerInitializationSt);
            return true;
        }

        private boolean onTransact$getBcmShadeControllerMotorStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmShadeControllerMotorStatus = getBcmShadeControllerMotorStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmShadeControllerMotorStatus);
            return true;
        }

        private boolean onTransact$getBcmShadeControllerPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmShadeControllerPosition = getBcmShadeControllerPosition();
            parcel2.writeNoException();
            parcel2.writeInt(bcmShadeControllerPosition);
            return true;
        }

        private boolean onTransact$getBcmSoftLvlConfigValue$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmSoftLvlConfigValue = getBcmSoftLvlConfigValue();
            parcel2.writeNoException();
            parcel2.writeInt(bcmSoftLvlConfigValue);
            return true;
        }

        private boolean onTransact$getBcmSteeringWheelHeatingStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmSteeringWheelHeatingStatus = getBcmSteeringWheelHeatingStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmSteeringWheelHeatingStatus);
            return true;
        }

        private boolean onTransact$getBcmSuspenWelcomeSwitchState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmSuspenWelcomeSwitchState = getBcmSuspenWelcomeSwitchState();
            parcel2.writeNoException();
            parcel2.writeInt(bcmSuspenWelcomeSwitchState);
            return true;
        }

        private boolean onTransact$getBcmTargetAsHeightLvlConfigValue$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmTargetAsHeightLvlConfigValue = getBcmTargetAsHeightLvlConfigValue();
            parcel2.writeNoException();
            parcel2.writeInt(bcmTargetAsHeightLvlConfigValue);
            return true;
        }

        private boolean onTransact$getBcmTemporaryStopLockActivateStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmTemporaryStopLockActivateStatus = getBcmTemporaryStopLockActivateStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmTemporaryStopLockActivateStatus);
            return true;
        }

        private boolean onTransact$getBcmTrailerHitchSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmTrailerHitchSwitchStatus = getBcmTrailerHitchSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmTrailerHitchSwitchStatus);
            return true;
        }

        private boolean onTransact$getBcmTrunkActualPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmTrunkActualPosition = getBcmTrunkActualPosition();
            parcel2.writeNoException();
            parcel2.writeInt(bcmTrunkActualPosition);
            return true;
        }

        private boolean onTransact$getBcmTrunkDoorHeight$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmTrunkDoorHeight = getBcmTrunkDoorHeight();
            parcel2.writeNoException();
            parcel2.writeInt(bcmTrunkDoorHeight);
            return true;
        }

        private boolean onTransact$getBcmTrunkOpennerStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmTrunkOpennerStatus = getBcmTrunkOpennerStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmTrunkOpennerStatus);
            return true;
        }

        private boolean onTransact$getBcmTrunkSetPositionResponcePosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmTrunkSetPositionResponcePosition = getBcmTrunkSetPositionResponcePosition();
            parcel2.writeNoException();
            parcel2.writeInt(bcmTrunkSetPositionResponcePosition);
            return true;
        }

        private boolean onTransact$getBcmTrunkWorkModeStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmTrunkWorkModeStatus = getBcmTrunkWorkModeStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmTrunkWorkModeStatus);
            return true;
        }

        private boolean onTransact$getBcmTtmDenormalizeStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmTtmDenormalizeStatus = getBcmTtmDenormalizeStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmTtmDenormalizeStatus);
            return true;
        }

        private boolean onTransact$getBcmTtmHookMotorStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmTtmHookMotorStatus = getBcmTtmHookMotorStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmTtmHookMotorStatus);
            return true;
        }

        private boolean onTransact$getBcmTtmLampConnectStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmTtmLampConnectStatus = getBcmTtmLampConnectStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmTtmLampConnectStatus);
            return true;
        }

        private boolean onTransact$getBcmTtmLampFaultStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmTtmLampFaultStatus = getBcmTtmLampFaultStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmTtmLampFaultStatus);
            return true;
        }

        private boolean onTransact$getBcmTtmSystemErrorStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bcmTtmSystemErrorStatus = getBcmTtmSystemErrorStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bcmTtmSystemErrorStatus);
            return true;
        }

        private boolean onTransact$getBcmWindowsInitSignalLostRequestStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] bcmWindowsInitSignalLostRequestStatus = getBcmWindowsInitSignalLostRequestStatus();
            parcel2.writeNoException();
            parcel2.writeIntArray(bcmWindowsInitSignalLostRequestStatus);
            return true;
        }

        private boolean onTransact$getBcmWiperSpeedSwitchesStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] bcmWiperSpeedSwitchesStatus = getBcmWiperSpeedSwitchesStatus();
            parcel2.writeNoException();
            parcel2.writeIntArray(bcmWiperSpeedSwitchesStatus);
            return true;
        }

        private boolean onTransact$getBcmXPortAsSystemAllStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] bcmXPortAsSystemAllStatus = getBcmXPortAsSystemAllStatus();
            parcel2.writeNoException();
            parcel2.writeIntArray(bcmXPortAsSystemAllStatus);
            return true;
        }

        private boolean onTransact$getBmsAcChargeStopReason$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bmsAcChargeStopReason = getBmsAcChargeStopReason();
            parcel2.writeNoException();
            parcel2.writeInt(bmsAcChargeStopReason);
            return true;
        }

        private boolean onTransact$getBmsBatteryChargeStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bmsBatteryChargeStatus = getBmsBatteryChargeStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bmsBatteryChargeStatus);
            return true;
        }

        private boolean onTransact$getBmsCellTempMaxNum$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float bmsCellTempMaxNum = getBmsCellTempMaxNum();
            parcel2.writeNoException();
            parcel2.writeFloat(bmsCellTempMaxNum);
            return true;
        }

        private boolean onTransact$getBmsCellTempMinNum$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float bmsCellTempMinNum = getBmsCellTempMinNum();
            parcel2.writeNoException();
            parcel2.writeFloat(bmsCellTempMinNum);
            return true;
        }

        private boolean onTransact$getBmsChargeMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bmsChargeMode = getBmsChargeMode();
            parcel2.writeNoException();
            parcel2.writeInt(bmsChargeMode);
            return true;
        }

        private boolean onTransact$getBmsIsErrorStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bmsIsErrorStatus = getBmsIsErrorStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bmsIsErrorStatus);
            return true;
        }

        private boolean onTransact$getBmsScoIsLowStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int bmsScoIsLowStatus = getBmsScoIsLowStatus();
            parcel2.writeNoException();
            parcel2.writeInt(bmsScoIsLowStatus);
            return true;
        }

        private boolean onTransact$getCFChildLockState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int cFChildLockState = getCFChildLockState();
            parcel2.writeNoException();
            parcel2.writeInt(cFChildLockState);
            return true;
        }

        private boolean onTransact$getCFKeepTempRemainTime$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int cFKeepTempRemainTime = getCFKeepTempRemainTime();
            parcel2.writeNoException();
            parcel2.writeInt(cFKeepTempRemainTime);
            return true;
        }

        private boolean onTransact$getCFKeepTempState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int cFKeepTempState = getCFKeepTempState();
            parcel2.writeNoException();
            parcel2.writeInt(cFKeepTempState);
            return true;
        }

        private boolean onTransact$getCFKeepTempTime$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int cFKeepTempTime = getCFKeepTempTime();
            parcel2.writeNoException();
            parcel2.writeInt(cFKeepTempTime);
            return true;
        }

        private boolean onTransact$getCFKeepTempWorkState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int cFKeepTempWorkState = getCFKeepTempWorkState();
            parcel2.writeNoException();
            parcel2.writeInt(cFKeepTempWorkState);
            return true;
        }

        private boolean onTransact$getCFPowerState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int cFPowerState = getCFPowerState();
            parcel2.writeNoException();
            parcel2.writeInt(cFPowerState);
            return true;
        }

        private boolean onTransact$getCFTempValue$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int cFTempValue = getCFTempValue();
            parcel2.writeNoException();
            parcel2.writeInt(cFTempValue);
            return true;
        }

        private boolean onTransact$getCFWorkMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int cFWorkMode = getCFWorkMode();
            parcel2.writeNoException();
            parcel2.writeInt(cFWorkMode);
            return true;
        }

        private boolean onTransact$getCNGPCityMapCtrlResp$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            byte[] cNGPCityMapCtrlResp = getCNGPCityMapCtrlResp();
            parcel2.writeNoException();
            parcel2.writeByteArray(cNGPCityMapCtrlResp);
            return true;
        }

        private boolean onTransact$getCarFridgeDoorState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int carFridgeDoorState = getCarFridgeDoorState();
            parcel2.writeNoException();
            parcel2.writeInt(carFridgeDoorState);
            return true;
        }

        private boolean onTransact$getCarpetLightWelcomeState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int carpetLightWelcomeState = getCarpetLightWelcomeState();
            parcel2.writeNoException();
            parcel2.writeInt(carpetLightWelcomeState);
            return true;
        }

        private boolean onTransact$getChargeHighVoltageLockState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int chargeHighVoltageLockState = getChargeHighVoltageLockState();
            parcel2.writeNoException();
            parcel2.writeInt(chargeHighVoltageLockState);
            return true;
        }

        private boolean onTransact$getDcdcInputCurrent$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float dcdcInputCurrent = getDcdcInputCurrent();
            parcel2.writeNoException();
            parcel2.writeFloat(dcdcInputCurrent);
            return true;
        }

        private boolean onTransact$getDcdcInputVoltage$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int dcdcInputVoltage = getDcdcInputVoltage();
            parcel2.writeNoException();
            parcel2.writeInt(dcdcInputVoltage);
            return true;
        }

        private boolean onTransact$getDischargeHighVoltageLockState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int dischargeHighVoltageLockState = getDischargeHighVoltageLockState();
            parcel2.writeNoException();
            parcel2.writeInt(dischargeHighVoltageLockState);
            return true;
        }

        private boolean onTransact$getEpsTorqControlStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int epsTorqControlStatus = getEpsTorqControlStatus();
            parcel2.writeNoException();
            parcel2.writeInt(epsTorqControlStatus);
            return true;
        }

        private boolean onTransact$getEpsTorsionBarTorque$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float epsTorsionBarTorque = getEpsTorsionBarTorque();
            parcel2.writeNoException();
            parcel2.writeFloat(epsTorsionBarTorque);
            return true;
        }

        private boolean onTransact$getEspAbsWorkStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int espAbsWorkStatus = getEspAbsWorkStatus();
            parcel2.writeNoException();
            parcel2.writeInt(espAbsWorkStatus);
            return true;
        }

        private boolean onTransact$getEspAllWheelSpeed$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float[] espAllWheelSpeed = getEspAllWheelSpeed();
            parcel2.writeNoException();
            parcel2.writeFloatArray(espAllWheelSpeed);
            return true;
        }

        private boolean onTransact$getEspDtcFaultStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int espDtcFaultStatus = getEspDtcFaultStatus();
            parcel2.writeNoException();
            parcel2.writeInt(espDtcFaultStatus);
            return true;
        }

        private boolean onTransact$getEspEpbDriverOffWarningMsg$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int espEpbDriverOffWarningMsg = getEspEpbDriverOffWarningMsg();
            parcel2.writeNoException();
            parcel2.writeInt(espEpbDriverOffWarningMsg);
            return true;
        }

        private boolean onTransact$getEspIbtBrakeTravelDistance$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float espIbtBrakeTravelDistance = getEspIbtBrakeTravelDistance();
            parcel2.writeNoException();
            parcel2.writeFloat(espIbtBrakeTravelDistance);
            return true;
        }

        private boolean onTransact$getEspIbtFailureLampRequest$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int espIbtFailureLampRequest = getEspIbtFailureLampRequest();
            parcel2.writeNoException();
            parcel2.writeInt(espIbtFailureLampRequest);
            return true;
        }

        private boolean onTransact$getEspInterventionStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int espInterventionStatus = getEspInterventionStatus();
            parcel2.writeNoException();
            parcel2.writeInt(espInterventionStatus);
            return true;
        }

        private boolean onTransact$getEspIpuFrontActualRotateSpeed$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int espIpuFrontActualRotateSpeed = getEspIpuFrontActualRotateSpeed();
            parcel2.writeNoException();
            parcel2.writeInt(espIpuFrontActualRotateSpeed);
            return true;
        }

        private boolean onTransact$getEspIpuFrontActualTorque$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float espIpuFrontActualTorque = getEspIpuFrontActualTorque();
            parcel2.writeNoException();
            parcel2.writeFloat(espIpuFrontActualTorque);
            return true;
        }

        private boolean onTransact$getEspIpuFrontMotorActualTemperature$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int espIpuFrontMotorActualTemperature = getEspIpuFrontMotorActualTemperature();
            parcel2.writeNoException();
            parcel2.writeInt(espIpuFrontMotorActualTemperature);
            return true;
        }

        private boolean onTransact$getEspIpuRearActualRotateSpeed$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int espIpuRearActualRotateSpeed = getEspIpuRearActualRotateSpeed();
            parcel2.writeNoException();
            parcel2.writeInt(espIpuRearActualRotateSpeed);
            return true;
        }

        private boolean onTransact$getEspIpuRearActualTorque$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float espIpuRearActualTorque = getEspIpuRearActualTorque();
            parcel2.writeNoException();
            parcel2.writeFloat(espIpuRearActualTorque);
            return true;
        }

        private boolean onTransact$getEspIpuRearMotorActualTemperature$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int espIpuRearMotorActualTemperature = getEspIpuRearMotorActualTemperature();
            parcel2.writeNoException();
            parcel2.writeInt(espIpuRearMotorActualTemperature);
            return true;
        }

        private boolean onTransact$getEspMasterCylinderPressure$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float espMasterCylinderPressure = getEspMasterCylinderPressure();
            parcel2.writeNoException();
            parcel2.writeFloat(espMasterCylinderPressure);
            return true;
        }

        private boolean onTransact$getEspOffRoadSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int espOffRoadSwitchStatus = getEspOffRoadSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(espOffRoadSwitchStatus);
            return true;
        }

        private boolean onTransact$getEspTcsWorkStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int espTcsWorkStatus = getEspTcsWorkStatus();
            parcel2.writeNoException();
            parcel2.writeInt(espTcsWorkStatus);
            return true;
        }

        private boolean onTransact$getEspTsmFaultStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int espTsmFaultStatus = getEspTsmFaultStatus();
            parcel2.writeNoException();
            parcel2.writeInt(espTsmFaultStatus);
            return true;
        }

        private boolean onTransact$getEspTsmSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int espTsmSwitchStatus = getEspTsmSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(espTsmSwitchStatus);
            return true;
        }

        private boolean onTransact$getEspVdcWorkStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int espVdcWorkStatus = getEspVdcWorkStatus();
            parcel2.writeNoException();
            parcel2.writeInt(espVdcWorkStatus);
            return true;
        }

        private boolean onTransact$getFRCwcChargeErrorSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int fRCwcChargeErrorSt = getFRCwcChargeErrorSt();
            parcel2.writeNoException();
            parcel2.writeInt(fRCwcChargeErrorSt);
            return true;
        }

        private boolean onTransact$getFRCwcChargeSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int fRCwcChargeSt = getFRCwcChargeSt();
            parcel2.writeNoException();
            parcel2.writeInt(fRCwcChargeSt);
            return true;
        }

        private boolean onTransact$getFcwAebSensitivitySwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int fcwAebSensitivitySwitchStatus = getFcwAebSensitivitySwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(fcwAebSensitivitySwitchStatus);
            return true;
        }

        private boolean onTransact$getFinishCopyTboxLogResponse$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int finishCopyTboxLogResponse = getFinishCopyTboxLogResponse();
            parcel2.writeNoException();
            parcel2.writeInt(finishCopyTboxLogResponse);
            return true;
        }

        private boolean onTransact$getHavcCompressorConsumePower$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int havcCompressorConsumePower = getHavcCompressorConsumePower();
            parcel2.writeNoException();
            parcel2.writeInt(havcCompressorConsumePower);
            return true;
        }

        private boolean onTransact$getHavcHvhConsumePower$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int havcHvhConsumePower = getHavcHvhConsumePower();
            parcel2.writeNoException();
            parcel2.writeInt(havcHvhConsumePower);
            return true;
        }

        private boolean onTransact$getHvacAcCtrlType$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int hvacAcCtrlType = getHvacAcCtrlType();
            parcel2.writeNoException();
            parcel2.writeInt(hvacAcCtrlType);
            return true;
        }

        private boolean onTransact$getHvacAirCirculationType$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int hvacAirCirculationType = getHvacAirCirculationType();
            parcel2.writeNoException();
            parcel2.writeInt(hvacAirCirculationType);
            return true;
        }

        private boolean onTransact$getHvacAirDistributionAutoControlStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int hvacAirDistributionAutoControlStatus = getHvacAirDistributionAutoControlStatus();
            parcel2.writeNoException();
            parcel2.writeInt(hvacAirDistributionAutoControlStatus);
            return true;
        }

        private boolean onTransact$getHvacAirInTakeAutoControlStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int hvacAirInTakeAutoControlStatus = getHvacAirInTakeAutoControlStatus();
            parcel2.writeNoException();
            parcel2.writeInt(hvacAirInTakeAutoControlStatus);
            return true;
        }

        private boolean onTransact$getHvacAutoDefogSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int hvacAutoDefogSwitchStatus = getHvacAutoDefogSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(hvacAutoDefogSwitchStatus);
            return true;
        }

        private boolean onTransact$getHvacAutoDefogWorkSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int hvacAutoDefogWorkSt = getHvacAutoDefogWorkSt();
            parcel2.writeNoException();
            parcel2.writeInt(hvacAutoDefogWorkSt);
            return true;
        }

        private boolean onTransact$getHvacBlowerCtrlType$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int hvacBlowerCtrlType = getHvacBlowerCtrlType();
            parcel2.writeNoException();
            parcel2.writeInt(hvacBlowerCtrlType);
            return true;
        }

        private boolean onTransact$getHvacCoConcentrationStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int hvacCoConcentrationStatus = getHvacCoConcentrationStatus();
            parcel2.writeNoException();
            parcel2.writeInt(hvacCoConcentrationStatus);
            return true;
        }

        private boolean onTransact$getHvacDeodorizeSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int hvacDeodorizeSwitchStatus = getHvacDeodorizeSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(hvacDeodorizeSwitchStatus);
            return true;
        }

        private boolean onTransact$getHvacDisinfSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int hvacDisinfSwitchStatus = getHvacDisinfSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(hvacDisinfSwitchStatus);
            return true;
        }

        private boolean onTransact$getHvacErrorStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int hvacErrorStatus = getHvacErrorStatus();
            parcel2.writeNoException();
            parcel2.writeInt(hvacErrorStatus);
            return true;
        }

        private boolean onTransact$getHvacFrogingRiskStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int hvacFrogingRiskStatus = getHvacFrogingRiskStatus();
            parcel2.writeNoException();
            parcel2.writeInt(hvacFrogingRiskStatus);
            return true;
        }

        private boolean onTransact$getHvacMachineStateSwitch$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int hvacMachineStateSwitch = getHvacMachineStateSwitch();
            parcel2.writeNoException();
            parcel2.writeInt(hvacMachineStateSwitch);
            return true;
        }

        private boolean onTransact$getHvacNewFreshSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int hvacNewFreshSwitchStatus = getHvacNewFreshSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(hvacNewFreshSwitchStatus);
            return true;
        }

        private boolean onTransact$getHvacRearAirDistributionAutoControlStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int hvacRearAirDistributionAutoControlStatus = getHvacRearAirDistributionAutoControlStatus();
            parcel2.writeNoException();
            parcel2.writeInt(hvacRearAirDistributionAutoControlStatus);
            return true;
        }

        private boolean onTransact$getHvacRearAutoModeState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int hvacRearAutoModeState = getHvacRearAutoModeState();
            parcel2.writeNoException();
            parcel2.writeInt(hvacRearAutoModeState);
            return true;
        }

        private boolean onTransact$getHvacRearFanSpeedLevel$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int hvacRearFanSpeedLevel = getHvacRearFanSpeedLevel();
            parcel2.writeNoException();
            parcel2.writeInt(hvacRearFanSpeedLevel);
            return true;
        }

        private boolean onTransact$getHvacRearWindLessSwitch$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int hvacRearWindLessSwitch = getHvacRearWindLessSwitch();
            parcel2.writeNoException();
            parcel2.writeInt(hvacRearWindLessSwitch);
            return true;
        }

        private boolean onTransact$getHvacRearWindSpeedAutoControlStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int hvacRearWindSpeedAutoControlStatus = getHvacRearWindSpeedAutoControlStatus();
            parcel2.writeNoException();
            parcel2.writeInt(hvacRearWindSpeedAutoControlStatus);
            return true;
        }

        private boolean onTransact$getHvacSfsChannel$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int hvacSfsChannel = getHvacSfsChannel();
            parcel2.writeNoException();
            parcel2.writeInt(hvacSfsChannel);
            return true;
        }

        private boolean onTransact$getHvacSfsConcentrationStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int hvacSfsConcentrationStatus = getHvacSfsConcentrationStatus();
            parcel2.writeNoException();
            parcel2.writeInt(hvacSfsConcentrationStatus);
            return true;
        }

        private boolean onTransact$getHvacSfsSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int hvacSfsSwitchStatus = getHvacSfsSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(hvacSfsSwitchStatus);
            return true;
        }

        private boolean onTransact$getHvacSfsTypeInChannels$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] hvacSfsTypeInChannels = getHvacSfsTypeInChannels();
            parcel2.writeNoException();
            parcel2.writeIntArray(hvacSfsTypeInChannels);
            return true;
        }

        private boolean onTransact$getHvacTempSecRowLeftValue$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float hvacTempSecRowLeftValue = getHvacTempSecRowLeftValue();
            parcel2.writeNoException();
            parcel2.writeFloat(hvacTempSecRowLeftValue);
            return true;
        }

        private boolean onTransact$getHvacTempSecRowRightValue$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float hvacTempSecRowRightValue = getHvacTempSecRowRightValue();
            parcel2.writeNoException();
            parcel2.writeFloat(hvacTempSecRowRightValue);
            return true;
        }

        private boolean onTransact$getHvacTempThirdRowValue$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float hvacTempThirdRowValue = getHvacTempThirdRowValue();
            parcel2.writeNoException();
            parcel2.writeFloat(hvacTempThirdRowValue);
            return true;
        }

        private boolean onTransact$getHvacThirdRowWindBlowMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int hvacThirdRowWindBlowMode = getHvacThirdRowWindBlowMode();
            parcel2.writeNoException();
            parcel2.writeInt(hvacThirdRowWindBlowMode);
            return true;
        }

        private boolean onTransact$getHvacWarpSpeedCoolingSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int hvacWarpSpeedCoolingSwitchStatus = getHvacWarpSpeedCoolingSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(hvacWarpSpeedCoolingSwitchStatus);
            return true;
        }

        private boolean onTransact$getHvacWarpSpeedWarmingSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int hvacWarpSpeedWarmingSwitchStatus = getHvacWarpSpeedWarmingSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(hvacWarpSpeedWarmingSwitchStatus);
            return true;
        }

        private boolean onTransact$getHvacWindSpeedAutoControlStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int hvacWindSpeedAutoControlStatus = getHvacWindSpeedAutoControlStatus();
            parcel2.writeNoException();
            parcel2.writeInt(hvacWindSpeedAutoControlStatus);
            return true;
        }

        private boolean onTransact$getIcmCabinAiFeedback$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int icmCabinAiFeedback = getIcmCabinAiFeedback();
            parcel2.writeNoException();
            parcel2.writeInt(icmCabinAiFeedback);
            return true;
        }

        private boolean onTransact$getIcmCrashInfo$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            String icmCrashInfo = getIcmCrashInfo();
            parcel2.writeNoException();
            parcel2.writeString(icmCrashInfo);
            return true;
        }

        private boolean onTransact$getIcmDashboardLightsStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            String icmDashboardLightsStatus = getIcmDashboardLightsStatus();
            parcel2.writeNoException();
            parcel2.writeString(icmDashboardLightsStatus);
            return true;
        }

        private boolean onTransact$getIcmDiagnosisInfo$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            String icmDiagnosisInfo = getIcmDiagnosisInfo();
            parcel2.writeNoException();
            parcel2.writeString(icmDiagnosisInfo);
            return true;
        }

        private boolean onTransact$getIcmEcuUpdateResult$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            String icmEcuUpdateResult = getIcmEcuUpdateResult();
            parcel2.writeNoException();
            parcel2.writeString(icmEcuUpdateResult);
            return true;
        }

        private boolean onTransact$getIcmLogCompressInformation$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            String icmLogCompressInformation = getIcmLogCompressInformation();
            parcel2.writeNoException();
            parcel2.writeString(icmLogCompressInformation);
            return true;
        }

        private boolean onTransact$getIcmUpdatingPartitionAndProgress$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            String icmUpdatingPartitionAndProgress = getIcmUpdatingPartitionAndProgress();
            parcel2.writeNoException();
            parcel2.writeString(icmUpdatingPartitionAndProgress);
            return true;
        }

        private boolean onTransact$getImsAutoVisionSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int imsAutoVisionSt = getImsAutoVisionSt();
            parcel2.writeNoException();
            parcel2.writeInt(imsAutoVisionSt);
            return true;
        }

        private boolean onTransact$getImsBrightLevel$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int imsBrightLevel = getImsBrightLevel();
            parcel2.writeNoException();
            parcel2.writeInt(imsBrightLevel);
            return true;
        }

        private boolean onTransact$getImsModeState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int imsModeState = getImsModeState();
            parcel2.writeNoException();
            parcel2.writeInt(imsModeState);
            return true;
        }

        private boolean onTransact$getImsSystemSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int imsSystemSt = getImsSystemSt();
            parcel2.writeNoException();
            parcel2.writeInt(imsSystemSt);
            return true;
        }

        private boolean onTransact$getImsVisionAngleLevl$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int imsVisionAngleLevl = getImsVisionAngleLevl();
            parcel2.writeNoException();
            parcel2.writeInt(imsVisionAngleLevl);
            return true;
        }

        private boolean onTransact$getImsVisionVerticalLevel$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int imsVisionVerticalLevel = getImsVisionVerticalLevel();
            parcel2.writeNoException();
            parcel2.writeInt(imsVisionVerticalLevel);
            return true;
        }

        private boolean onTransact$getImuNavigationDataFromCan$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float[] imuNavigationDataFromCan = getImuNavigationDataFromCan();
            parcel2.writeNoException();
            parcel2.writeFloatArray(imuNavigationDataFromCan);
            return true;
        }

        private boolean onTransact$getImuNavigationSatellitesRssi$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int imuNavigationSatellitesRssi = getImuNavigationSatellitesRssi();
            parcel2.writeNoException();
            parcel2.writeInt(imuNavigationSatellitesRssi);
            return true;
        }

        private boolean onTransact$getImuSatellitesNumber$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int imuSatellitesNumber = getImuSatellitesNumber();
            parcel2.writeNoException();
            parcel2.writeInt(imuSatellitesNumber);
            return true;
        }

        private boolean onTransact$getImuSystemStateAndSpeed$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float[] imuSystemStateAndSpeed = getImuSystemStateAndSpeed();
            parcel2.writeNoException();
            parcel2.writeFloatArray(imuSystemStateAndSpeed);
            return true;
        }

        private boolean onTransact$getImuSystemStateAndSpeedFromCan$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float[] imuSystemStateAndSpeedFromCan = getImuSystemStateAndSpeedFromCan();
            parcel2.writeNoException();
            parcel2.writeFloatArray(imuSystemStateAndSpeedFromCan);
            return true;
        }

        private boolean onTransact$getImuSystemStateFromCan$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float[] imuSystemStateFromCan = getImuSystemStateFromCan();
            parcel2.writeNoException();
            parcel2.writeFloatArray(imuSystemStateFromCan);
            return true;
        }

        private boolean onTransact$getInsulativeResistanceValue$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int insulativeResistanceValue = getInsulativeResistanceValue();
            parcel2.writeNoException();
            parcel2.writeInt(insulativeResistanceValue);
            return true;
        }

        private boolean onTransact$getIsHvCutOffStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int isHvCutOffStatus = getIsHvCutOffStatus();
            parcel2.writeNoException();
            parcel2.writeInt(isHvCutOffStatus);
            return true;
        }

        private boolean onTransact$getLCMSAutoBrightSwSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int lCMSAutoBrightSwSt = getLCMSAutoBrightSwSt();
            parcel2.writeNoException();
            parcel2.writeInt(lCMSAutoBrightSwSt);
            return true;
        }

        private boolean onTransact$getLCMSBright$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int lCMSBright = getLCMSBright();
            parcel2.writeNoException();
            parcel2.writeInt(lCMSBright);
            return true;
        }

        private boolean onTransact$getLCMSBrightWithSource$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] lCMSBrightWithSource = getLCMSBrightWithSource();
            parcel2.writeNoException();
            parcel2.writeIntArray(lCMSBrightWithSource);
            return true;
        }

        private boolean onTransact$getLCMSDanObjectRecSwSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int lCMSDanObjectRecSwSt = getLCMSDanObjectRecSwSt();
            parcel2.writeNoException();
            parcel2.writeInt(lCMSDanObjectRecSwSt);
            return true;
        }

        private boolean onTransact$getLCMSHighSpeedViewSwSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int lCMSHighSpeedViewSwSt = getLCMSHighSpeedViewSwSt();
            parcel2.writeNoException();
            parcel2.writeInt(lCMSHighSpeedViewSwSt);
            return true;
        }

        private boolean onTransact$getLCMSLowSpeedViewSwSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int lCMSLowSpeedViewSwSt = getLCMSLowSpeedViewSwSt();
            parcel2.writeNoException();
            parcel2.writeInt(lCMSLowSpeedViewSwSt);
            return true;
        }

        private boolean onTransact$getLCMSReverseAssitSwSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int lCMSReverseAssitSwSt = getLCMSReverseAssitSwSt();
            parcel2.writeNoException();
            parcel2.writeInt(lCMSReverseAssitSwSt);
            return true;
        }

        private boolean onTransact$getLCMSTurnExtSwSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int lCMSTurnExtSwSt = getLCMSTurnExtSwSt();
            parcel2.writeNoException();
            parcel2.writeInt(lCMSTurnExtSwSt);
            return true;
        }

        private boolean onTransact$getLCMSViewRecoverySt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int lCMSViewRecoverySt = getLCMSViewRecoverySt();
            parcel2.writeNoException();
            parcel2.writeInt(lCMSViewRecoverySt);
            return true;
        }

        private boolean onTransact$getLRCMSAllExteriorMirrorsPositions$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float[] lRCMSAllExteriorMirrorsPositions = getLRCMSAllExteriorMirrorsPositions();
            parcel2.writeNoException();
            parcel2.writeFloatArray(lRCMSAllExteriorMirrorsPositions);
            return true;
        }

        private boolean onTransact$getLRCMSStoreBrightSource$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int lRCMSStoreBrightSource = getLRCMSStoreBrightSource();
            parcel2.writeNoException();
            parcel2.writeInt(lRCMSStoreBrightSource);
            return true;
        }

        private boolean onTransact$getLRCMSViewAngle$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int lRCMSViewAngle = getLRCMSViewAngle();
            parcel2.writeNoException();
            parcel2.writeInt(lRCMSViewAngle);
            return true;
        }

        private boolean onTransact$getLaneSupportSystemStateAndWarning$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int laneSupportSystemStateAndWarning = getLaneSupportSystemStateAndWarning();
            parcel2.writeNoException();
            parcel2.writeInt(laneSupportSystemStateAndWarning);
            return true;
        }

        private boolean onTransact$getLeftAndRightTurnLampsActiveStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] leftAndRightTurnLampsActiveStatus = getLeftAndRightTurnLampsActiveStatus();
            parcel2.writeNoException();
            parcel2.writeIntArray(leftAndRightTurnLampsActiveStatus);
            return true;
        }

        private boolean onTransact$getLeftSdcIndexN$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int leftSdcIndexN = getLeftSdcIndexN();
            parcel2.writeNoException();
            parcel2.writeInt(leftSdcIndexN);
            return true;
        }

        private boolean onTransact$getLeftSlideDoorLockSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int leftSlideDoorLockSt = getLeftSlideDoorLockSt();
            parcel2.writeNoException();
            parcel2.writeInt(leftSlideDoorLockSt);
            return true;
        }

        private boolean onTransact$getLeftSlideDoorMoode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int leftSlideDoorMoode = getLeftSlideDoorMoode();
            parcel2.writeNoException();
            parcel2.writeInt(leftSlideDoorMoode);
            return true;
        }

        private boolean onTransact$getLeftSlideDoorStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int leftSlideDoorStatus = getLeftSlideDoorStatus();
            parcel2.writeNoException();
            parcel2.writeInt(leftSlideDoorStatus);
            return true;
        }

        private boolean onTransact$getMcuBacklightIcDriverState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int mcuBacklightIcDriverState = getMcuBacklightIcDriverState();
            parcel2.writeNoException();
            parcel2.writeInt(mcuBacklightIcDriverState);
            return true;
        }

        private boolean onTransact$getMcuBacklightTemperature$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int mcuBacklightTemperature = getMcuBacklightTemperature();
            parcel2.writeNoException();
            parcel2.writeInt(mcuBacklightTemperature);
            return true;
        }

        private boolean onTransact$getMcuCidState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int mcuCidState = getMcuCidState();
            parcel2.writeNoException();
            parcel2.writeInt(mcuCidState);
            return true;
        }

        private boolean onTransact$getMcuFactoryModeSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int mcuFactoryModeSwitchStatus = getMcuFactoryModeSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(mcuFactoryModeSwitchStatus);
            return true;
        }

        private boolean onTransact$getMcuKeyStartStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int mcuKeyStartStatus = getMcuKeyStartStatus();
            parcel2.writeNoException();
            parcel2.writeInt(mcuKeyStartStatus);
            return true;
        }

        private boolean onTransact$getMcuLluPowerRequestSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int mcuLluPowerRequestSwitchStatus = getMcuLluPowerRequestSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(mcuLluPowerRequestSwitchStatus);
            return true;
        }

        private boolean onTransact$getMcuRemindWarningStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int mcuRemindWarningStatus = getMcuRemindWarningStatus();
            parcel2.writeNoException();
            parcel2.writeInt(mcuRemindWarningStatus);
            return true;
        }

        private boolean onTransact$getMcuRvcEnable$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int mcuRvcEnable = getMcuRvcEnable();
            parcel2.writeNoException();
            parcel2.writeInt(mcuRvcEnable);
            return true;
        }

        private boolean onTransact$getMcuTemporaryFactoryStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int mcuTemporaryFactoryStatus = getMcuTemporaryFactoryStatus();
            parcel2.writeNoException();
            parcel2.writeInt(mcuTemporaryFactoryStatus);
            return true;
        }

        private boolean onTransact$getMcuTrunkPowerOffDelay$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int mcuTrunkPowerOffDelay = getMcuTrunkPowerOffDelay();
            parcel2.writeNoException();
            parcel2.writeInt(mcuTrunkPowerOffDelay);
            return true;
        }

        private boolean onTransact$getMcuTrunkPowerOnRequest$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int mcuTrunkPowerOnRequest = getMcuTrunkPowerOnRequest();
            parcel2.writeNoException();
            parcel2.writeInt(mcuTrunkPowerOnRequest);
            return true;
        }

        private boolean onTransact$getMcuTrunkPowerStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int mcuTrunkPowerStatus = getMcuTrunkPowerStatus();
            parcel2.writeNoException();
            parcel2.writeInt(mcuTrunkPowerStatus);
            return true;
        }

        private boolean onTransact$getMcuWifiHotspotRequest$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int mcuWifiHotspotRequest = getMcuWifiHotspotRequest();
            parcel2.writeNoException();
            parcel2.writeInt(mcuWifiHotspotRequest);
            return true;
        }

        private boolean onTransact$getMsmDriverHeadrestStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int msmDriverHeadrestStatus = getMsmDriverHeadrestStatus();
            parcel2.writeNoException();
            parcel2.writeInt(msmDriverHeadrestStatus);
            return true;
        }

        private boolean onTransact$getMsmDriverSeatCushTiltPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int msmDriverSeatCushTiltPosition = getMsmDriverSeatCushTiltPosition();
            parcel2.writeNoException();
            parcel2.writeInt(msmDriverSeatCushTiltPosition);
            return true;
        }

        private boolean onTransact$getMsmDriverSeatLegHorzPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int msmDriverSeatLegHorzPosition = getMsmDriverSeatLegHorzPosition();
            parcel2.writeNoException();
            parcel2.writeInt(msmDriverSeatLegHorzPosition);
            return true;
        }

        private boolean onTransact$getMsmDriverSeatLumberSwitchCenterPressStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int msmDriverSeatLumberSwitchCenterPressStatus = getMsmDriverSeatLumberSwitchCenterPressStatus();
            parcel2.writeNoException();
            parcel2.writeInt(msmDriverSeatLumberSwitchCenterPressStatus);
            return true;
        }

        private boolean onTransact$getMsmDriverSeatLumberSwitchMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int msmDriverSeatLumberSwitchMode = getMsmDriverSeatLumberSwitchMode();
            parcel2.writeNoException();
            parcel2.writeInt(msmDriverSeatLumberSwitchMode);
            return true;
        }

        private boolean onTransact$getMsmDriverSeatMassgElem$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] msmDriverSeatMassgElem = getMsmDriverSeatMassgElem();
            parcel2.writeNoException();
            parcel2.writeIntArray(msmDriverSeatMassgElem);
            return true;
        }

        private boolean onTransact$getMsmDriverSeatMassgErrorStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int msmDriverSeatMassgErrorStatus = getMsmDriverSeatMassgErrorStatus();
            parcel2.writeNoException();
            parcel2.writeInt(msmDriverSeatMassgErrorStatus);
            return true;
        }

        private boolean onTransact$getMsmDriverSeatMassgIntensity$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int msmDriverSeatMassgIntensity = getMsmDriverSeatMassgIntensity();
            parcel2.writeNoException();
            parcel2.writeInt(msmDriverSeatMassgIntensity);
            return true;
        }

        private boolean onTransact$getMsmDriverSeatMassgProgMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int msmDriverSeatMassgProgMode = getMsmDriverSeatMassgProgMode();
            parcel2.writeNoException();
            parcel2.writeInt(msmDriverSeatMassgProgMode);
            return true;
        }

        private boolean onTransact$getMsmPassengerHeadrestStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int msmPassengerHeadrestStatus = getMsmPassengerHeadrestStatus();
            parcel2.writeNoException();
            parcel2.writeInt(msmPassengerHeadrestStatus);
            return true;
        }

        private boolean onTransact$getMsmPassengerSeatBackPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int msmPassengerSeatBackPosition = getMsmPassengerSeatBackPosition();
            parcel2.writeNoException();
            parcel2.writeInt(msmPassengerSeatBackPosition);
            return true;
        }

        private boolean onTransact$getMsmPassengerSeatCushExtPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int msmPassengerSeatCushExtPosition = getMsmPassengerSeatCushExtPosition();
            parcel2.writeNoException();
            parcel2.writeInt(msmPassengerSeatCushExtPosition);
            return true;
        }

        private boolean onTransact$getMsmPassengerSeatHorizontalPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int msmPassengerSeatHorizontalPosition = getMsmPassengerSeatHorizontalPosition();
            parcel2.writeNoException();
            parcel2.writeInt(msmPassengerSeatHorizontalPosition);
            return true;
        }

        private boolean onTransact$getMsmPassengerSeatLegHorzPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int msmPassengerSeatLegHorzPosition = getMsmPassengerSeatLegHorzPosition();
            parcel2.writeNoException();
            parcel2.writeInt(msmPassengerSeatLegHorzPosition);
            return true;
        }

        private boolean onTransact$getMsmPassengerSeatLumberSwitchCenterPressStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int msmPassengerSeatLumberSwitchCenterPressStatus = getMsmPassengerSeatLumberSwitchCenterPressStatus();
            parcel2.writeNoException();
            parcel2.writeInt(msmPassengerSeatLumberSwitchCenterPressStatus);
            return true;
        }

        private boolean onTransact$getMsmPassengerSeatLumberSwitchMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int msmPassengerSeatLumberSwitchMode = getMsmPassengerSeatLumberSwitchMode();
            parcel2.writeNoException();
            parcel2.writeInt(msmPassengerSeatLumberSwitchMode);
            return true;
        }

        private boolean onTransact$getMsmPassengerSeatMassgElem$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] msmPassengerSeatMassgElem = getMsmPassengerSeatMassgElem();
            parcel2.writeNoException();
            parcel2.writeIntArray(msmPassengerSeatMassgElem);
            return true;
        }

        private boolean onTransact$getMsmPassengerSeatMassgErrorStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int msmPassengerSeatMassgErrorStatus = getMsmPassengerSeatMassgErrorStatus();
            parcel2.writeNoException();
            parcel2.writeInt(msmPassengerSeatMassgErrorStatus);
            return true;
        }

        private boolean onTransact$getMsmPassengerSeatMassgIntensity$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int msmPassengerSeatMassgIntensity = getMsmPassengerSeatMassgIntensity();
            parcel2.writeNoException();
            parcel2.writeInt(msmPassengerSeatMassgIntensity);
            return true;
        }

        private boolean onTransact$getMsmPassengerSeatMassgProgMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int msmPassengerSeatMassgProgMode = getMsmPassengerSeatMassgProgMode();
            parcel2.writeNoException();
            parcel2.writeInt(msmPassengerSeatMassgProgMode);
            return true;
        }

        private boolean onTransact$getMsmPassengerSeatVerticalPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int msmPassengerSeatVerticalPosition = getMsmPassengerSeatVerticalPosition();
            parcel2.writeNoException();
            parcel2.writeInt(msmPassengerSeatVerticalPosition);
            return true;
        }

        private boolean onTransact$getMsmPassengerWelcomeSwitch$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int msmPassengerWelcomeSwitch = getMsmPassengerWelcomeSwitch();
            parcel2.writeNoException();
            parcel2.writeInt(msmPassengerWelcomeSwitch);
            return true;
        }

        private boolean onTransact$getMsmSecRowLeftSeatCushExtPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int msmSecRowLeftSeatCushExtPosition = getMsmSecRowLeftSeatCushExtPosition();
            parcel2.writeNoException();
            parcel2.writeInt(msmSecRowLeftSeatCushExtPosition);
            return true;
        }

        private boolean onTransact$getMsmSecRowLeftSeatLegHorzPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int msmSecRowLeftSeatLegHorzPosition = getMsmSecRowLeftSeatLegHorzPosition();
            parcel2.writeNoException();
            parcel2.writeInt(msmSecRowLeftSeatLegHorzPosition);
            return true;
        }

        private boolean onTransact$getMsmSecRowLeftSeatMassgElem$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] msmSecRowLeftSeatMassgElem = getMsmSecRowLeftSeatMassgElem();
            parcel2.writeNoException();
            parcel2.writeIntArray(msmSecRowLeftSeatMassgElem);
            return true;
        }

        private boolean onTransact$getMsmSecRowLeftSeatMassgErrorStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int msmSecRowLeftSeatMassgErrorStatus = getMsmSecRowLeftSeatMassgErrorStatus();
            parcel2.writeNoException();
            parcel2.writeInt(msmSecRowLeftSeatMassgErrorStatus);
            return true;
        }

        private boolean onTransact$getMsmSecRowLeftSeatMassgIntensity$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int msmSecRowLeftSeatMassgIntensity = getMsmSecRowLeftSeatMassgIntensity();
            parcel2.writeNoException();
            parcel2.writeInt(msmSecRowLeftSeatMassgIntensity);
            return true;
        }

        private boolean onTransact$getMsmSecRowLeftSeatMassgProgMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int msmSecRowLeftSeatMassgProgMode = getMsmSecRowLeftSeatMassgProgMode();
            parcel2.writeNoException();
            parcel2.writeInt(msmSecRowLeftSeatMassgProgMode);
            return true;
        }

        private boolean onTransact$getMsmSecRowRightSeatCushExtPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int msmSecRowRightSeatCushExtPosition = getMsmSecRowRightSeatCushExtPosition();
            parcel2.writeNoException();
            parcel2.writeInt(msmSecRowRightSeatCushExtPosition);
            return true;
        }

        private boolean onTransact$getMsmSecRowRightSeatLegHorzPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int msmSecRowRightSeatLegHorzPosition = getMsmSecRowRightSeatLegHorzPosition();
            parcel2.writeNoException();
            parcel2.writeInt(msmSecRowRightSeatLegHorzPosition);
            return true;
        }

        private boolean onTransact$getMsmSecRowRightSeatMassgElem$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] msmSecRowRightSeatMassgElem = getMsmSecRowRightSeatMassgElem();
            parcel2.writeNoException();
            parcel2.writeIntArray(msmSecRowRightSeatMassgElem);
            return true;
        }

        private boolean onTransact$getMsmSecRowRightSeatMassgErrorStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int msmSecRowRightSeatMassgErrorStatus = getMsmSecRowRightSeatMassgErrorStatus();
            parcel2.writeNoException();
            parcel2.writeInt(msmSecRowRightSeatMassgErrorStatus);
            return true;
        }

        private boolean onTransact$getMsmSecRowRightSeatMassgIntensity$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int msmSecRowRightSeatMassgIntensity = getMsmSecRowRightSeatMassgIntensity();
            parcel2.writeNoException();
            parcel2.writeInt(msmSecRowRightSeatMassgIntensity);
            return true;
        }

        private boolean onTransact$getMsmSecRowRightSeatMassgProgMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int msmSecRowRightSeatMassgProgMode = getMsmSecRowRightSeatMassgProgMode();
            parcel2.writeNoException();
            parcel2.writeInt(msmSecRowRightSeatMassgProgMode);
            return true;
        }

        private boolean onTransact$getMsmSecrowLtSeatTiltPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int msmSecrowLtSeatTiltPosition = getMsmSecrowLtSeatTiltPosition();
            parcel2.writeNoException();
            parcel2.writeInt(msmSecrowLtSeatTiltPosition);
            return true;
        }

        private boolean onTransact$getMsmSecrowRtSeatTiltPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int msmSecrowRtSeatTiltPosition = getMsmSecrowRtSeatTiltPosition();
            parcel2.writeNoException();
            parcel2.writeInt(msmSecrowRtSeatTiltPosition);
            return true;
        }

        private boolean onTransact$getMsmtLeftSeatFoldFunSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int msmtLeftSeatFoldFunSt = getMsmtLeftSeatFoldFunSt();
            parcel2.writeNoException();
            parcel2.writeInt(msmtLeftSeatFoldFunSt);
            return true;
        }

        private boolean onTransact$getMsmtRightSeatFoldFunSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int msmtRightSeatFoldFunSt = getMsmtRightSeatFoldFunSt();
            parcel2.writeNoException();
            parcel2.writeInt(msmtRightSeatFoldFunSt);
            return true;
        }

        private boolean onTransact$getMsmtSeatStowFunSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int msmtSeatStowFunSt = getMsmtSeatStowFunSt();
            parcel2.writeNoException();
            parcel2.writeInt(msmtSeatStowFunSt);
            return true;
        }

        private boolean onTransact$getPhoneRemoteAPInformation$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            byte[] phoneRemoteAPInformation = getPhoneRemoteAPInformation();
            parcel2.writeNoException();
            parcel2.writeByteArray(phoneRemoteAPInformation);
            return true;
        }

        private boolean onTransact$getPollingWelcomeState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int pollingWelcomeState = getPollingWelcomeState();
            parcel2.writeNoException();
            parcel2.writeInt(pollingWelcomeState);
            return true;
        }

        private boolean onTransact$getQuitNgpOddSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int quitNgpOddSt = getQuitNgpOddSt();
            parcel2.writeNoException();
            parcel2.writeInt(quitNgpOddSt);
            return true;
        }

        private boolean onTransact$getRLCwcChargeErrorSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int rLCwcChargeErrorSt = getRLCwcChargeErrorSt();
            parcel2.writeNoException();
            parcel2.writeInt(rLCwcChargeErrorSt);
            return true;
        }

        private boolean onTransact$getRLCwcChargeSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int rLCwcChargeSt = getRLCwcChargeSt();
            parcel2.writeNoException();
            parcel2.writeInt(rLCwcChargeSt);
            return true;
        }

        private boolean onTransact$getRRCwcChargeErrorSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int rRCwcChargeErrorSt = getRRCwcChargeErrorSt();
            parcel2.writeNoException();
            parcel2.writeInt(rRCwcChargeErrorSt);
            return true;
        }

        private boolean onTransact$getRRCwcChargeSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int rRCwcChargeSt = getRRCwcChargeSt();
            parcel2.writeNoException();
            parcel2.writeInt(rRCwcChargeSt);
            return true;
        }

        private boolean onTransact$getRearHvacFanPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int rearHvacFanPosition = getRearHvacFanPosition();
            parcel2.writeNoException();
            parcel2.writeInt(rearHvacFanPosition);
            return true;
        }

        private boolean onTransact$getRearHvacPowerState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int rearHvacPowerState = getRearHvacPowerState();
            parcel2.writeNoException();
            parcel2.writeInt(rearHvacPowerState);
            return true;
        }

        private boolean onTransact$getRearLogLight$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int rearLogLight = getRearLogLight();
            parcel2.writeNoException();
            parcel2.writeInt(rearLogLight);
            return true;
        }

        private boolean onTransact$getRightRightSdcIndexN$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int rightRightSdcIndexN = getRightRightSdcIndexN();
            parcel2.writeNoException();
            parcel2.writeInt(rightRightSdcIndexN);
            return true;
        }

        private boolean onTransact$getRightSlideDoorLockSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int rightSlideDoorLockSt = getRightSlideDoorLockSt();
            parcel2.writeNoException();
            parcel2.writeInt(rightSlideDoorLockSt);
            return true;
        }

        private boolean onTransact$getRightSlideDoorMoode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int rightSlideDoorMoode = getRightSlideDoorMoode();
            parcel2.writeNoException();
            parcel2.writeInt(rightSlideDoorMoode);
            return true;
        }

        private boolean onTransact$getRightSlideDoorStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int rightSlideDoorStatus = getRightSlideDoorStatus();
            parcel2.writeNoException();
            parcel2.writeInt(rightSlideDoorStatus);
            return true;
        }

        private boolean onTransact$getRoutingForTboxResponse$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int routingForTboxResponse = getRoutingForTboxResponse();
            parcel2.writeNoException();
            parcel2.writeInt(routingForTboxResponse);
            return true;
        }

        private boolean onTransact$getSRHeartBeatInfo$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            String sRHeartBeatInfo = getSRHeartBeatInfo();
            parcel2.writeNoException();
            parcel2.writeString(sRHeartBeatInfo);
            return true;
        }

        private boolean onTransact$getScu322LogDataD20$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] scu322LogDataD20 = getScu322LogDataD20();
            parcel2.writeNoException();
            parcel2.writeIntArray(scu322LogDataD20);
            return true;
        }

        private boolean onTransact$getScuAccExitReason$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuAccExitReason = getScuAccExitReason();
            parcel2.writeNoException();
            parcel2.writeInt(scuAccExitReason);
            return true;
        }

        private boolean onTransact$getScuAccLkaWarning$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuAccLkaWarning = getScuAccLkaWarning();
            parcel2.writeNoException();
            parcel2.writeInt(scuAccLkaWarning);
            return true;
        }

        private boolean onTransact$getScuAebAlarmSwitchState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuAebAlarmSwitchState = getScuAebAlarmSwitchState();
            parcel2.writeNoException();
            parcel2.writeInt(scuAebAlarmSwitchState);
            return true;
        }

        private boolean onTransact$getScuAlarmFaultStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuAlarmFaultStatus = getScuAlarmFaultStatus();
            parcel2.writeNoException();
            parcel2.writeInt(scuAlarmFaultStatus);
            return true;
        }

        private boolean onTransact$getScuAlcCtrlRemindInfo$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuAlcCtrlRemindInfo = getScuAlcCtrlRemindInfo();
            parcel2.writeNoException();
            parcel2.writeInt(scuAlcCtrlRemindInfo);
            return true;
        }

        private boolean onTransact$getScuAllSrrRadarEmissStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] scuAllSrrRadarEmissStatus = getScuAllSrrRadarEmissStatus();
            parcel2.writeNoException();
            parcel2.writeIntArray(scuAllSrrRadarEmissStatus);
            return true;
        }

        private boolean onTransact$getScuBsdStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuBsdStatus = getScuBsdStatus();
            parcel2.writeNoException();
            parcel2.writeInt(scuBsdStatus);
            return true;
        }

        private boolean onTransact$getScuCutInPreventionWarning$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuCutInPreventionWarning = getScuCutInPreventionWarning();
            parcel2.writeNoException();
            parcel2.writeInt(scuCutInPreventionWarning);
            return true;
        }

        private boolean onTransact$getScuDisplayCruiseSpeed$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuDisplayCruiseSpeed = getScuDisplayCruiseSpeed();
            parcel2.writeNoException();
            parcel2.writeInt(scuDisplayCruiseSpeed);
            return true;
        }

        private boolean onTransact$getScuDoorsLRadarDisplayLevel$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuDoorsLRadarDisplayLevel = getScuDoorsLRadarDisplayLevel();
            parcel2.writeNoException();
            parcel2.writeInt(scuDoorsLRadarDisplayLevel);
            return true;
        }

        private boolean onTransact$getScuDoorsLRadarDistance$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuDoorsLRadarDistance = getScuDoorsLRadarDistance();
            parcel2.writeNoException();
            parcel2.writeInt(scuDoorsLRadarDistance);
            return true;
        }

        private boolean onTransact$getScuDoorsObstacleDetectionSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] scuDoorsObstacleDetectionSt = getScuDoorsObstacleDetectionSt();
            parcel2.writeNoException();
            parcel2.writeIntArray(scuDoorsObstacleDetectionSt);
            return true;
        }

        private boolean onTransact$getScuDoorsRRadarDisplayLevel$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuDoorsRRadarDisplayLevel = getScuDoorsRRadarDisplayLevel();
            parcel2.writeNoException();
            parcel2.writeInt(scuDoorsRRadarDisplayLevel);
            return true;
        }

        private boolean onTransact$getScuDoorsRRadarDistance$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuDoorsRRadarDistance = getScuDoorsRRadarDistance();
            parcel2.writeNoException();
            parcel2.writeInt(scuDoorsRRadarDistance);
            return true;
        }

        private boolean onTransact$getScuDoorsRadarDisplayLevel$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] scuDoorsRadarDisplayLevel = getScuDoorsRadarDisplayLevel();
            parcel2.writeNoException();
            parcel2.writeIntArray(scuDoorsRadarDisplayLevel);
            return true;
        }

        private boolean onTransact$getScuDoorsRadarDistance$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] scuDoorsRadarDistance = getScuDoorsRadarDistance();
            parcel2.writeNoException();
            parcel2.writeIntArray(scuDoorsRadarDistance);
            return true;
        }

        private boolean onTransact$getScuDsmPrompt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuDsmPrompt = getScuDsmPrompt();
            parcel2.writeNoException();
            parcel2.writeInt(scuDsmPrompt);
            return true;
        }

        private boolean onTransact$getScuDsmStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuDsmStatus = getScuDsmStatus();
            parcel2.writeNoException();
            parcel2.writeInt(scuDsmStatus);
            return true;
        }

        private boolean onTransact$getScuElkSwitchState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuElkSwitchState = getScuElkSwitchState();
            parcel2.writeNoException();
            parcel2.writeInt(scuElkSwitchState);
            return true;
        }

        private boolean onTransact$getScuFishEyeCamFailureSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuFishEyeCamFailureSt = getScuFishEyeCamFailureSt();
            parcel2.writeNoException();
            parcel2.writeInt(scuFishEyeCamFailureSt);
            return true;
        }

        private boolean onTransact$getScuFsdSwitchState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuFsdSwitchState = getScuFsdSwitchState();
            parcel2.writeNoException();
            parcel2.writeInt(scuFsdSwitchState);
            return true;
        }

        private boolean onTransact$getScuHmiDopRemind$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuHmiDopRemind = getScuHmiDopRemind();
            parcel2.writeNoException();
            parcel2.writeInt(scuHmiDopRemind);
            return true;
        }

        private boolean onTransact$getScuLccExitReason$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuLccExitReason = getScuLccExitReason();
            parcel2.writeNoException();
            parcel2.writeInt(scuLccExitReason);
            return true;
        }

        private boolean onTransact$getScuLdwLkaSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuLdwLkaSwitchStatus = getScuLdwLkaSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(scuLdwLkaSwitchStatus);
            return true;
        }

        private boolean onTransact$getScuLdwStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuLdwStatus = getScuLdwStatus();
            parcel2.writeNoException();
            parcel2.writeInt(scuLdwStatus);
            return true;
        }

        private boolean onTransact$getScuLeftRightBlindSpotDetectionSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] scuLeftRightBlindSpotDetectionSwitchStatus = getScuLeftRightBlindSpotDetectionSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeIntArray(scuLeftRightBlindSpotDetectionSwitchStatus);
            return true;
        }

        private boolean onTransact$getScuLeftRightDoorOpenWarningSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] scuLeftRightDoorOpenWarningSwitchStatus = getScuLeftRightDoorOpenWarningSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeIntArray(scuLeftRightDoorOpenWarningSwitchStatus);
            return true;
        }

        private boolean onTransact$getScuLeftRightRearCollisionSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] scuLeftRightRearCollisionSwitchStatus = getScuLeftRightRearCollisionSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeIntArray(scuLeftRightRearCollisionSwitchStatus);
            return true;
        }

        private boolean onTransact$getScuLeftRightRearCrossTrafficAlertStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] scuLeftRightRearCrossTrafficAlertStatus = getScuLeftRightRearCrossTrafficAlertStatus();
            parcel2.writeNoException();
            parcel2.writeIntArray(scuLeftRightRearCrossTrafficAlertStatus);
            return true;
        }

        private boolean onTransact$getScuLeftSdcBlindStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuLeftSdcBlindStatus = getScuLeftSdcBlindStatus();
            parcel2.writeNoException();
            parcel2.writeInt(scuLeftSdcBlindStatus);
            return true;
        }

        private boolean onTransact$getScuLeftSdcRadarDistance$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuLeftSdcRadarDistance = getScuLeftSdcRadarDistance();
            parcel2.writeNoException();
            parcel2.writeInt(scuLeftSdcRadarDistance);
            return true;
        }

        private boolean onTransact$getScuLeftSdcRadarErrorStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuLeftSdcRadarErrorStatus = getScuLeftSdcRadarErrorStatus();
            parcel2.writeNoException();
            parcel2.writeInt(scuLeftSdcRadarErrorStatus);
            return true;
        }

        private boolean onTransact$getScuLeftSdcRadarHallCounter$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuLeftSdcRadarHallCounter = getScuLeftSdcRadarHallCounter();
            parcel2.writeNoException();
            parcel2.writeInt(scuLeftSdcRadarHallCounter);
            return true;
        }

        private boolean onTransact$getScuLeftSdcRadarPeakLevel$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuLeftSdcRadarPeakLevel = getScuLeftSdcRadarPeakLevel();
            parcel2.writeNoException();
            parcel2.writeInt(scuLeftSdcRadarPeakLevel);
            return true;
        }

        private boolean onTransact$getScuLeftSdcRadarRt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuLeftSdcRadarRt = getScuLeftSdcRadarRt();
            parcel2.writeNoException();
            parcel2.writeInt(scuLeftSdcRadarRt);
            return true;
        }

        private boolean onTransact$getScuLeftSdcRadarStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuLeftSdcRadarStatus = getScuLeftSdcRadarStatus();
            parcel2.writeNoException();
            parcel2.writeInt(scuLeftSdcRadarStatus);
            return true;
        }

        private boolean onTransact$getScuLeftSdcRadarStatusCcp$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuLeftSdcRadarStatusCcp = getScuLeftSdcRadarStatusCcp();
            parcel2.writeNoException();
            parcel2.writeInt(scuLeftSdcRadarStatusCcp);
            return true;
        }

        private boolean onTransact$getScuLeftSdcRadarTof$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuLeftSdcRadarTof = getScuLeftSdcRadarTof();
            parcel2.writeNoException();
            parcel2.writeInt(scuLeftSdcRadarTof);
            return true;
        }

        private boolean onTransact$getScuLeftSdcRadarWaveWidth$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuLeftSdcRadarWaveWidth = getScuLeftSdcRadarWaveWidth();
            parcel2.writeNoException();
            parcel2.writeInt(scuLeftSdcRadarWaveWidth);
            return true;
        }

        private boolean onTransact$getScuLeftSdcSceneStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuLeftSdcSceneStatus = getScuLeftSdcSceneStatus();
            parcel2.writeNoException();
            parcel2.writeInt(scuLeftSdcSceneStatus);
            return true;
        }

        private boolean onTransact$getScuLeftSdcURadarDistance$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuLeftSdcURadarDistance = getScuLeftSdcURadarDistance();
            parcel2.writeNoException();
            parcel2.writeInt(scuLeftSdcURadarDistance);
            return true;
        }

        private boolean onTransact$getScuLkaState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuLkaState = getScuLkaState();
            parcel2.writeNoException();
            parcel2.writeInt(scuLkaState);
            return true;
        }

        private boolean onTransact$getScuLkaSwitchState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuLkaSwitchState = getScuLkaSwitchState();
            parcel2.writeNoException();
            parcel2.writeInt(scuLkaSwitchState);
            return true;
        }

        private boolean onTransact$getScuLocatDataWithZ$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float[] scuLocatDataWithZ = getScuLocatDataWithZ();
            parcel2.writeNoException();
            parcel2.writeFloatArray(scuLocatDataWithZ);
            return true;
        }

        private boolean onTransact$getScuMainCamFailureSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuMainCamFailureSt = getScuMainCamFailureSt();
            parcel2.writeNoException();
            parcel2.writeInt(scuMainCamFailureSt);
            return true;
        }

        private boolean onTransact$getScuMemoryParkingState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuMemoryParkingState = getScuMemoryParkingState();
            parcel2.writeNoException();
            parcel2.writeInt(scuMemoryParkingState);
            return true;
        }

        private boolean onTransact$getScuMrrFailureSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuMrrFailureSt = getScuMrrFailureSt();
            parcel2.writeNoException();
            parcel2.writeInt(scuMrrFailureSt);
            return true;
        }

        private boolean onTransact$getScuMrrRadarEmissStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuMrrRadarEmissStatus = getScuMrrRadarEmissStatus();
            parcel2.writeNoException();
            parcel2.writeInt(scuMrrRadarEmissStatus);
            return true;
        }

        private boolean onTransact$getScuNarrowCamFailureSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuNarrowCamFailureSt = getScuNarrowCamFailureSt();
            parcel2.writeNoException();
            parcel2.writeInt(scuNarrowCamFailureSt);
            return true;
        }

        private boolean onTransact$getScuNgpAvoidTruckSwSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuNgpAvoidTruckSwSt = getScuNgpAvoidTruckSwSt();
            parcel2.writeNoException();
            parcel2.writeInt(scuNgpAvoidTruckSwSt);
            return true;
        }

        private boolean onTransact$getScuNgpDriverConfirmLaneChangeSwSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuNgpDriverConfirmLaneChangeSwSt = getScuNgpDriverConfirmLaneChangeSwSt();
            parcel2.writeNoException();
            parcel2.writeInt(scuNgpDriverConfirmLaneChangeSwSt);
            return true;
        }

        private boolean onTransact$getScuNgpInfoTips1$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuNgpInfoTips1 = getScuNgpInfoTips1();
            parcel2.writeNoException();
            parcel2.writeInt(scuNgpInfoTips1);
            return true;
        }

        private boolean onTransact$getScuNgpLaneChangeMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuNgpLaneChangeMode = getScuNgpLaneChangeMode();
            parcel2.writeNoException();
            parcel2.writeInt(scuNgpLaneChangeMode);
            return true;
        }

        private boolean onTransact$getScuNgpLcTips1$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuNgpLcTips1 = getScuNgpLcTips1();
            parcel2.writeNoException();
            parcel2.writeInt(scuNgpLcTips1);
            return true;
        }

        private boolean onTransact$getScuNgpModeStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuNgpModeStatus = getScuNgpModeStatus();
            parcel2.writeNoException();
            parcel2.writeInt(scuNgpModeStatus);
            return true;
        }

        private boolean onTransact$getScuNgpOperationButtonSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuNgpOperationButtonSt = getScuNgpOperationButtonSt();
            parcel2.writeNoException();
            parcel2.writeInt(scuNgpOperationButtonSt);
            return true;
        }

        private boolean onTransact$getScuNgpPreferFastLaneSwSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuNgpPreferFastLaneSwSt = getScuNgpPreferFastLaneSwSt();
            parcel2.writeNoException();
            parcel2.writeInt(scuNgpPreferFastLaneSwSt);
            return true;
        }

        private boolean onTransact$getScuNgpRemindMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuNgpRemindMode = getScuNgpRemindMode();
            parcel2.writeNoException();
            parcel2.writeInt(scuNgpRemindMode);
            return true;
        }

        private boolean onTransact$getScuNgpTipsWindowsSwSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuNgpTipsWindowsSwSt = getScuNgpTipsWindowsSwSt();
            parcel2.writeNoException();
            parcel2.writeInt(scuNgpTipsWindowsSwSt);
            return true;
        }

        private boolean onTransact$getScuParkByMemorySwSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuParkByMemorySwSt = getScuParkByMemorySwSt();
            parcel2.writeNoException();
            parcel2.writeInt(scuParkByMemorySwSt);
            return true;
        }

        private boolean onTransact$getScuRctaStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuRctaStatus = getScuRctaStatus();
            parcel2.writeNoException();
            parcel2.writeInt(scuRctaStatus);
            return true;
        }

        private boolean onTransact$getScuRemoteFlag$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuRemoteFlag = getScuRemoteFlag();
            parcel2.writeNoException();
            parcel2.writeInt(scuRemoteFlag);
            return true;
        }

        private boolean onTransact$getScuRightSdcBlindStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuRightSdcBlindStatus = getScuRightSdcBlindStatus();
            parcel2.writeNoException();
            parcel2.writeInt(scuRightSdcBlindStatus);
            return true;
        }

        private boolean onTransact$getScuRightSdcRadarDistance$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuRightSdcRadarDistance = getScuRightSdcRadarDistance();
            parcel2.writeNoException();
            parcel2.writeInt(scuRightSdcRadarDistance);
            return true;
        }

        private boolean onTransact$getScuRightSdcRadarErrorStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuRightSdcRadarErrorStatus = getScuRightSdcRadarErrorStatus();
            parcel2.writeNoException();
            parcel2.writeInt(scuRightSdcRadarErrorStatus);
            return true;
        }

        private boolean onTransact$getScuRightSdcRadarHallCounter$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuRightSdcRadarHallCounter = getScuRightSdcRadarHallCounter();
            parcel2.writeNoException();
            parcel2.writeInt(scuRightSdcRadarHallCounter);
            return true;
        }

        private boolean onTransact$getScuRightSdcRadarPeakLevel$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuRightSdcRadarPeakLevel = getScuRightSdcRadarPeakLevel();
            parcel2.writeNoException();
            parcel2.writeInt(scuRightSdcRadarPeakLevel);
            return true;
        }

        private boolean onTransact$getScuRightSdcRadarRt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuRightSdcRadarRt = getScuRightSdcRadarRt();
            parcel2.writeNoException();
            parcel2.writeInt(scuRightSdcRadarRt);
            return true;
        }

        private boolean onTransact$getScuRightSdcRadarStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuRightSdcRadarStatus = getScuRightSdcRadarStatus();
            parcel2.writeNoException();
            parcel2.writeInt(scuRightSdcRadarStatus);
            return true;
        }

        private boolean onTransact$getScuRightSdcRadarStatusCcp$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuRightSdcRadarStatusCcp = getScuRightSdcRadarStatusCcp();
            parcel2.writeNoException();
            parcel2.writeInt(scuRightSdcRadarStatusCcp);
            return true;
        }

        private boolean onTransact$getScuRightSdcRadarTof$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuRightSdcRadarTof = getScuRightSdcRadarTof();
            parcel2.writeNoException();
            parcel2.writeInt(scuRightSdcRadarTof);
            return true;
        }

        private boolean onTransact$getScuRightSdcRadarWaveWidth$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuRightSdcRadarWaveWidth = getScuRightSdcRadarWaveWidth();
            parcel2.writeNoException();
            parcel2.writeInt(scuRightSdcRadarWaveWidth);
            return true;
        }

        private boolean onTransact$getScuRightSdcSceneStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuRightSdcSceneStatus = getScuRightSdcSceneStatus();
            parcel2.writeNoException();
            parcel2.writeInt(scuRightSdcSceneStatus);
            return true;
        }

        private boolean onTransact$getScuRightSdcURadarDistance$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuRightSdcURadarDistance = getScuRightSdcURadarDistance();
            parcel2.writeNoException();
            parcel2.writeInt(scuRightSdcURadarDistance);
            return true;
        }

        private boolean onTransact$getScuRoadVoiceTips$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuRoadVoiceTips = getScuRoadVoiceTips();
            parcel2.writeNoException();
            parcel2.writeInt(scuRoadVoiceTips);
            return true;
        }

        private boolean onTransact$getScuSdcAutoModeStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuSdcAutoModeStatus = getScuSdcAutoModeStatus();
            parcel2.writeNoException();
            parcel2.writeInt(scuSdcAutoModeStatus);
            return true;
        }

        private boolean onTransact$getScuSdcCtrlIndex1$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuSdcCtrlIndex1 = getScuSdcCtrlIndex1();
            parcel2.writeNoException();
            parcel2.writeInt(scuSdcCtrlIndex1);
            return true;
        }

        private boolean onTransact$getScuSdcCtrlIndex2$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuSdcCtrlIndex2 = getScuSdcCtrlIndex2();
            parcel2.writeNoException();
            parcel2.writeInt(scuSdcCtrlIndex2);
            return true;
        }

        private boolean onTransact$getScuSdcRadarFusion$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] scuSdcRadarFusion = getScuSdcRadarFusion();
            parcel2.writeNoException();
            parcel2.writeIntArray(scuSdcRadarFusion);
            return true;
        }

        private boolean onTransact$getScuSdcTips$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuSdcTips = getScuSdcTips();
            parcel2.writeNoException();
            parcel2.writeInt(scuSdcTips);
            return true;
        }

        private boolean onTransact$getScuSdcTts$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuSdcTts = getScuSdcTts();
            parcel2.writeNoException();
            parcel2.writeInt(scuSdcTts);
            return true;
        }

        private boolean onTransact$getScuSdcUltrasonicRadarVoiceTone$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuSdcUltrasonicRadarVoiceTone = getScuSdcUltrasonicRadarVoiceTone();
            parcel2.writeNoException();
            parcel2.writeInt(scuSdcUltrasonicRadarVoiceTone);
            return true;
        }

        private boolean onTransact$getScuSideCamsFailureSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] scuSideCamsFailureSt = getScuSideCamsFailureSt();
            parcel2.writeNoException();
            parcel2.writeIntArray(scuSideCamsFailureSt);
            return true;
        }

        private boolean onTransact$getScuSlaAlarmSwitchState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuSlaAlarmSwitchState = getScuSlaAlarmSwitchState();
            parcel2.writeNoException();
            parcel2.writeInt(scuSlaAlarmSwitchState);
            return true;
        }

        private boolean onTransact$getScuSlaStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuSlaStatus = getScuSlaStatus();
            parcel2.writeNoException();
            parcel2.writeInt(scuSlaStatus);
            return true;
        }

        private boolean onTransact$getScuSpeedLimitControlSystemState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuSpeedLimitControlSystemState = getScuSpeedLimitControlSystemState();
            parcel2.writeNoException();
            parcel2.writeInt(scuSpeedLimitControlSystemState);
            return true;
        }

        private boolean onTransact$getScuSpeedLimitDriverConfirmStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuSpeedLimitDriverConfirmStatus = getScuSpeedLimitDriverConfirmStatus();
            parcel2.writeNoException();
            parcel2.writeInt(scuSpeedLimitDriverConfirmStatus);
            return true;
        }

        private boolean onTransact$getScuSpeedLimitRange$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuSpeedLimitRange = getScuSpeedLimitRange();
            parcel2.writeNoException();
            parcel2.writeInt(scuSpeedLimitRange);
            return true;
        }

        private boolean onTransact$getScuSpeedLimitRemindVoice$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuSpeedLimitRemindVoice = getScuSpeedLimitRemindVoice();
            parcel2.writeNoException();
            parcel2.writeInt(scuSpeedLimitRemindVoice);
            return true;
        }

        private boolean onTransact$getScuSpeedLimitSwitchState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuSpeedLimitSwitchState = getScuSpeedLimitSwitchState();
            parcel2.writeNoException();
            parcel2.writeInt(scuSpeedLimitSwitchState);
            return true;
        }

        private boolean onTransact$getScuSteeringWheelEps$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuSteeringWheelEps = getScuSteeringWheelEps();
            parcel2.writeNoException();
            parcel2.writeInt(scuSteeringWheelEps);
            return true;
        }

        private boolean onTransact$getScuURadarDataInfo$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float[] scuURadarDataInfo = getScuURadarDataInfo();
            parcel2.writeNoException();
            parcel2.writeFloatArray(scuURadarDataInfo);
            return true;
        }

        private boolean onTransact$getScuXpilot3Status$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int scuXpilot3Status = getScuXpilot3Status();
            parcel2.writeNoException();
            parcel2.writeInt(scuXpilot3Status);
            return true;
        }

        private boolean onTransact$getSecRowLeftBlowLevel$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int secRowLeftBlowLevel = getSecRowLeftBlowLevel();
            parcel2.writeNoException();
            parcel2.writeInt(secRowLeftBlowLevel);
            return true;
        }

        private boolean onTransact$getSecRowLeftSeatFuncSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int secRowLeftSeatFuncSt = getSecRowLeftSeatFuncSt();
            parcel2.writeNoException();
            parcel2.writeInt(secRowLeftSeatFuncSt);
            return true;
        }

        private boolean onTransact$getSecRowLeftSeatPos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] secRowLeftSeatPos = getSecRowLeftSeatPos();
            parcel2.writeNoException();
            parcel2.writeIntArray(secRowLeftSeatPos);
            return true;
        }

        private boolean onTransact$getSecRowLtSeatAnglePos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int secRowLtSeatAnglePos = getSecRowLtSeatAnglePos();
            parcel2.writeNoException();
            parcel2.writeInt(secRowLtSeatAnglePos);
            return true;
        }

        private boolean onTransact$getSecRowLtSeatHeadHorzPos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int secRowLtSeatHeadHorzPos = getSecRowLtSeatHeadHorzPos();
            parcel2.writeNoException();
            parcel2.writeInt(secRowLtSeatHeadHorzPos);
            return true;
        }

        private boolean onTransact$getSecRowLtSeatHeadVerticalPos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int secRowLtSeatHeadVerticalPos = getSecRowLtSeatHeadVerticalPos();
            parcel2.writeNoException();
            parcel2.writeInt(secRowLtSeatHeadVerticalPos);
            return true;
        }

        private boolean onTransact$getSecRowLtSeatHorzPos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int secRowLtSeatHorzPos = getSecRowLtSeatHorzPos();
            parcel2.writeNoException();
            parcel2.writeInt(secRowLtSeatHorzPos);
            return true;
        }

        private boolean onTransact$getSecRowLtSeatLegVerticalPos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int secRowLtSeatLegVerticalPos = getSecRowLtSeatLegVerticalPos();
            parcel2.writeNoException();
            parcel2.writeInt(secRowLtSeatLegVerticalPos);
            return true;
        }

        private boolean onTransact$getSecRowLtSeatState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int secRowLtSeatState = getSecRowLtSeatState();
            parcel2.writeNoException();
            parcel2.writeInt(secRowLtSeatState);
            return true;
        }

        private boolean onTransact$getSecRowRightBlowLevel$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int secRowRightBlowLevel = getSecRowRightBlowLevel();
            parcel2.writeNoException();
            parcel2.writeInt(secRowRightBlowLevel);
            return true;
        }

        private boolean onTransact$getSecRowRightSeatFuncSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int secRowRightSeatFuncSt = getSecRowRightSeatFuncSt();
            parcel2.writeNoException();
            parcel2.writeInt(secRowRightSeatFuncSt);
            return true;
        }

        private boolean onTransact$getSecRowRightSeatPos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] secRowRightSeatPos = getSecRowRightSeatPos();
            parcel2.writeNoException();
            parcel2.writeIntArray(secRowRightSeatPos);
            return true;
        }

        private boolean onTransact$getSecRowRtSeatAnglePos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int secRowRtSeatAnglePos = getSecRowRtSeatAnglePos();
            parcel2.writeNoException();
            parcel2.writeInt(secRowRtSeatAnglePos);
            return true;
        }

        private boolean onTransact$getSecRowRtSeatHeadHorzPos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int secRowRtSeatHeadHorzPos = getSecRowRtSeatHeadHorzPos();
            parcel2.writeNoException();
            parcel2.writeInt(secRowRtSeatHeadHorzPos);
            return true;
        }

        private boolean onTransact$getSecRowRtSeatHeadVerticalPos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int secRowRtSeatHeadVerticalPos = getSecRowRtSeatHeadVerticalPos();
            parcel2.writeNoException();
            parcel2.writeInt(secRowRtSeatHeadVerticalPos);
            return true;
        }

        private boolean onTransact$getSecRowRtSeatHorzPos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int secRowRtSeatHorzPos = getSecRowRtSeatHorzPos();
            parcel2.writeNoException();
            parcel2.writeInt(secRowRtSeatHorzPos);
            return true;
        }

        private boolean onTransact$getSecRowRtSeatLegVerticalPos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int secRowRtSeatLegVerticalPos = getSecRowRtSeatLegVerticalPos();
            parcel2.writeNoException();
            parcel2.writeInt(secRowRtSeatLegVerticalPos);
            return true;
        }

        private boolean onTransact$getSecRowRtSeatState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int secRowRtSeatState = getSecRowRtSeatState();
            parcel2.writeNoException();
            parcel2.writeInt(secRowRtSeatState);
            return true;
        }

        private boolean onTransact$getSfmAnglePos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int sfmAnglePos = getSfmAnglePos();
            parcel2.writeNoException();
            parcel2.writeInt(sfmAnglePos);
            return true;
        }

        private boolean onTransact$getSfmCtrlState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int sfmCtrlState = getSfmCtrlState();
            parcel2.writeNoException();
            parcel2.writeInt(sfmCtrlState);
            return true;
        }

        private boolean onTransact$getSpcGrossEnergyGeneration$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float spcGrossEnergyGeneration = getSpcGrossEnergyGeneration();
            parcel2.writeNoException();
            parcel2.writeFloat(spcGrossEnergyGeneration);
            return true;
        }

        private boolean onTransact$getSpcRecentEnergyGeneration$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float spcRecentEnergyGeneration = getSpcRecentEnergyGeneration();
            parcel2.writeNoException();
            parcel2.writeFloat(spcRecentEnergyGeneration);
            return true;
        }

        private boolean onTransact$getSpcSolarPower$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float spcSolarPower = getSpcSolarPower();
            parcel2.writeNoException();
            parcel2.writeFloat(spcSolarPower);
            return true;
        }

        private boolean onTransact$getSpcSolarWorkSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int spcSolarWorkSt = getSpcSolarWorkSt();
            parcel2.writeNoException();
            parcel2.writeInt(spcSolarWorkSt);
            return true;
        }

        private boolean onTransact$getSpeedUpChargeMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int speedUpChargeMode = getSpeedUpChargeMode();
            parcel2.writeNoException();
            parcel2.writeInt(speedUpChargeMode);
            return true;
        }

        private boolean onTransact$getSrsPassengerCrashOccurSwSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int srsPassengerCrashOccurSwSt = getSrsPassengerCrashOccurSwSt();
            parcel2.writeNoException();
            parcel2.writeInt(srsPassengerCrashOccurSwSt);
            return true;
        }

        private boolean onTransact$getSrsRearLeftSeatOccupancyStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int srsRearLeftSeatOccupancyStatus = getSrsRearLeftSeatOccupancyStatus();
            parcel2.writeNoException();
            parcel2.writeInt(srsRearLeftSeatOccupancyStatus);
            return true;
        }

        private boolean onTransact$getSrsRearMiddleSeatOccupancyStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int srsRearMiddleSeatOccupancyStatus = getSrsRearMiddleSeatOccupancyStatus();
            parcel2.writeNoException();
            parcel2.writeInt(srsRearMiddleSeatOccupancyStatus);
            return true;
        }

        private boolean onTransact$getSrsRearRightSeatOccupancyStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int srsRearRightSeatOccupancyStatus = getSrsRearRightSeatOccupancyStatus();
            parcel2.writeNoException();
            parcel2.writeInt(srsRearRightSeatOccupancyStatus);
            return true;
        }

        private boolean onTransact$getStartCopyTboxLogResponse$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int startCopyTboxLogResponse = getStartCopyTboxLogResponse();
            parcel2.writeNoException();
            parcel2.writeInt(startCopyTboxLogResponse);
            return true;
        }

        private boolean onTransact$getTboxACChargeUnlockST$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int tboxACChargeUnlockST = getTboxACChargeUnlockST();
            parcel2.writeNoException();
            parcel2.writeInt(tboxACChargeUnlockST);
            return true;
        }

        private boolean onTransact$getTboxBatteryKeepTempAppointTime$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] tboxBatteryKeepTempAppointTime = getTboxBatteryKeepTempAppointTime();
            parcel2.writeNoException();
            parcel2.writeIntArray(tboxBatteryKeepTempAppointTime);
            return true;
        }

        private boolean onTransact$getTboxEcallMuteRequest$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int tboxEcallMuteRequest = getTboxEcallMuteRequest();
            parcel2.writeNoException();
            parcel2.writeInt(tboxEcallMuteRequest);
            return true;
        }

        private boolean onTransact$getTboxEcallState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int tboxEcallState = getTboxEcallState();
            parcel2.writeNoException();
            parcel2.writeInt(tboxEcallState);
            return true;
        }

        private boolean onTransact$getTboxFactoryPreCert$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            String tboxFactoryPreCert = getTboxFactoryPreCert();
            parcel2.writeNoException();
            parcel2.writeString(tboxFactoryPreCert);
            return true;
        }

        private boolean onTransact$getTboxIOTBusinessType$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int tboxIOTBusinessType = getTboxIOTBusinessType();
            parcel2.writeNoException();
            parcel2.writeInt(tboxIOTBusinessType);
            return true;
        }

        private boolean onTransact$getTboxModemCaptureResponse$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int tboxModemCaptureResponse = getTboxModemCaptureResponse();
            parcel2.writeNoException();
            parcel2.writeInt(tboxModemCaptureResponse);
            return true;
        }

        private boolean onTransact$getTboxMultiBleRenewalResponse$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            String tboxMultiBleRenewalResponse = getTboxMultiBleRenewalResponse();
            parcel2.writeNoException();
            parcel2.writeString(tboxMultiBleRenewalResponse);
            return true;
        }

        private boolean onTransact$getTboxNetmConfInfo$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            String tboxNetmConfInfo = getTboxNetmConfInfo();
            parcel2.writeNoException();
            parcel2.writeString(tboxNetmConfInfo);
            return true;
        }

        private boolean onTransact$getTboxPigeonNotification$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            String tboxPigeonNotification = getTboxPigeonNotification();
            parcel2.writeNoException();
            parcel2.writeString(tboxPigeonNotification);
            return true;
        }

        private boolean onTransact$getTboxRemoteBatteryKeepTempReq$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int tboxRemoteBatteryKeepTempReq = getTboxRemoteBatteryKeepTempReq();
            parcel2.writeNoException();
            parcel2.writeInt(tboxRemoteBatteryKeepTempReq);
            return true;
        }

        private boolean onTransact$getTboxToggleGpsLogSwitchResult$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int tboxToggleGpsLogSwitchResult = getTboxToggleGpsLogSwitchResult();
            parcel2.writeNoException();
            parcel2.writeInt(tboxToggleGpsLogSwitchResult);
            return true;
        }

        private boolean onTransact$getTboxUpgradePrepareResponse$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            String tboxUpgradePrepareResponse = getTboxUpgradePrepareResponse();
            parcel2.writeNoException();
            parcel2.writeString(tboxUpgradePrepareResponse);
            return true;
        }

        private boolean onTransact$getTpmsAllSensorStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] tpmsAllSensorStatus = getTpmsAllSensorStatus();
            parcel2.writeNoException();
            parcel2.writeIntArray(tpmsAllSensorStatus);
            return true;
        }

        private boolean onTransact$getTrdLeftDomeLightSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int trdLeftDomeLightSwitchStatus = getTrdLeftDomeLightSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(trdLeftDomeLightSwitchStatus);
            return true;
        }

        private boolean onTransact$getTrdRightDomeLightSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int trdRightDomeLightSwitchStatus = getTrdRightDomeLightSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(trdRightDomeLightSwitchStatus);
            return true;
        }

        private boolean onTransact$getTrdRowLeftSeatTiltState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int trdRowLeftSeatTiltState = getTrdRowLeftSeatTiltState();
            parcel2.writeNoException();
            parcel2.writeInt(trdRowLeftSeatTiltState);
            return true;
        }

        private boolean onTransact$getTrdRowLtSeatHeadMoveState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int trdRowLtSeatHeadMoveState = getTrdRowLtSeatHeadMoveState();
            parcel2.writeNoException();
            parcel2.writeInt(trdRowLtSeatHeadMoveState);
            return true;
        }

        private boolean onTransact$getTrdRowLtSeatHeadVerticalPos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int trdRowLtSeatHeadVerticalPos = getTrdRowLtSeatHeadVerticalPos();
            parcel2.writeNoException();
            parcel2.writeInt(trdRowLtSeatHeadVerticalPos);
            return true;
        }

        private boolean onTransact$getTrdRowLtSeatTiltPos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int trdRowLtSeatTiltPos = getTrdRowLtSeatTiltPos();
            parcel2.writeNoException();
            parcel2.writeInt(trdRowLtSeatTiltPos);
            return true;
        }

        private boolean onTransact$getTrdRowMidSeatHeadMoveState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int trdRowMidSeatHeadMoveState = getTrdRowMidSeatHeadMoveState();
            parcel2.writeNoException();
            parcel2.writeInt(trdRowMidSeatHeadMoveState);
            return true;
        }

        private boolean onTransact$getTrdRowMidSeatHeadVerticalPos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int trdRowMidSeatHeadVerticalPos = getTrdRowMidSeatHeadVerticalPos();
            parcel2.writeNoException();
            parcel2.writeInt(trdRowMidSeatHeadVerticalPos);
            return true;
        }

        private boolean onTransact$getTrdRowRightSeatTiltState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int trdRowRightSeatTiltState = getTrdRowRightSeatTiltState();
            parcel2.writeNoException();
            parcel2.writeInt(trdRowRightSeatTiltState);
            return true;
        }

        private boolean onTransact$getTrdRowRtSeatHeadMoveState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int trdRowRtSeatHeadMoveState = getTrdRowRtSeatHeadMoveState();
            parcel2.writeNoException();
            parcel2.writeInt(trdRowRtSeatHeadMoveState);
            return true;
        }

        private boolean onTransact$getTrdRowRtSeatHeadVerticalPos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int trdRowRtSeatHeadVerticalPos = getTrdRowRtSeatHeadVerticalPos();
            parcel2.writeNoException();
            parcel2.writeInt(trdRowRtSeatHeadVerticalPos);
            return true;
        }

        private boolean onTransact$getTrdRowRtSeatTiltPos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int trdRowRtSeatTiltPos = getTrdRowRtSeatTiltPos();
            parcel2.writeNoException();
            parcel2.writeInt(trdRowRtSeatTiltPos);
            return true;
        }

        private boolean onTransact$getTrdRowSeatAllPos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] trdRowSeatAllPos = getTrdRowSeatAllPos();
            parcel2.writeNoException();
            parcel2.writeIntArray(trdRowSeatAllPos);
            return true;
        }

        private boolean onTransact$getTrdRowSeatStowState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int trdRowSeatStowState = getTrdRowSeatStowState();
            parcel2.writeNoException();
            parcel2.writeInt(trdRowSeatStowState);
            return true;
        }

        private boolean onTransact$getV2LDischargeErrorReason$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int v2LDischargeErrorReason = getV2LDischargeErrorReason();
            parcel2.writeNoException();
            parcel2.writeInt(v2LDischargeErrorReason);
            return true;
        }

        private boolean onTransact$getVCUAWDModeSw$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vCUAWDModeSw = getVCUAWDModeSw();
            parcel2.writeNoException();
            parcel2.writeInt(vCUAWDModeSw);
            return true;
        }

        private boolean onTransact$getVMCRwsSwitchState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vMCRwsSwitchState = getVMCRwsSwitchState();
            parcel2.writeNoException();
            parcel2.writeInt(vMCRwsSwitchState);
            return true;
        }

        private boolean onTransact$getVMCSystemState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vMCSystemState = getVMCSystemState();
            parcel2.writeNoException();
            parcel2.writeInt(vMCSystemState);
            return true;
        }

        private boolean onTransact$getVMCZWalkModeState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vMCZWalkModeState = getVMCZWalkModeState();
            parcel2.writeNoException();
            parcel2.writeInt(vMCZWalkModeState);
            return true;
        }

        private boolean onTransact$getVcuAcChargCurrentMaxLimitedValue$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vcuAcChargCurrentMaxLimitedValue = getVcuAcChargCurrentMaxLimitedValue();
            parcel2.writeNoException();
            parcel2.writeInt(vcuAcChargCurrentMaxLimitedValue);
            return true;
        }

        private boolean onTransact$getVcuAsDriveModeStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vcuAsDriveModeStatus = getVcuAsDriveModeStatus();
            parcel2.writeNoException();
            parcel2.writeInt(vcuAsDriveModeStatus);
            return true;
        }

        private boolean onTransact$getVcuAutoEasyLoadingSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vcuAutoEasyLoadingSwitchStatus = getVcuAutoEasyLoadingSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(vcuAutoEasyLoadingSwitchStatus);
            return true;
        }

        private boolean onTransact$getVcuAvalibleDrivingDistanceFloat$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float vcuAvalibleDrivingDistanceFloat = getVcuAvalibleDrivingDistanceFloat();
            parcel2.writeNoException();
            parcel2.writeFloat(vcuAvalibleDrivingDistanceFloat);
            return true;
        }

        private boolean onTransact$getVcuBatBumpRecrdRequest$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vcuBatBumpRecrdRequest = getVcuBatBumpRecrdRequest();
            parcel2.writeNoException();
            parcel2.writeInt(vcuBatBumpRecrdRequest);
            return true;
        }

        private boolean onTransact$getVcuBmsActualSocValue$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float vcuBmsActualSocValue = getVcuBmsActualSocValue();
            parcel2.writeNoException();
            parcel2.writeFloat(vcuBmsActualSocValue);
            return true;
        }

        private boolean onTransact$getVcuBmsBatteryAverageTemperature$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vcuBmsBatteryAverageTemperature = getVcuBmsBatteryAverageTemperature();
            parcel2.writeNoException();
            parcel2.writeInt(vcuBmsBatteryAverageTemperature);
            return true;
        }

        private boolean onTransact$getVcuBmsBatteryCurrent$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float vcuBmsBatteryCurrent = getVcuBmsBatteryCurrent();
            parcel2.writeNoException();
            parcel2.writeFloat(vcuBmsBatteryCurrent);
            return true;
        }

        private boolean onTransact$getVcuBmsBatteryVoltage$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vcuBmsBatteryVoltage = getVcuBmsBatteryVoltage();
            parcel2.writeNoException();
            parcel2.writeInt(vcuBmsBatteryVoltage);
            return true;
        }

        private boolean onTransact$getVcuBmsChargeStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vcuBmsChargeStatus = getVcuBmsChargeStatus();
            parcel2.writeNoException();
            parcel2.writeInt(vcuBmsChargeStatus);
            return true;
        }

        private boolean onTransact$getVcuBmsCurrentBatterySocDisp$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float vcuBmsCurrentBatterySocDisp = getVcuBmsCurrentBatterySocDisp();
            parcel2.writeNoException();
            parcel2.writeFloat(vcuBmsCurrentBatterySocDisp);
            return true;
        }

        private boolean onTransact$getVcuBmsMaximumAvailChargePower$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float vcuBmsMaximumAvailChargePower = getVcuBmsMaximumAvailChargePower();
            parcel2.writeNoException();
            parcel2.writeFloat(vcuBmsMaximumAvailChargePower);
            return true;
        }

        private boolean onTransact$getVcuBmsMaximumAvailDischargePower$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float vcuBmsMaximumAvailDischargePower = getVcuBmsMaximumAvailDischargePower();
            parcel2.writeNoException();
            parcel2.writeFloat(vcuBmsMaximumAvailDischargePower);
            return true;
        }

        private boolean onTransact$getVcuBrakeLightOnOffStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vcuBrakeLightOnOffStatus = getVcuBrakeLightOnOffStatus();
            parcel2.writeNoException();
            parcel2.writeInt(vcuBrakeLightOnOffStatus);
            return true;
        }

        private boolean onTransact$getVcuCarStationaryStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vcuCarStationaryStatus = getVcuCarStationaryStatus();
            parcel2.writeNoException();
            parcel2.writeInt(vcuCarStationaryStatus);
            return true;
        }

        private boolean onTransact$getVcuCdcuChargeGunStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vcuCdcuChargeGunStatus = getVcuCdcuChargeGunStatus();
            parcel2.writeNoException();
            parcel2.writeInt(vcuCdcuChargeGunStatus);
            return true;
        }

        private boolean onTransact$getVcuChargeDischargePower$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float vcuChargeDischargePower = getVcuChargeDischargePower();
            parcel2.writeNoException();
            parcel2.writeFloat(vcuChargeDischargePower);
            return true;
        }

        private boolean onTransact$getVcuChargeHighVoltageLoadPower$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float vcuChargeHighVoltageLoadPower = getVcuChargeHighVoltageLoadPower();
            parcel2.writeNoException();
            parcel2.writeFloat(vcuChargeHighVoltageLoadPower);
            return true;
        }

        private boolean onTransact$getVcuChargeSocQuantityFloat$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float vcuChargeSocQuantityFloat = getVcuChargeSocQuantityFloat();
            parcel2.writeNoException();
            parcel2.writeFloat(vcuChargeSocQuantityFloat);
            return true;
        }

        private boolean onTransact$getVcuChargerLowVolSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vcuChargerLowVolSt = getVcuChargerLowVolSt();
            parcel2.writeNoException();
            parcel2.writeInt(vcuChargerLowVolSt);
            return true;
        }

        private boolean onTransact$getVcuCltcAvailableDrivingDistance$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vcuCltcAvailableDrivingDistance = getVcuCltcAvailableDrivingDistance();
            parcel2.writeNoException();
            parcel2.writeInt(vcuCltcAvailableDrivingDistance);
            return true;
        }

        private boolean onTransact$getVcuCltcAvailableDrivingDistanceFloat$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float vcuCltcAvailableDrivingDistanceFloat = getVcuCltcAvailableDrivingDistanceFloat();
            parcel2.writeNoException();
            parcel2.writeFloat(vcuCltcAvailableDrivingDistanceFloat);
            return true;
        }

        private boolean onTransact$getVcuDcPreWarmInStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vcuDcPreWarmInStatus = getVcuDcPreWarmInStatus();
            parcel2.writeNoException();
            parcel2.writeInt(vcuDcPreWarmInStatus);
            return true;
        }

        private boolean onTransact$getVcuDcPreWarmRequestStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vcuDcPreWarmRequestStatus = getVcuDcPreWarmRequestStatus();
            parcel2.writeNoException();
            parcel2.writeInt(vcuDcPreWarmRequestStatus);
            return true;
        }

        private boolean onTransact$getVcuDcPreWarmSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vcuDcPreWarmSwitchStatus = getVcuDcPreWarmSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(vcuDcPreWarmSwitchStatus);
            return true;
        }

        private boolean onTransact$getVcuDepolarizeStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vcuDepolarizeStatus = getVcuDepolarizeStatus();
            parcel2.writeNoException();
            parcel2.writeInt(vcuDepolarizeStatus);
            return true;
        }

        private boolean onTransact$getVcuDischargeQuantityFloat$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float vcuDischargeQuantityFloat = getVcuDischargeQuantityFloat();
            parcel2.writeNoException();
            parcel2.writeFloat(vcuDischargeQuantityFloat);
            return true;
        }

        private boolean onTransact$getVcuDriveMileIncreaseStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vcuDriveMileIncreaseStatus = getVcuDriveMileIncreaseStatus();
            parcel2.writeNoException();
            parcel2.writeInt(vcuDriveMileIncreaseStatus);
            return true;
        }

        private boolean onTransact$getVcuDynamicAvailableDrivingDistance$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float vcuDynamicAvailableDrivingDistance = getVcuDynamicAvailableDrivingDistance();
            parcel2.writeNoException();
            parcel2.writeFloat(vcuDynamicAvailableDrivingDistance);
            return true;
        }

        private boolean onTransact$getVcuEnduranceMileageMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vcuEnduranceMileageMode = getVcuEnduranceMileageMode();
            parcel2.writeNoException();
            parcel2.writeInt(vcuEnduranceMileageMode);
            return true;
        }

        private boolean onTransact$getVcuExhibModeSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vcuExhibModeSwitchStatus = getVcuExhibModeSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(vcuExhibModeSwitchStatus);
            return true;
        }

        private boolean onTransact$getVcuKeyBatteryStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vcuKeyBatteryStatus = getVcuKeyBatteryStatus();
            parcel2.writeNoException();
            parcel2.writeInt(vcuKeyBatteryStatus);
            return true;
        }

        private boolean onTransact$getVcuLastHundredKmAverageVehConsume$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float vcuLastHundredKmAverageVehConsume = getVcuLastHundredKmAverageVehConsume();
            parcel2.writeNoException();
            parcel2.writeFloat(vcuLastHundredKmAverageVehConsume);
            return true;
        }

        private boolean onTransact$getVcuLastTwentyKmAverageVehConsume$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float vcuLastTwentyKmAverageVehConsume = getVcuLastTwentyKmAverageVehConsume();
            parcel2.writeNoException();
            parcel2.writeFloat(vcuLastTwentyKmAverageVehConsume);
            return true;
        }

        private boolean onTransact$getVcuLastTwoPointFiveKmAverageVehConsume$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float vcuLastTwoPointFiveKmAverageVehConsume = getVcuLastTwoPointFiveKmAverageVehConsume();
            parcel2.writeNoException();
            parcel2.writeFloat(vcuLastTwoPointFiveKmAverageVehConsume);
            return true;
        }

        private boolean onTransact$getVcuMotorPowerMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vcuMotorPowerMode = getVcuMotorPowerMode();
            parcel2.writeNoException();
            parcel2.writeInt(vcuMotorPowerMode);
            return true;
        }

        private boolean onTransact$getVcuNedcAvalibleDrivingDistanceFloat$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float vcuNedcAvalibleDrivingDistanceFloat = getVcuNedcAvalibleDrivingDistanceFloat();
            parcel2.writeNoException();
            parcel2.writeFloat(vcuNedcAvalibleDrivingDistanceFloat);
            return true;
        }

        private boolean onTransact$getVcuObcAcCurrent$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float vcuObcAcCurrent = getVcuObcAcCurrent();
            parcel2.writeNoException();
            parcel2.writeFloat(vcuObcAcCurrent);
            return true;
        }

        private boolean onTransact$getVcuObcAcVoltage$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float vcuObcAcVoltage = getVcuObcAcVoltage();
            parcel2.writeNoException();
            parcel2.writeFloat(vcuObcAcVoltage);
            return true;
        }

        private boolean onTransact$getVcuObcAcVoltageStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vcuObcAcVoltageStatus = getVcuObcAcVoltageStatus();
            parcel2.writeNoException();
            parcel2.writeInt(vcuObcAcVoltageStatus);
            return true;
        }

        private boolean onTransact$getVcuObcFaultPhaseLossStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vcuObcFaultPhaseLossStatus = getVcuObcFaultPhaseLossStatus();
            parcel2.writeNoException();
            parcel2.writeInt(vcuObcFaultPhaseLossStatus);
            return true;
        }

        private boolean onTransact$getVcuPowerResponseMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vcuPowerResponseMode = getVcuPowerResponseMode();
            parcel2.writeNoException();
            parcel2.writeInt(vcuPowerResponseMode);
            return true;
        }

        private boolean onTransact$getVcuSecondaryPowerOffResponce$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vcuSecondaryPowerOffResponce = getVcuSecondaryPowerOffResponce();
            parcel2.writeNoException();
            parcel2.writeInt(vcuSecondaryPowerOffResponce);
            return true;
        }

        private boolean onTransact$getVcuSpecialDrivingMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vcuSpecialDrivingMode = getVcuSpecialDrivingMode();
            parcel2.writeNoException();
            parcel2.writeInt(vcuSpecialDrivingMode);
            return true;
        }

        private boolean onTransact$getVcuSsaSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vcuSsaSwitchStatus = getVcuSsaSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(vcuSsaSwitchStatus);
            return true;
        }

        private boolean onTransact$getVcuSuperChargeDiffIncreaseRange$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vcuSuperChargeDiffIncreaseRange = getVcuSuperChargeDiffIncreaseRange();
            parcel2.writeNoException();
            parcel2.writeInt(vcuSuperChargeDiffIncreaseRange);
            return true;
        }

        private boolean onTransact$getVcuSuperChargeFlag$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vcuSuperChargeFlag = getVcuSuperChargeFlag();
            parcel2.writeNoException();
            parcel2.writeInt(vcuSuperChargeFlag);
            return true;
        }

        private boolean onTransact$getVcuTrailerModeSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vcuTrailerModeSwitchStatus = getVcuTrailerModeSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(vcuTrailerModeSwitchStatus);
            return true;
        }

        private boolean onTransact$getVcuVirtualAccPedalStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vcuVirtualAccPedalStatus = getVcuVirtualAccPedalStatus();
            parcel2.writeNoException();
            parcel2.writeInt(vcuVirtualAccPedalStatus);
            return true;
        }

        private boolean onTransact$getVcuWltpAvailableDrivingDistance$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vcuWltpAvailableDrivingDistance = getVcuWltpAvailableDrivingDistance();
            parcel2.writeNoException();
            parcel2.writeInt(vcuWltpAvailableDrivingDistance);
            return true;
        }

        private boolean onTransact$getVcuWltpAvailableDrivingDistanceFloat$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float vcuWltpAvailableDrivingDistanceFloat = getVcuWltpAvailableDrivingDistanceFloat();
            parcel2.writeNoException();
            parcel2.writeFloat(vcuWltpAvailableDrivingDistanceFloat);
            return true;
        }

        private boolean onTransact$getVcuXPortIntellCalcCfg$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float[] vcuXPortIntellCalcCfg = getVcuXPortIntellCalcCfg();
            parcel2.writeNoException();
            parcel2.writeFloatArray(vcuXPortIntellCalcCfg);
            return true;
        }

        private boolean onTransact$getVcuXPortIntellCalcCfg20Hz$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float[] vcuXPortIntellCalcCfg20Hz = getVcuXPortIntellCalcCfg20Hz();
            parcel2.writeNoException();
            parcel2.writeFloatArray(vcuXPortIntellCalcCfg20Hz);
            return true;
        }

        private boolean onTransact$getVcuXPortIntellCalcCfg50Hz$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            float[] vcuXPortIntellCalcCfg50Hz = getVcuXPortIntellCalcCfg50Hz();
            parcel2.writeNoException();
            parcel2.writeFloatArray(vcuXPortIntellCalcCfg50Hz);
            return true;
        }

        private boolean onTransact$getVcuXpedalCtrlMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vcuXpedalCtrlMode = getVcuXpedalCtrlMode();
            parcel2.writeNoException();
            parcel2.writeInt(vcuXpedalCtrlMode);
            return true;
        }

        private boolean onTransact$getVcuXpedalModeSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vcuXpedalModeSwitchStatus = getVcuXpedalModeSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(vcuXpedalModeSwitchStatus);
            return true;
        }

        private boolean onTransact$getVcuXsportMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vcuXsportMode = getVcuXsportMode();
            parcel2.writeNoException();
            parcel2.writeInt(vcuXsportMode);
            return true;
        }

        private boolean onTransact$getVpmRdpLeftWarningStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vpmRdpLeftWarningStatus = getVpmRdpLeftWarningStatus();
            parcel2.writeNoException();
            parcel2.writeInt(vpmRdpLeftWarningStatus);
            return true;
        }

        private boolean onTransact$getVpmRdpRightWarningStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int vpmRdpRightWarningStatus = getVpmRdpRightWarningStatus();
            parcel2.writeNoException();
            parcel2.writeInt(vpmRdpRightWarningStatus);
            return true;
        }

        private boolean onTransact$getWasherFluidWarning$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int washerFluidWarning = getWasherFluidWarning();
            parcel2.writeNoException();
            parcel2.writeInt(washerFluidWarning);
            return true;
        }

        private boolean onTransact$getXpuApRemoteSw$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int xpuApRemoteSw = getXpuApRemoteSw();
            parcel2.writeNoException();
            parcel2.writeInt(xpuApRemoteSw);
            return true;
        }

        private boolean onTransact$getXpuAsLockScenario$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int xpuAsLockScenario = getXpuAsLockScenario();
            parcel2.writeNoException();
            parcel2.writeInt(xpuAsLockScenario);
            return true;
        }

        private boolean onTransact$getXpuAsTargetMaximumHeightRequest$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int xpuAsTargetMaximumHeightRequest = getXpuAsTargetMaximumHeightRequest();
            parcel2.writeNoException();
            parcel2.writeInt(xpuAsTargetMaximumHeightRequest);
            return true;
        }

        private boolean onTransact$getXpuAsTargetMinimumHeightRequest$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int xpuAsTargetMinimumHeightRequest = getXpuAsTargetMinimumHeightRequest();
            parcel2.writeNoException();
            parcel2.writeInt(xpuAsTargetMinimumHeightRequest);
            return true;
        }

        private boolean onTransact$getXpuAutoParkingTipsType$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int xpuAutoParkingTipsType = getXpuAutoParkingTipsType();
            parcel2.writeNoException();
            parcel2.writeInt(xpuAutoParkingTipsType);
            return true;
        }

        private boolean onTransact$getXpuCityNgpSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int xpuCityNgpSwitchStatus = getXpuCityNgpSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(xpuCityNgpSwitchStatus);
            return true;
        }

        private boolean onTransact$getXpuDriverHeadFaceArea$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int xpuDriverHeadFaceArea = getXpuDriverHeadFaceArea();
            parcel2.writeNoException();
            parcel2.writeInt(xpuDriverHeadFaceArea);
            return true;
        }

        private boolean onTransact$getXpuHeadPoseData$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int[] xpuHeadPoseData = getXpuHeadPoseData();
            parcel2.writeNoException();
            parcel2.writeIntArray(xpuHeadPoseData);
            return true;
        }

        private boolean onTransact$getXpuHmiDopRemind$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int xpuHmiDopRemind = getXpuHmiDopRemind();
            parcel2.writeNoException();
            parcel2.writeInt(xpuHmiDopRemind);
            return true;
        }

        private boolean onTransact$getXpuISLCDriverSet$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int xpuISLCDriverSet = getXpuISLCDriverSet();
            parcel2.writeNoException();
            parcel2.writeInt(xpuISLCDriverSet);
            return true;
        }

        private boolean onTransact$getXpuIntelligentChargePortSystemStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int xpuIntelligentChargePortSystemStatus = getXpuIntelligentChargePortSystemStatus();
            parcel2.writeNoException();
            parcel2.writeInt(xpuIntelligentChargePortSystemStatus);
            return true;
        }

        private boolean onTransact$getXpuIntelligentChargePortSystemToneType$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int xpuIntelligentChargePortSystemToneType = getXpuIntelligentChargePortSystemToneType();
            parcel2.writeNoException();
            parcel2.writeInt(xpuIntelligentChargePortSystemToneType);
            return true;
        }

        private boolean onTransact$getXpuIntelligentChargePortTipsType$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int xpuIntelligentChargePortTipsType = getXpuIntelligentChargePortTipsType();
            parcel2.writeNoException();
            parcel2.writeInt(xpuIntelligentChargePortTipsType);
            return true;
        }

        private boolean onTransact$getXpuIntelligentChargePortTtsBroadcastType$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int xpuIntelligentChargePortTtsBroadcastType = getXpuIntelligentChargePortTtsBroadcastType();
            parcel2.writeNoException();
            parcel2.writeInt(xpuIntelligentChargePortTtsBroadcastType);
            return true;
        }

        private boolean onTransact$getXpuLLCCDetourSw$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int xpuLLCCDetourSw = getXpuLLCCDetourSw();
            parcel2.writeNoException();
            parcel2.writeInt(xpuLLCCDetourSw);
            return true;
        }

        private boolean onTransact$getXpuLccLStraightSw$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int xpuLccLStraightSw = getXpuLccLStraightSw();
            parcel2.writeNoException();
            parcel2.writeInt(xpuLccLStraightSw);
            return true;
        }

        private boolean onTransact$getXpuLongLatPeriodData$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            byte[] xpuLongLatPeriodData = getXpuLongLatPeriodData();
            parcel2.writeNoException();
            parcel2.writeByteArray(xpuLongLatPeriodData);
            return true;
        }

        private boolean onTransact$getXpuLssSensitivitySwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int xpuLssSensitivitySwitchStatus = getXpuLssSensitivitySwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(xpuLssSensitivitySwitchStatus);
            return true;
        }

        private boolean onTransact$getXpuModeIndexDefine$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int xpuModeIndexDefine = getXpuModeIndexDefine();
            parcel2.writeNoException();
            parcel2.writeInt(xpuModeIndexDefine);
            return true;
        }

        private boolean onTransact$getXpuNaviConfirmProto$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            byte[] xpuNaviConfirmProto = getXpuNaviConfirmProto();
            parcel2.writeNoException();
            parcel2.writeByteArray(xpuNaviConfirmProto);
            return true;
        }

        private boolean onTransact$getXpuNedcSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int xpuNedcSwitchStatus = getXpuNedcSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(xpuNedcSwitchStatus);
            return true;
        }

        private boolean onTransact$getXpuNgpCustomSpeedCountLever$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int xpuNgpCustomSpeedCountLever = getXpuNgpCustomSpeedCountLever();
            parcel2.writeNoException();
            parcel2.writeInt(xpuNgpCustomSpeedCountLever);
            return true;
        }

        private boolean onTransact$getXpuNgpCustomSpeedCountPercent$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int xpuNgpCustomSpeedCountPercent = getXpuNgpCustomSpeedCountPercent();
            parcel2.writeNoException();
            parcel2.writeInt(xpuNgpCustomSpeedCountPercent);
            return true;
        }

        private boolean onTransact$getXpuNgpCustomSpeedSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int xpuNgpCustomSpeedSwitchStatus = getXpuNgpCustomSpeedSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(xpuNgpCustomSpeedSwitchStatus);
            return true;
        }

        private boolean onTransact$getXpuNgpModeIndexMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int xpuNgpModeIndexMode = getXpuNgpModeIndexMode();
            parcel2.writeNoException();
            parcel2.writeInt(xpuNgpModeIndexMode);
            return true;
        }

        private boolean onTransact$getXpuNgpOptimalLaneSw$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int xpuNgpOptimalLaneSw = getXpuNgpOptimalLaneSw();
            parcel2.writeNoException();
            parcel2.writeInt(xpuNgpOptimalLaneSw);
            return true;
        }

        private boolean onTransact$getXpuNgpSwitchTransitionStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int xpuNgpSwitchTransitionStatus = getXpuNgpSwitchTransitionStatus();
            parcel2.writeNoException();
            parcel2.writeInt(xpuNgpSwitchTransitionStatus);
            return true;
        }

        private boolean onTransact$getXpuNgpULCSwMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int xpuNgpULCSwMode = getXpuNgpULCSwMode();
            parcel2.writeNoException();
            parcel2.writeInt(xpuNgpULCSwMode);
            return true;
        }

        private boolean onTransact$getXpuNraControlStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int xpuNraControlStatus = getXpuNraControlStatus();
            parcel2.writeNoException();
            parcel2.writeInt(xpuNraControlStatus);
            return true;
        }

        private boolean onTransact$getXpuNraSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int xpuNraSwitchStatus = getXpuNraSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(xpuNraSwitchStatus);
            return true;
        }

        private boolean onTransact$getXpuRaebActiveStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int xpuRaebActiveStatus = getXpuRaebActiveStatus();
            parcel2.writeNoException();
            parcel2.writeInt(xpuRaebActiveStatus);
            return true;
        }

        private boolean onTransact$getXpuRaebSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int xpuRaebSwitchStatus = getXpuRaebSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(xpuRaebSwitchStatus);
            return true;
        }

        private boolean onTransact$getXpuScpChargePortCommandStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int xpuScpChargePortCommandStatus = getXpuScpChargePortCommandStatus();
            parcel2.writeNoException();
            parcel2.writeInt(xpuScpChargePortCommandStatus);
            return true;
        }

        private boolean onTransact$getXpuScpSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int xpuScpSwitchStatus = getXpuScpSwitchStatus();
            parcel2.writeNoException();
            parcel2.writeInt(xpuScpSwitchStatus);
            return true;
        }

        private boolean onTransact$getXpuSlaSpeedWarningStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int xpuSlaSpeedWarningStatus = getXpuSlaSpeedWarningStatus();
            parcel2.writeNoException();
            parcel2.writeInt(xpuSlaSpeedWarningStatus);
            return true;
        }

        private boolean onTransact$getXpuSlifSoundStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int xpuSlifSoundStatus = getXpuSlifSoundStatus();
            parcel2.writeNoException();
            parcel2.writeInt(xpuSlifSoundStatus);
            return true;
        }

        private boolean onTransact$getXpuSlwfVoiceStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int xpuSlwfVoiceStatus = getXpuSlwfVoiceStatus();
            parcel2.writeNoException();
            parcel2.writeInt(xpuSlwfVoiceStatus);
            return true;
        }

        private boolean onTransact$getXpuVehLocationProto$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            byte[] xpuVehLocationProto = getXpuVehLocationProto();
            parcel2.writeNoException();
            parcel2.writeByteArray(xpuVehLocationProto);
            return true;
        }

        private boolean onTransact$getXpuXmartPigeonMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            int xpuXmartPigeonMode = getXpuXmartPigeonMode();
            parcel2.writeNoException();
            parcel2.writeInt(xpuXmartPigeonMode);
            return true;
        }

        private boolean onTransact$notifyScuRearViewMirrorAdjustmentPageState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            notifyScuRearViewMirrorAdjustmentPageState(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$requestIcmDashboardLightsStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            requestIcmDashboardLightsStatus();
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$saveMsmDAllPositionsToMcu$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            saveMsmDAllPositionsToMcu(parcel.readInt(), parcel.readInt(), parcel.readInt(), parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$saveMsmPassengerAllPositionsToMcu$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            saveMsmPassengerAllPositionsToMcu(parcel.readInt(), parcel.readInt(), parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$sendCNGPCityMapCtrlReq$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            sendCNGPCityMapCtrlReq(parcel.createByteArray());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$sendFinishCopyTboxLogRequest$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            sendFinishCopyTboxLogRequest();
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$sendIcmLogCompressRequest$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            sendIcmLogCompressRequest(parcel.readString());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$sendIcmRandisDisplayType$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            sendIcmRandisDisplayType(parcel.readString());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$sendLCMSLogCtrlReq$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            sendLCMSLogCtrlReq(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$sendMcuGeofenceStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            sendMcuGeofenceStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$sendMcuMapVersion$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            sendMcuMapVersion(parcel.readString());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$sendMcuOpenWifiHotspotResponse$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            sendMcuOpenWifiHotspotResponse(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$sendMcuOtaUpdateFile$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            sendMcuOtaUpdateFile(parcel.readString());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$sendMcuTboxVBusControlCommand$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            sendMcuTboxVBusControlCommand(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$sendPhoneRemoteAPEvent$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            sendPhoneRemoteAPEvent(parcel.readString());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$sendPigeonAndXPURemoteAPHeartBeat$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            sendPigeonAndXPURemoteAPHeartBeat(parcel.readString());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$sendRCMSLogCtrlReq$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            sendRCMSLogCtrlReq(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$sendRoutingForTboxRequest$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            sendRoutingForTboxRequest(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$sendSRHeartBeatInfoRequest$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            sendSRHeartBeatInfoRequest(parcel.readString());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$sendSRLagLogHeartBeatFeedBackRequest$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            sendSRLagLogHeartBeatFeedBackRequest(parcel.readString());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$sendScuNaviLoadLinkType$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            sendScuNaviLoadLinkType(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$sendStartCopyTboxLogRequest$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            sendStartCopyTboxLogRequest(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$sendTboxApnTrafficInfo$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            sendTboxApnTrafficInfo(parcel.readLong(), parcel.readLong(), parcel.readLong(), parcel.readLong());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$sendTboxEmergencyWifiBleMessage$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            sendTboxEmergencyWifiBleMessage(parcel.readString());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$sendTboxFactoryPreCert$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            sendTboxFactoryPreCert(parcel.readString());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$sendTboxLocationInfo$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            sendTboxLocationInfo(parcel.readString());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$sendTboxModemCaptureRequest$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            sendTboxModemCaptureRequest(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$sendTboxMultiBleRenewalRequest$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            sendTboxMultiBleRenewalRequest(parcel.readString());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$sendTboxOtaWorkingStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            sendTboxOtaWorkingStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$sendTboxWakeOrderRTC$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            sendTboxWakeOrderRTC(parcel.readString());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$sendXpuCountryCodeInfo$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            sendXpuCountryCodeInfo(parcel.readString());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$sendXpuGeoFencingConfig$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            sendXpuGeoFencingConfig(parcel.readString());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$sendXpuScpGeoInfo$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            sendXpuScpGeoInfo(parcel.readString());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$sendXpuTransferVpaAbInfo$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            sendXpuTransferVpaAbInfo(parcel.readString());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$sendXpuTransferVpaCmd$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            sendXpuTransferVpaCmd(parcel.readString());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$sendXpuZgEventMessage$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            sendXpuZgEventMessage(parcel.createByteArray());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$sendXpuZgPeriodMessage$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            sendXpuZgPeriodMessage(parcel.createByteArray());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setAmpChannelSwitchControlStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setAmpChannelSwitchControlStatus(parcel.createByteArray());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setAmpChannelVolumeControlValue$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setAmpChannelVolumeControlValue(parcel.createByteArray());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setAmpDolbyAtomsSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setAmpDolbyAtomsSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setAmpDyn3DEffectLevel$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setAmpDyn3DEffectLevel(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setAmpDynSdvcLevel$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setAmpDynSdvcLevel(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setAmpEffectStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setAmpEffectStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setAmpFreqGainGroupControlValue$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setAmpFreqGainGroupControlValue(parcel.createIntArray());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setAmpGroupSwitchControlStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setAmpGroupSwitchControlStatus(parcel.createByteArray());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setAmpGroupVolumeControlValue$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setAmpGroupVolumeControlValue(parcel.createByteArray());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setAmpPowerRequestSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setAmpPowerRequestSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setAmpSdsscLevel$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setAmpSdsscLevel(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setAmpSoundSourceDolbyFormat$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setAmpSoundSourceDolbyFormat(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setAmpSoundStyle$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setAmpSoundStyle(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setArsFoldOrUnfold$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setArsFoldOrUnfold(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setArsInitState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setArsInitState(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setArsWorkingMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setArsWorkingMode(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setAtlConfiguration$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setAtlConfiguration(parcel.createByteArray());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setAtlLin1Data$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setAtlLin1Data(parcel.createByteArray());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setAtlLin2Data$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setAtlLin2Data(parcel.createByteArray());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setAtlLin3Data$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setAtlLin3Data(parcel.createByteArray());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setAtlPowerRequestSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setAtlPowerRequestSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setAtlSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setAtlSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setAutoLightSwitch$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setAutoLightSwitch(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setAvasChargeSoundSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setAvasChargeSoundSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setAvasLockSoundEffect$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setAvasLockSoundEffect(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setAvasLockUnlockSoundSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setAvasLockUnlockSoundSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setAvasSocSoundSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setAvasSocSoundSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setAvasSocSoundVolumeToMcu$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setAvasSocSoundVolumeToMcu(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setAvasUnlockSoundEffect$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setAvasUnlockSoundEffect(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setAvm3603dAngle$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setAvm3603dAngle(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setAvmTransBodySwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setAvmTransBodySwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBatteryKeepTempSwitch$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBatteryKeepTempSwitch(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmAsCampingModeSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmAsCampingModeSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmAsDrivingMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmAsDrivingMode(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmAsLeopardModeSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmAsLeopardModeSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmAsSpecialDrivingMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmAsSpecialDrivingMode(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmAsTrailerModeSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmAsTrailerModeSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmAsVehicleMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmAsVehicleMode(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmAutoWindowsControl$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmAutoWindowsControl(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmColumnHorizonalMove$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmColumnHorizonalMove(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmColumnHorizonalPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmColumnHorizonalPosition(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmColumnPositionMove$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmColumnPositionMove(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmColumnPositionSaveToMcu$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmColumnPositionSaveToMcu(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmColumnVerticalMove$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmColumnVerticalMove(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmColumnVerticalPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmColumnVerticalPosition(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmCustomerModeFlagSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmCustomerModeFlagSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmCwcSwitch$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmCwcSwitch(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmDomeLightBrightLevel$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmDomeLightBrightLevel(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmDomeLightModeStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmDomeLightModeStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmEasyLoadingSwitch$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmEasyLoadingSwitch(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmEngineeringModeStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmEngineeringModeStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmFRCwcSwitch$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmFRCwcSwitch(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmFollowMeHomeCfg$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmFollowMeHomeCfg(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmFootKickSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmFootKickSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmFrontLeftDomeLightSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmFrontLeftDomeLightSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmFrontMirrorHeatSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmFrontMirrorHeatSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmFrontRightDomeLightSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmFrontRightDomeLightSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmGroupLedBrigntness$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmGroupLedBrigntness(parcel.readInt(), parcel.readInt(), parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmGroupLedColor$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmGroupLedColor(parcel.readInt(), parcel.readInt(), parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmGroupLedControlStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmGroupLedControlStatus(parcel.readInt(), parcel.readInt(), parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmGroupLedFadeTime$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmGroupLedFadeTime(parcel.readInt(), parcel.readInt(), parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmGroupLedTemperature$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmGroupLedTemperature(parcel.readInt(), parcel.readInt(), parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmHandleAutoSwitch$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmHandleAutoSwitch(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmHeadLampLevelingReqValue$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmHeadLampLevelingReqValue(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmHeightLvlConfigValue$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmHeightLvlConfigValue(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmLeftChildLockSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmLeftChildLockSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmLeftSdcAutoOrManualControl$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmLeftSdcAutoOrManualControl(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmLeftSdcDoorPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmLeftSdcDoorPosition(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmLeftSdcWindowsAutoDownSwitch$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmLeftSdcWindowsAutoDownSwitch(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmLockAvasSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmLockAvasSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmLockHazardLightSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmLockHazardLightSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmLockHornSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmLockHornSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmLowBeamOffConfirmSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmLowBeamOffConfirmSt(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmMaintainModeSw$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmMaintainModeSw(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmMirrorAutoFoldSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmMirrorAutoFoldSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmPassengerSeatBlowLevel$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmPassengerSeatBlowLevel(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmRLCwcSwitch$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmRLCwcSwitch(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmRRCwcSwitch$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmRRCwcSwitch(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmRearLeftDomeLightSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmRearLeftDomeLightSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmRearLeftSeatHeatSw$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmRearLeftSeatHeatSw(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmRearRightDomeLightSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmRearRightDomeLightSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmRearRightSeatHeatSw$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmRearRightSeatHeatSw(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmRearWiperServiceSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmRearWiperServiceSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmRightChildLockSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmRightChildLockSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmRightSdcAutoOrManualControl$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmRightSdcAutoOrManualControl(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmRightSdcDoorPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmRightSdcDoorPosition(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmRightSdcWindowsAutoDownSwitch$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmRightSdcWindowsAutoDownSwitch(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmSaberLightSw$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmSaberLightSw(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmSdcBrakeCloseDoorCfg$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmSdcBrakeCloseDoorCfg(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmSdcKeyCloseCtrlCfg$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmSdcKeyCloseCtrlCfg(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmSdcKeyOpenCtrlCfg$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmSdcKeyOpenCtrlCfg(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmSdcMaxAutoDoorOpeningAngle$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmSdcMaxAutoDoorOpeningAngle(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmSecRowSeatEasyEntrySwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmSecRowSeatEasyEntrySwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmShadeControllerComfortCommand$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmShadeControllerComfortCommand(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmShadeControllerInitialization$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmShadeControllerInitialization(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmShadeControllerPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmShadeControllerPosition(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmSoftLvlConfigValue$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmSoftLvlConfigValue(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmSteeringWheelHeatingStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmSteeringWheelHeatingStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmSuspenWelcomeSwitch$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmSuspenWelcomeSwitch(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmSwsControlSceneStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmSwsControlSceneStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmTargetAsHeightLvlConfigValue$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmTargetAsHeightLvlConfigValue(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmTrailerHitchSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmTrailerHitchSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmTrailerModeStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmTrailerModeStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmTrailerModeSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmTrailerModeSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmTransportModeSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmTransportModeSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmTrunkOpenRequestPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmTrunkOpenRequestPosition(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmTrunkSetPositionRequest$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmTrunkSetPositionRequest(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmWashCarModeSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmWashCarModeSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmWindowLockState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmWindowLockState(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmX5dCinemaModeStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmX5dCinemaModeStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmXmeditationModeStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmXmeditationModeStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmXmovieModeStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmXmovieModeStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmXsleepModeStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setBcmXsleepModeStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setCFChildLock$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setCFChildLock(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setCFKeepTempSwitch$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setCFKeepTempSwitch(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setCFKeepTempTime$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setCFKeepTempTime(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setCFKeepTempTimeMemoryRequest$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setCFKeepTempTimeMemoryRequest(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setCFPowerSwitch$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setCFPowerSwitch(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setCFTempInc$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setCFTempInc();
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setCFTempValue$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setCFTempValue(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setCFWorkMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setCFWorkMode(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setCarFridgeDoorCtrl$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setCarFridgeDoorCtrl(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setCarpetLightWelcomeSw$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setCarpetLightWelcomeSw(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setCmsAllExteriorMirrorsPositions$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setCmsAllExteriorMirrorsPositions(parcel.readInt(), parcel.readInt(), parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setEspBpfStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setEspBpfStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setEspCstStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setEspCstStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setEspEpbSystemSwitch$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setEspEpbSystemSwitch(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setEspOffRoadSwitch$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setEspOffRoadSwitch(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setEspTsmSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setEspTsmSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setFCTempDec$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setFCTempDec();
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setHavacSfsChannel$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setHavacSfsChannel(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacAutoDefogSwitch$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setHvacAutoDefogSwitch(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacDeodorizeSwitch$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setHvacDeodorizeSwitch(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacMachineStateSwitch$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setHvacMachineStateSwitch(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacNewFreshSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setHvacNewFreshSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacRearAutoModeEnabled$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setHvacRearAutoModeEnabled(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacRearFanSpeedDec$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setHvacRearFanSpeedDec();
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacRearFanSpeedInc$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setHvacRearFanSpeedInc();
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacRearFanSpeedLevel$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setHvacRearFanSpeedLevel(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacRearWindLessSwitch$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setHvacRearWindLessSwitch(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacSecRowLeftTempDec$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setHvacSecRowLeftTempDec();
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacSecRowLeftTempInc$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setHvacSecRowLeftTempInc();
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacSecRowRightTempDec$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setHvacSecRowRightTempDec();
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacSecRowRightTempInc$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setHvacSecRowRightTempInc();
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacSfsChannelResetRequest$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setHvacSfsChannelResetRequest(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacSfsConcentration$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setHvacSfsConcentration(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacSfsSwitch$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setHvacSfsSwitch(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacSfsTypeMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setHvacSfsTypeMode(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacTempSecRowLeftValue$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setHvacTempSecRowLeftValue(parcel.readFloat());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacTempSecRowRightValue$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setHvacTempSecRowRightValue(parcel.readFloat());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacTempThirdRowtValue$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setHvacTempThirdRowtValue(parcel.readFloat());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacThirdRowTempDec$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setHvacThirdRowTempDec();
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacThirdRowTempInc$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setHvacThirdRowTempInc();
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacThirdRowWindBlowMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setHvacThirdRowWindBlowMode(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacWarpSpeedCoolingSwitch$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setHvacWarpSpeedCoolingSwitch(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacWarpSpeedWarmingSwitch$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setHvacWarpSpeedWarmingSwitch(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setIcmDayNightMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setIcmDayNightMode(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setIcmLeftCard$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setIcmLeftCard(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setIcmModeInfoArray$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setIcmModeInfoArray(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setIcmRightCard$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setIcmRightCard(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setIcmSoundThemeType$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setIcmSoundThemeType(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setIcmUserScenarioExitDialog$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setIcmUserScenarioExitDialog(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setIcmUserScenarioInfo$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setIcmUserScenarioInfo(parcel.createIntArray());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setIcmWiperRainDetectSensitivity$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setIcmWiperRainDetectSensitivity(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setImsAutoVisionSw$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setImsAutoVisionSw(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setImsBrightLevel$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setImsBrightLevel(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setImsModeReq$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setImsModeReq(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setImsVisionCtrl$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setImsVisionCtrl(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setLCMSAutoBrightSw$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setLCMSAutoBrightSw(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setLCMSBright$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setLCMSBright(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setLCMSBrightWithStoreflag$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setLCMSBrightWithStoreflag(parcel.createIntArray());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setLCMSDanObjectRecSw$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setLCMSDanObjectRecSw(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setLCMSHighSpeedViewSw$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setLCMSHighSpeedViewSw(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setLCMSLowSpeedViewSw$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setLCMSLowSpeedViewSw(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setLCMSReverseAssitSw$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setLCMSReverseAssitSw(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setLCMSTurnExtSw$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setLCMSTurnExtSw(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setLCMSViewRecovery$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setLCMSViewRecovery(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setLRCMSAllExteriorMirrorsPositions$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setLRCMSAllExteriorMirrorsPositions(parcel.readFloat(), parcel.readFloat(), parcel.readFloat(), parcel.readFloat());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setLRCMSViewAngle$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setLRCMSViewAngle(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setLaneSupportSystemStateAndWarning$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setLaneSupportSystemStateAndWarning(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setLeftSlideDoorCtrl$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setLeftSlideDoorCtrl(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setLeftSlideDoorMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setLeftSlideDoorMode(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setLluAndroidLlSt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setLluAndroidLlSt(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setLluPowerRequestSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setLluPowerRequestSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMcuFactoryModeSwitch$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMcuFactoryModeSwitch(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMcuLLuSelfControlData$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMcuLLuSelfControlData(parcel.createByteArray());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMcuLluModeCtrl$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMcuLluModeCtrl(parcel.readInt(), parcel.readInt(), parcel.readInt(), parcel.readInt(), parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMcuRvcEnable$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMcuRvcEnable(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMcuRvcState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMcuRvcState(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMcuRvcVersion$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMcuRvcVersion(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMcuSocRespDTCInfo$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMcuSocRespDTCInfo(parcel.readInt(), parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMcuTrunkPowerOffDelay$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMcuTrunkPowerOffDelay(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMcuTrunkPowerSw$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMcuTrunkPowerSw(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmDriverAllPositionsToLDCU$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmDriverAllPositionsToLDCU(parcel.readInt(), parcel.readInt(), parcel.readInt(), parcel.readInt(), parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmDriverSeatCushTiltPos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmDriverSeatCushTiltPos(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmDriverSeatCushTiltPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmDriverSeatCushTiltPosition(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmDriverSeatLegHorzPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmDriverSeatLegHorzPosition(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmDriverSeatLumbControlSwitchEnable$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmDriverSeatLumbControlSwitchEnable(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmDriverSeatMassgElem$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmDriverSeatMassgElem(parcel.createIntArray());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmDriverSeatMassgIntensity$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmDriverSeatMassgIntensity(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmDriverSeatMassgProgMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmDriverSeatMassgProgMode(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmDriverSeatPositionMemoryRequest$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmDriverSeatPositionMemoryRequest(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmDriverSeatTiltLevelOff$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmDriverSeatTiltLevelOff(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmDriverWelcomeActive$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmDriverWelcomeActive(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmPassengerAllPositions$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmPassengerAllPositions(parcel.readInt(), parcel.readInt(), parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmPassengerAllPositionsToLDCU$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmPassengerAllPositionsToLDCU(parcel.readInt(), parcel.readInt(), parcel.readInt(), parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmPassengerSeatBackPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmPassengerSeatBackPosition(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmPassengerSeatCushExt$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmPassengerSeatCushExt(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmPassengerSeatCushExtPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmPassengerSeatCushExtPosition(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmPassengerSeatHorizontalPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmPassengerSeatHorizontalPosition(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmPassengerSeatLegHorzPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmPassengerSeatLegHorzPosition(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmPassengerSeatLumbControlSwitchEnable$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmPassengerSeatLumbControlSwitchEnable(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmPassengerSeatLumbHorzPos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmPassengerSeatLumbHorzPos(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmPassengerSeatLumbVerticalPos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmPassengerSeatLumbVerticalPos(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmPassengerSeatMassgElem$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmPassengerSeatMassgElem(parcel.createIntArray());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmPassengerSeatMassgIntensity$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmPassengerSeatMassgIntensity(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmPassengerSeatMassgProgMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmPassengerSeatMassgProgMode(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmPassengerSeatTitlLevelOff$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmPassengerSeatTitlLevelOff(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmPassengerSeatVerticalPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmPassengerSeatVerticalPosition(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmPassengerWelcomeActive$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmPassengerWelcomeActive(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmPassengerWelcomeSwitch$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmPassengerWelcomeSwitch(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmSecRowLeftSeatAllPos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmSecRowLeftSeatAllPos(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmSecRowLeftSeatCushExtPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmSecRowLeftSeatCushExtPosition(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmSecRowLeftSeatCushExtReq$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmSecRowLeftSeatCushExtReq(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmSecRowLeftSeatLegHorzPosReq$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmSecRowLeftSeatLegHorzPosReq(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmSecRowLeftSeatLegHorzPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmSecRowLeftSeatLegHorzPosition(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmSecRowLeftSeatMassgElem$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmSecRowLeftSeatMassgElem(parcel.createIntArray());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmSecRowLeftSeatMassgIntensity$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmSecRowLeftSeatMassgIntensity(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmSecRowLeftSeatMassgProgMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmSecRowLeftSeatMassgProgMode(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmSecRowRightSeatAllPos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmSecRowRightSeatAllPos(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmSecRowRightSeatCushExtPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmSecRowRightSeatCushExtPosition(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmSecRowRightSeatCushExtReq$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmSecRowRightSeatCushExtReq(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmSecRowRightSeatLegHorzPosReq$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmSecRowRightSeatLegHorzPosReq(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmSecRowRightSeatLegHorzPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmSecRowRightSeatLegHorzPosition(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmSecRowRightSeatMassgElem$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmSecRowRightSeatMassgElem(parcel.createIntArray());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmSecRowRightSeatMassgIntensity$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmSecRowRightSeatMassgIntensity(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmSecRowRightSeatMassgProgMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmSecRowRightSeatMassgProgMode(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmSecrowLeftSeatUnlockReq$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmSecrowLeftSeatUnlockReq(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmSecrowLtSeatSTopMoveReq$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmSecrowLtSeatSTopMoveReq(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmSecrowLtSeatTiltPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmSecrowLtSeatTiltPosition(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmSecrowLtSeatTiltReq$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmSecrowLtSeatTiltReq(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmSecrowLtSeatUnfoldReq$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmSecrowLtSeatUnfoldReq(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmSecrowRTSeatUnfoldReq$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmSecrowRTSeatUnfoldReq(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmSecrowRightSeatUnlockReq$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmSecrowRightSeatUnlockReq(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmSecrowRtSeatSTopMoveReq$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmSecrowRtSeatSTopMoveReq(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmSecrowRtSeatTiltPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmSecrowRtSeatTiltPosition(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmSecrowRtSeatTiltReq$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmSecrowRtSeatTiltReq(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmdAllPositions$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmdAllPositions(parcel.readInt(), parcel.readInt(), parcel.readInt(), parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmtLeftSeatFoldReq$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmtLeftSeatFoldReq(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmtRightSeatFoldReq$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmtRightSeatFoldReq(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmtSeatStowReq$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setMsmtSeatStowReq(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setPollingWelcomeSW$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setPollingWelcomeSW(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setRearHvacAirDistributionMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setRearHvacAirDistributionMode(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setRearHvacFanPosition$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setRearHvacFanPosition(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setRearHvacPowerEnabled$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setRearHvacPowerEnabled(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setRearLogLight$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setRearLogLight(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setRightSlideDoorCtrl$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setRightSlideDoorCtrl(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setRightSlideDoorMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setRightSlideDoorMode(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setScuCurrentElectronicEyeSpeedLimitAndDistance$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setScuCurrentElectronicEyeSpeedLimitAndDistance(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setScuCurrentRoadSpeedLimit$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setScuCurrentRoadSpeedLimit(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setScuDistractionSwitch$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setScuDistractionSwitch(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setScuDsmStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setScuDsmStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setScuElkSwitch$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setScuElkSwitch(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setScuEventInfoRD$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setScuEventInfoRD(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setScuFsdSwitch$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setScuFsdSwitch(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setScuIntelligentSpeedLimitValue$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setScuIntelligentSpeedLimitValue(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setScuLdwLkaSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setScuLdwLkaSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setScuNaviDangerAreaRDInfo$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setScuNaviDangerAreaRDInfo(parcel.readInt(), parcel.readInt(), parcel.readInt(), parcel.readInt(), parcel.readInt(), parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setScuNaviRoadConnectAttrib$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setScuNaviRoadConnectAttrib(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setScuNgpAvoidTruckSw$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setScuNgpAvoidTruckSw(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setScuNgpDriverConfirmLaneChangeSw$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setScuNgpDriverConfirmLaneChangeSw(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setScuNgpLaneChangeMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setScuNgpLaneChangeMode(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setScuNgpOperationButton$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setScuNgpOperationButton(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setScuNgpPreferFastLaneSw$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setScuNgpPreferFastLaneSw(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setScuNgpRemindMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setScuNgpRemindMode(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setScuNgpTipsWindowsSw$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setScuNgpTipsWindowsSw(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setScuOtaTagStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setScuOtaTagStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setScuParkByMemorySw$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setScuParkByMemorySw(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setScuParkingGroundState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setScuParkingGroundState(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setScuRoadAttribType$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setScuRoadAttribType(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setScuSlaAlarmSwitch$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setScuSlaAlarmSwitch(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setScuSpeedLimitDriverConfirmSwitch$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setScuSpeedLimitDriverConfirmSwitch(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setScuSpeedLimitRange$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setScuSpeedLimitRange(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setScuSpeedLimitSwitchState$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setScuSpeedLimitSwitchState(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setScuSsLeftSystemStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setScuSsLeftSystemStatus(parcel.createByteArray());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setScuSsRightSystemStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setScuSsRightSystemStatus(parcel.createByteArray());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setScuVoiceLaneChangeCommand$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setScuVoiceLaneChangeCommand(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setSecRowLeftAngleMove$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setSecRowLeftAngleMove(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setSecRowLeftBlowLevel$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setSecRowLeftBlowLevel(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setSecRowLeftHeadHorizMove$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setSecRowLeftHeadHorizMove(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setSecRowLeftHeadVertiMove$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setSecRowLeftHeadVertiMove(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setSecRowLeftHorizMove$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setSecRowLeftHorizMove(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setSecRowLeftLegVertiMove$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setSecRowLeftLegVertiMove(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setSecRowLeftSeatEasyEntryReq$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setSecRowLeftSeatEasyEntryReq(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setSecRowLeftSeatLumbHorzMove$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setSecRowLeftSeatLumbHorzMove(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setSecRowLeftSeatLumbVertiMove$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setSecRowLeftSeatLumbVertiMove(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setSecRowLeftSeatPos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setSecRowLeftSeatPos(parcel.readInt(), parcel.readInt(), parcel.readInt(), parcel.readInt(), parcel.readInt(), parcel.readInt(), parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setSecRowLeftSeatZeroGravReq$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setSecRowLeftSeatZeroGravReq(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setSecRowLtSeatAnglePos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setSecRowLtSeatAnglePos(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setSecRowLtSeatHeadHorzPos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setSecRowLtSeatHeadHorzPos(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setSecRowLtSeatHeadVerticalPos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setSecRowLtSeatHeadVerticalPos(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setSecRowLtSeatHorzPos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setSecRowLtSeatHorzPos(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setSecRowLtSeatLegVerticalPos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setSecRowLtSeatLegVerticalPos(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setSecRowRightBlowLevel$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setSecRowRightBlowLevel(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setSecRowRightHeadHorizMove$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setSecRowRightHeadHorizMove(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setSecRowRightHeadVertiMove$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setSecRowRightHeadVertiMove(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setSecRowRightHorizMove$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setSecRowRightHorizMove(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setSecRowRightLegVertiMove$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setSecRowRightLegVertiMove(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setSecRowRightSeatEasyEntryReq$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setSecRowRightSeatEasyEntryReq(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setSecRowRightSeatLumbHorzMove$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setSecRowRightSeatLumbHorzMove(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setSecRowRightSeatLumbVertiMove$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setSecRowRightSeatLumbVertiMove(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setSecRowRightSeatPos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setSecRowRightSeatPos(parcel.readInt(), parcel.readInt(), parcel.readInt(), parcel.readInt(), parcel.readInt(), parcel.readInt(), parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setSecRowRightSeatZeroGravReq$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setSecRowRightSeatZeroGravReq(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setSecRowRighttAngleMove$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setSecRowRighttAngleMove(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setSecRowRtSeatAnglePos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setSecRowRtSeatAnglePos(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setSecRowRtSeatHeadHorzPos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setSecRowRtSeatHeadHorzPos(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setSecRowRtSeatHeadVerticalPos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setSecRowRtSeatHeadVerticalPos(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setSecRowRtSeatHorzPos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setSecRowRtSeatHorzPos(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setSecRowRtSeatLegVerticalPos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setSecRowRtSeatLegVerticalPos(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setSfmAnglePos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setSfmAnglePos(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setSfmCtrl$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setSfmCtrl(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setSpeedUpChargeSwitch$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setSpeedUpChargeSwitch(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setSrsPassengerCrashOccurSw$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setSrsPassengerCrashOccurSw(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setTboxBatteryKeepTempAppointTime$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setTboxBatteryKeepTempAppointTime(parcel.readInt(), parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setTboxBatteryKeepTempSwitch$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setTboxBatteryKeepTempSwitch(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setTboxGpsLogSwitch$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setTboxGpsLogSwitch(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setTboxUpgradePrepareRequest$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setTboxUpgradePrepareRequest(parcel.readString());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setTrdLeftDomeLightSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setTrdLeftDomeLightSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setTrdRightDomeLightSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setTrdRightDomeLightSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setTrdRowLeftHeadVertiMove$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setTrdRowLeftHeadVertiMove(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setTrdRowLeftSeatTiltMove$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setTrdRowLeftSeatTiltMove(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setTrdRowLtSeatHeadVerticalPos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setTrdRowLtSeatHeadVerticalPos(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setTrdRowLtSeatTiltPos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setTrdRowLtSeatTiltPos(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setTrdRowMidHeadVertiMove$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setTrdRowMidHeadVertiMove(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setTrdRowMidSeatHeadVerticalPos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setTrdRowMidSeatHeadVerticalPos(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setTrdRowMiddleSeatTiltMove$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setTrdRowMiddleSeatTiltMove(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setTrdRowRightHeadVertiMove$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setTrdRowRightHeadVertiMove(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setTrdRowRightSeatTiltMove$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setTrdRowRightSeatTiltMove(parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setTrdRowRtSeatHeadVerticalPos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setTrdRowRtSeatHeadVerticalPos(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setTrdRowRtSeatTiltPos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setTrdRowRtSeatTiltPos(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setTrdRowSeatAllPos$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setTrdRowSeatAllPos(parcel.readInt(), parcel.readInt(), parcel.readInt(), parcel.readInt(), parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setVCUAWDModeSw$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setVCUAWDModeSw(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setVMCRwsSwitch$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setVMCRwsSwitch(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setVMCZWalkModeSwitch$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setVMCZWalkModeSwitch(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setVcuAcChargCurrentMaxLimitedValue$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setVcuAcChargCurrentMaxLimitedValue(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setVcuAutoEasyLoadingSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setVcuAutoEasyLoadingSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setVcuBatBumpRecrdStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setVcuBatBumpRecrdStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setVcuCdcuChargeGunCommand$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setVcuCdcuChargeGunCommand(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setVcuChargerLowVolDiag$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setVcuChargerLowVolDiag(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setVcuDcPreWarmRequestStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setVcuDcPreWarmRequestStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setVcuDcPreWarmSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setVcuDcPreWarmSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setVcuDriveMileIncreaseSwitch$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setVcuDriveMileIncreaseSwitch(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setVcuEnduranceMileageMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setVcuEnduranceMileageMode(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setVcuMotorPowerMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setVcuMotorPowerMode(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setVcuNaviDestInfo$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setVcuNaviDestInfo(parcel.readString());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setVcuNaviDestType$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setVcuNaviDestType(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setVcuNaviKValue$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setVcuNaviKValue(parcel.readFloat());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setVcuNaviPathId$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setVcuNaviPathId(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setVcuNaviRemainDistance$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setVcuNaviRemainDistance(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setVcuNaviRemainTime$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setVcuNaviRemainTime(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setVcuNaviType$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setVcuNaviType(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setVcuPGearLimOffSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setVcuPGearLimOffSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setVcuPowerResponseMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setVcuPowerResponseMode(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setVcuSecondaryPowerOffRequest$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setVcuSecondaryPowerOffRequest(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setVcuSpecialCarbinModeSwitch$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setVcuSpecialCarbinModeSwitch(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setVcuSpecialDrivingMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setVcuSpecialDrivingMode(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setVcuSsaSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setVcuSsaSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setVcuTrailerModeSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setVcuTrailerModeSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setVcuXPortIntellCalcCfg$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setVcuXPortIntellCalcCfg(parcel.createFloatArray());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setVcuXpedalCtrlMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setVcuXpedalCtrlMode(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setVcuXpedalModeSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setVcuXpedalModeSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setVcuXsportMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setVcuXsportMode(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setWiperRainDetectSensitivityAndInactive$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setWiperRainDetectSensitivityAndInactive(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setXpuAdasTopSpeedLimitedValue$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setXpuAdasTopSpeedLimitedValue(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setXpuApRemoteSw$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setXpuApRemoteSw(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setXpuCityNgpSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setXpuCityNgpSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setXpuEffectiveSpeedLimitType$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setXpuEffectiveSpeedLimitType(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setXpuElectricEyeSpeedDistance$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setXpuElectricEyeSpeedDistance(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setXpuElectricEyeSpeedLimit$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setXpuElectricEyeSpeedLimit(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setXpuISLCDriverSet$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setXpuISLCDriverSet(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setXpuLLCCDetourSw$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setXpuLLCCDetourSw(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setXpuLccLStraightSw$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setXpuLccLStraightSw(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setXpuLssSensitivitySwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setXpuLssSensitivitySwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setXpuMetaCountryCode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setXpuMetaCountryCode(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setXpuMetaSpeedUnits$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setXpuMetaSpeedUnits(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setXpuNaviRemainingDistance$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setXpuNaviRemainingDistance(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setXpuNaviTypeStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setXpuNaviTypeStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setXpuNgpCustomSpeedCountLever$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setXpuNgpCustomSpeedCountLever(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setXpuNgpCustomSpeedCountPercent$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setXpuNgpCustomSpeedCountPercent(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setXpuNgpCustomSpeedSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setXpuNgpCustomSpeedSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setXpuNgpOptimalLaneSw$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setXpuNgpOptimalLaneSw(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setXpuNgpULCSwMode$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setXpuNgpULCSwMode(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setXpuNraSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setXpuNraSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setXpuRadarEmissionSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setXpuRadarEmissionSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setXpuRaebSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setXpuRaebSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setXpuScpSwitchStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setXpuScpSwitchStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setXpuSlifSoundStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setXpuSlifSoundStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$setXpuSlwfVoiceStatus$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            setXpuSlwfVoiceStatus(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$stopMsmDriverSeatMoving$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            stopMsmDriverSeatMoving(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$stopMsmPassengerSeatMoving$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            stopMsmPassengerSeatMoving(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$stopSecRowLeftSeatMoving$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            stopSecRowLeftSeatMoving(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        private boolean onTransact$stopSecRowRightSeatMoving$(Parcel parcel, Parcel parcel2) throws RemoteException {
            parcel.enforceInterface(DESCRIPTOR);
            stopSecRowRightSeatMoving(parcel.readInt());
            parcel2.writeNoException();
            return true;
        }

        public static boolean setDefaultImpl(IXpVehicle iXpVehicle) {
            if (Proxy.sDefaultImpl != null || iXpVehicle == null) {
                return false;
            }
            Proxy.sDefaultImpl = iXpVehicle;
            return true;
        }

        public Stub() {
            attachInterface(this, DESCRIPTOR);
        }

        public static IXpVehicle asInterface(IBinder obj) {
            if (obj == null) {
                return null;
            }
            IInterface iin = obj.queryLocalInterface(DESCRIPTOR);
            if (iin != null && (iin instanceof IXpVehicle)) {
                return (IXpVehicle) iin;
            }
            return new Proxy(obj);
        }

        @Override // android.os.IInterface
        public IBinder asBinder() {
            return this;
        }

        @Override // android.os.Binder
        public boolean onTransact(int code, Parcel data, Parcel reply, int flags) throws RemoteException {
            if (code == 1) {
                data.enforceInterface(DESCRIPTOR);
                int _result = getMcuBurglarAlarmState();
                reply.writeNoException();
                reply.writeInt(_result);
                return true;
            } else if (code == 2) {
                data.enforceInterface(DESCRIPTOR);
                setMcuIgOn();
                reply.writeNoException();
                return true;
            } else if (code == 3) {
                data.enforceInterface(DESCRIPTOR);
                setMcuIgOff();
                reply.writeNoException();
                return true;
            } else if (code == 4) {
                data.enforceInterface(DESCRIPTOR);
                setIgHeartBeat();
                reply.writeNoException();
                return true;
            } else if (code == 5) {
                data.enforceInterface(DESCRIPTOR);
                setTheftHeartBeatOn();
                reply.writeNoException();
                return true;
            } else if (code == 6) {
                data.enforceInterface(DESCRIPTOR);
                setTheftHeartBeatOff();
                reply.writeNoException();
                return true;
            } else {
                if (code != 7) {
                    switch (code) {
                        case 7:
                            break;
                        case 8:
                            data.enforceInterface(DESCRIPTOR);
                            String _result2 = getMcuHardWareId();
                            reply.writeNoException();
                            reply.writeString(_result2);
                            return true;
                        case 9:
                            return onTransact$setMqttLogInfo$(data, reply);
                        case 10:
                            data.enforceInterface(DESCRIPTOR);
                            float _result3 = getCpuTemperature();
                            reply.writeNoException();
                            reply.writeFloat(_result3);
                            return true;
                        case 11:
                            return onTransact$setMcuHorn$(data, reply);
                        case 12:
                            return onTransact$setMcuFlash$(data, reply);
                        case 13:
                            return onTransact$setDrivingMode$(data, reply);
                        case 14:
                            data.enforceInterface(DESCRIPTOR);
                            int _result4 = getHardwareVersion();
                            reply.writeNoException();
                            reply.writeInt(_result4);
                            return true;
                        case 15:
                            return onTransact$sendTestMsgToMcu$(data, reply);
                        case 16:
                            return onTransact$sendPwrDebugMsgToMcu$(data, reply);
                        case 17:
                            return onTransact$sendDugReqMsgToMcu$(data, reply);
                        case 18:
                            return onTransact$sendDisplayTypeMsgToMcu$(data, reply);
                        case 19:
                            return onTransact$sendPmSilentMsgToMcu$(data, reply);
                        case 20:
                            return onTransact$sendMcuBmsMsgToMcu$(data, reply);
                        case 21:
                            return onTransact$sendOta1MsgToMcu$(data, reply);
                        case 22:
                            return onTransact$sendPsuOtaMsgToMcu$(data, reply);
                        case 23:
                            return onTransact$sendSecretKeyToMcu$(data, reply);
                        case 24:
                            return onTransact$sendRequestWakeToMcu$(data, reply);
                        case 25:
                            return onTransact$sendDiagnoseMsgToMcu$(data, reply);
                        case TRANSACTION_sendReset4gMsgToMcu /* 26 */:
                            return onTransact$sendReset4gMsgToMcu$(data, reply);
                        case TRANSACTION_sendResetModemMsgToMcu /* 27 */:
                            return onTransact$sendResetModemMsgToMcu$(data, reply);
                        case TRANSACTION_sendGpsInfoMsgToMcu /* 28 */:
                            return onTransact$sendGpsInfoMsgToMcu$(data, reply);
                        case 29:
                            return onTransact$updateMcuBin$(data, reply);
                        case 30:
                            return onTransact$setMcuRtcTime$(data, reply);
                        case 31:
                            data.enforceInterface(DESCRIPTOR);
                            long _result5 = getMcuRtcTime();
                            reply.writeNoException();
                            reply.writeLong(_result5);
                            return true;
                        case 32:
                            return onTransact$setMcuTimeZone$(data, reply);
                        case 33:
                            data.enforceInterface(DESCRIPTOR);
                            int _result6 = getPmStatus();
                            reply.writeNoException();
                            reply.writeInt(_result6);
                            return true;
                        case 51:
                            data.enforceInterface(DESCRIPTOR);
                            int _result7 = getBcmAtwsState();
                            reply.writeNoException();
                            reply.writeInt(_result7);
                            return true;
                        case 54:
                            data.enforceInterface(DESCRIPTOR);
                            float[] _result8 = getBcmAllWindowsPos();
                            reply.writeNoException();
                            reply.writeFloatArray(_result8);
                            return true;
                        case TRANSACTION_getHvacAirCycleMode /* 171 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result9 = getHvacAirCycleMode();
                            reply.writeNoException();
                            reply.writeInt(_result9);
                            return true;
                        case TRANSACTION_getHvacAutoModePreference /* 172 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result10 = getHvacAutoModePreference();
                            reply.writeNoException();
                            reply.writeInt(_result10);
                            return true;
                        case TRANSACTION_getHvacPsnSeatTempValue /* 173 */:
                            data.enforceInterface(DESCRIPTOR);
                            float _result11 = getHvacPsnSeatTempValue();
                            reply.writeNoException();
                            reply.writeFloat(_result11);
                            return true;
                        case TRANSACTION_getHvacDrvSeatTempValue /* 174 */:
                            data.enforceInterface(DESCRIPTOR);
                            float _result12 = getHvacDrvSeatTempValue();
                            reply.writeNoException();
                            reply.writeFloat(_result12);
                            return true;
                        case TRANSACTION_getHvacInnerTemp /* 175 */:
                            data.enforceInterface(DESCRIPTOR);
                            float _result13 = getHvacInnerTemp();
                            reply.writeNoException();
                            reply.writeFloat(_result13);
                            return true;
                        case TRANSACTION_getHvacTempLeftSyncState /* 176 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result14 = getHvacTempLeftSyncState();
                            reply.writeNoException();
                            reply.writeInt(_result14);
                            return true;
                        case 177:
                            data.enforceInterface(DESCRIPTOR);
                            int _result15 = getHvacAcState();
                            reply.writeNoException();
                            reply.writeInt(_result15);
                            return true;
                        case 178:
                            data.enforceInterface(DESCRIPTOR);
                            int _result16 = getHvacAirPurgeSwitchState();
                            reply.writeNoException();
                            reply.writeInt(_result16);
                            return true;
                        case 179:
                            data.enforceInterface(DESCRIPTOR);
                            int _result17 = getHvacPowerState();
                            reply.writeNoException();
                            reply.writeInt(_result17);
                            return true;
                        case TRANSACTION_getHvacDefrostMode /* 180 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result18 = getHvacDefrostMode();
                            reply.writeNoException();
                            reply.writeInt(_result18);
                            return true;
                        case TRANSACTION_getHvacAutoModeState /* 181 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result19 = getHvacAutoModeState();
                            reply.writeNoException();
                            reply.writeInt(_result19);
                            return true;
                        case TRANSACTION_calibrateTpmsTirePressure /* 182 */:
                            data.enforceInterface(DESCRIPTOR);
                            calibrateTpmsTirePressure();
                            reply.writeNoException();
                            return true;
                        case TRANSACTION_getTpmsTirePressureStatus /* 183 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result20 = getTpmsTirePressureStatus();
                            reply.writeNoException();
                            reply.writeInt(_result20);
                            return true;
                        case TRANSACTION_getTailRadarLevel /* 184 */:
                            data.enforceInterface(DESCRIPTOR);
                            int[] _result21 = getTailRadarLevel();
                            reply.writeNoException();
                            reply.writeIntArray(_result21);
                            return true;
                        case TRANSACTION_getTailRadarFaultSt /* 185 */:
                            data.enforceInterface(DESCRIPTOR);
                            int[] _result22 = getTailRadarFaultSt();
                            reply.writeNoException();
                            reply.writeIntArray(_result22);
                            return true;
                        case TRANSACTION_getFrontRadarLevel /* 186 */:
                            data.enforceInterface(DESCRIPTOR);
                            int[] _result23 = getFrontRadarLevel();
                            reply.writeNoException();
                            reply.writeIntArray(_result23);
                            return true;
                        case TRANSACTION_getFrontRadarFaultSt /* 187 */:
                            data.enforceInterface(DESCRIPTOR);
                            int[] _result24 = getFrontRadarFaultSt();
                            reply.writeNoException();
                            reply.writeIntArray(_result24);
                            return true;
                        case TRANSACTION_getNearestEnableRadar /* 188 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result25 = getNearestEnableRadar();
                            reply.writeNoException();
                            reply.writeInt(_result25);
                            return true;
                        case TRANSACTION_getAutoParkErrorCode /* 189 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result26 = getAutoParkErrorCode();
                            reply.writeNoException();
                            reply.writeInt(_result26);
                            return true;
                        case TRANSACTION_getMileageExtraParams /* 190 */:
                            data.enforceInterface(DESCRIPTOR);
                            float[] _result27 = getMileageExtraParams();
                            reply.writeNoException();
                            reply.writeFloatArray(_result27);
                            return true;
                        case TRANSACTION_getGpsSpeed /* 191 */:
                            data.enforceInterface(DESCRIPTOR);
                            float _result28 = getGpsSpeed();
                            reply.writeNoException();
                            reply.writeFloat(_result28);
                            return true;
                        case TRANSACTION_setSuperParkMode /* 192 */:
                            return onTransact$setSuperParkMode$(data, reply);
                        case 193:
                            return onTransact$setSideReversingWarning$(data, reply);
                        case 194:
                            return onTransact$setScuTest$(data, reply);
                        case 195:
                            return onTransact$setRadarWarningVoiceStatus$(data, reply);
                        case TRANSACTION_setPhoneSMButton /* 196 */:
                            return onTransact$setPhoneSMButton$(data, reply);
                        case TRANSACTION_setPhoneAPButton /* 197 */:
                            return onTransact$setPhoneAPButton$(data, reply);
                        case TRANSACTION_setParkLotRecvIndex2Scu /* 198 */:
                            return onTransact$setParkLotRecvIndex2Scu$(data, reply);
                        case TRANSACTION_setParkLotChoseIndex2Scu /* 199 */:
                            return onTransact$setParkLotChoseIndex2Scu$(data, reply);
                        case 200:
                            return onTransact$setLocationInfo$(data, reply);
                        case TRANSACTION_setLaneDepartureWarning /* 201 */:
                            return onTransact$setLaneDepartureWarning$(data, reply);
                        case TRANSACTION_setLaneChangeAssist /* 202 */:
                            return onTransact$setLaneChangeAssist$(data, reply);
                        case TRANSACTION_setIntelligentSpeedLimit /* 203 */:
                            return onTransact$setIntelligentSpeedLimit$(data, reply);
                        case TRANSACTION_setFrontCollisionSecurity /* 204 */:
                            return onTransact$setFrontCollisionSecurity$(data, reply);
                        case TRANSACTION_setBlindAreaDetectionWarning /* 205 */:
                            return onTransact$setBlindAreaDetectionWarning$(data, reply);
                        case TRANSACTION_setAutoPilotLocationInfo /* 206 */:
                            return onTransact$setAutoPilotLocationInfo$(data, reply);
                        case TRANSACTION_setAutoParkOutState /* 207 */:
                            return onTransact$setAutoParkOutState$(data, reply);
                        case TRANSACTION_setAutoParkInState /* 208 */:
                            return onTransact$setAutoParkInState$(data, reply);
                        case TRANSACTION_getScu3FELogData /* 209 */:
                            data.enforceInterface(DESCRIPTOR);
                            int[] _result29 = getScu3FELogData();
                            reply.writeNoException();
                            reply.writeIntArray(_result29);
                            return true;
                        case TRANSACTION_getScu3FDLogData /* 210 */:
                            data.enforceInterface(DESCRIPTOR);
                            int[] _result30 = getScu3FDLogData();
                            reply.writeNoException();
                            reply.writeIntArray(_result30);
                            return true;
                        case TRANSACTION_getScu322LogData /* 211 */:
                            data.enforceInterface(DESCRIPTOR);
                            int[] _result31 = getScu322LogData();
                            reply.writeNoException();
                            reply.writeIntArray(_result31);
                            return true;
                        case 212:
                            data.enforceInterface(DESCRIPTOR);
                            int _result32 = getSideReversingWarning();
                            reply.writeNoException();
                            reply.writeInt(_result32);
                            return true;
                        case TRANSACTION_getScuOperationTips /* 213 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result33 = getScuOperationTips();
                            reply.writeNoException();
                            reply.writeInt(_result33);
                            return true;
                        case TRANSACTION_getParkingStatus /* 214 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result34 = getParkingStatus();
                            reply.writeNoException();
                            reply.writeInt(_result34);
                            return true;
                        case TRANSACTION_getLaneDepartureWarning /* 215 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result35 = getLaneDepartureWarning();
                            reply.writeNoException();
                            reply.writeInt(_result35);
                            return true;
                        case TRANSACTION_getLaneChangeAssist /* 216 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result36 = getLaneChangeAssist();
                            reply.writeNoException();
                            reply.writeInt(_result36);
                            return true;
                        case TRANSACTION_getIntelligentSpeedLimit /* 217 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result37 = getIntelligentSpeedLimit();
                            reply.writeNoException();
                            reply.writeInt(_result37);
                            return true;
                        case TRANSACTION_getFrontCollisionSecurity /* 218 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result38 = getFrontCollisionSecurity();
                            reply.writeNoException();
                            reply.writeInt(_result38);
                            return true;
                        case TRANSACTION_getBlindAreaDetectionWarning /* 219 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result39 = getBlindAreaDetectionWarning();
                            reply.writeNoException();
                            reply.writeInt(_result39);
                            return true;
                        case 220:
                            data.enforceInterface(DESCRIPTOR);
                            int _result40 = getRadarWarningVoiceStatus();
                            reply.writeNoException();
                            reply.writeInt(_result40);
                            return true;
                        case TRANSACTION_setAvmCameraAngle /* 221 */:
                            return onTransact$setAvmCameraAngle$(data, reply);
                        case TRANSACTION_getAvmCameraAngle /* 222 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result41 = getAvmCameraAngle();
                            reply.writeNoException();
                            reply.writeInt(_result41);
                            return true;
                        case TRANSACTION_setAvmRoofCameraRaise /* 223 */:
                            return onTransact$setAvmRoofCameraRaise$(data, reply);
                        case 224:
                            data.enforceInterface(DESCRIPTOR);
                            int _result42 = getAvmRoofCameraHeightStatus();
                            reply.writeNoException();
                            reply.writeInt(_result42);
                            return true;
                        case TRANSACTION_setAvmCameraDisplayMode /* 225 */:
                            return onTransact$setAvmCameraDisplayMode$(data, reply);
                        case TRANSACTION_getAvmCameraDisplayMode /* 226 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result43 = getAvmCameraDisplayMode();
                            reply.writeNoException();
                            reply.writeInt(_result43);
                            return true;
                        case TRANSACTION_hasRoofCamera /* 228 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result44 = hasRoofCamera();
                            reply.writeNoException();
                            reply.writeInt(_result44);
                            return true;
                        case TRANSACTION_getFrontRadarData /* 229 */:
                            data.enforceInterface(DESCRIPTOR);
                            float[] _result45 = getFrontRadarData();
                            reply.writeNoException();
                            reply.writeFloatArray(_result45);
                            return true;
                        case TRANSACTION_getTailRadarData /* 230 */:
                            data.enforceInterface(DESCRIPTOR);
                            float[] _result46 = getTailRadarData();
                            reply.writeNoException();
                            reply.writeFloatArray(_result46);
                            return true;
                        case TRANSACTION_getSteerWheelRotationAngle /* 231 */:
                            data.enforceInterface(DESCRIPTOR);
                            float _result47 = getSteerWheelRotationAngle();
                            reply.writeNoException();
                            reply.writeFloat(_result47);
                            return true;
                        case TRANSACTION_getAvmRoofCameraState /* 232 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result48 = getAvmRoofCameraState();
                            reply.writeNoException();
                            reply.writeInt(_result48);
                            return true;
                        case TRANSACTION_getAvmRoofCameraPosition /* 233 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result49 = getAvmRoofCameraPosition();
                            reply.writeNoException();
                            reply.writeInt(_result49);
                            return true;
                        case TRANSACTION_getAvmCameraInitState /* 234 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result50 = getAvmCameraInitState();
                            reply.writeNoException();
                            reply.writeInt(_result50);
                            return true;
                        case TRANSACTION_getBmsBatteryCapacity /* 235 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result51 = getBmsBatteryCapacity();
                            reply.writeNoException();
                            reply.writeInt(_result51);
                            return true;
                        case TRANSACTION_getBmsBatteryType /* 236 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result52 = getBmsBatteryType();
                            reply.writeNoException();
                            reply.writeInt(_result52);
                            return true;
                        case TRANSACTION_getCcsFaultInfo /* 237 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result53 = getCcsFaultInfo();
                            reply.writeNoException();
                            reply.writeInt(_result53);
                            return true;
                        case TRANSACTION_getBmsBatteryChipSwVersion /* 238 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result54 = getBmsBatteryChipSwVersion();
                            reply.writeNoException();
                            reply.writeInt(_result54);
                            return true;
                        case 239:
                            data.enforceInterface(DESCRIPTOR);
                            int _result55 = getBmsFailureLvl();
                            reply.writeNoException();
                            reply.writeInt(_result55);
                            return true;
                        case TRANSACTION_getBmsVoltMaxNum /* 240 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result56 = getBmsVoltMaxNum();
                            reply.writeNoException();
                            reply.writeInt(_result56);
                            return true;
                        case TRANSACTION_getBmsVoltMinNum /* 241 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result57 = getBmsVoltMinNum();
                            reply.writeNoException();
                            reply.writeInt(_result57);
                            return true;
                        case TRANSACTION_getBmsHottestCellNum /* 242 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result58 = getBmsHottestCellNum();
                            reply.writeNoException();
                            reply.writeInt(_result58);
                            return true;
                        case TRANSACTION_getBmsColdestCellNum /* 243 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result59 = getBmsColdestCellNum();
                            reply.writeNoException();
                            reply.writeInt(_result59);
                            return true;
                        case TRANSACTION_getBmsMaxTemp /* 244 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result60 = getBmsMaxTemp();
                            reply.writeNoException();
                            reply.writeInt(_result60);
                            return true;
                        case TRANSACTION_getBmsVoltMax /* 245 */:
                            data.enforceInterface(DESCRIPTOR);
                            float _result61 = getBmsVoltMax();
                            reply.writeNoException();
                            reply.writeFloat(_result61);
                            return true;
                        case TRANSACTION_getBmsVoltMin /* 246 */:
                            data.enforceInterface(DESCRIPTOR);
                            float _result62 = getBmsVoltMin();
                            reply.writeNoException();
                            reply.writeFloat(_result62);
                            return true;
                        case TRANSACTION_getBmsInsulationResistance /* 247 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result63 = getBmsInsulationResistance();
                            reply.writeNoException();
                            reply.writeInt(_result63);
                            return true;
                        case TRANSACTION_getBmsBatteryCurrent /* 248 */:
                            data.enforceInterface(DESCRIPTOR);
                            float _result64 = getBmsBatteryCurrent();
                            reply.writeNoException();
                            reply.writeFloat(_result64);
                            return true;
                        case TRANSACTION_setAdasMeta /* 250 */:
                            return onTransact$setAdasMeta$(data, reply);
                        case TRANSACTION_setAdasPosition /* 251 */:
                            return onTransact$setAdasPosition$(data, reply);
                        case TRANSACTION_setAdasProfLong /* 252 */:
                            return onTransact$setAdasProfLong$(data, reply);
                        case TRANSACTION_setAdasProfShort /* 253 */:
                            return onTransact$setAdasProfShort$(data, reply);
                        case 254:
                            return onTransact$setAdasSegment$(data, reply);
                        case 255:
                            return onTransact$setAdasStub$(data, reply);
                        case 256:
                            data.enforceInterface(DESCRIPTOR);
                            int _result65 = getDcdcFailStInfo();
                            reply.writeNoException();
                            reply.writeInt(_result65);
                            return true;
                        case 257:
                            data.enforceInterface(DESCRIPTOR);
                            int _result66 = getDcdcStatus();
                            reply.writeNoException();
                            reply.writeInt(_result66);
                            return true;
                        case TRANSACTION_setEpsWorkMode /* 258 */:
                            return onTransact$setEpsWorkMode$(data, reply);
                        case TRANSACTION_getEpsWorkMode /* 259 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result67 = getEpsWorkMode();
                            reply.writeNoException();
                            reply.writeInt(_result67);
                            return true;
                        case TRANSACTION_setEspHdcEnabled /* 260 */:
                            return onTransact$setEspHdcEnabled$(data, reply);
                        case TRANSACTION_isEspHdcEnabled /* 261 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result68 = isEspHdcEnabled();
                            reply.writeNoException();
                            reply.writeInt(_result68);
                            return true;
                        case TRANSACTION_setEspWorkMode /* 262 */:
                            return onTransact$setEspWorkMode$(data, reply);
                        case TRANSACTION_getEspWorkMode /* 263 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result69 = getEspWorkMode();
                            reply.writeNoException();
                            reply.writeInt(_result69);
                            return true;
                        case TRANSACTION_setEspAvhEnabled /* 264 */:
                            return onTransact$setEspAvhEnabled$(data, reply);
                        case TRANSACTION_isEspAvhEnabled /* 265 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result70 = isEspAvhEnabled();
                            reply.writeNoException();
                            reply.writeInt(_result70);
                            return true;
                        case TRANSACTION_resetIcmMeterMileageA /* 266 */:
                            data.enforceInterface(DESCRIPTOR);
                            resetIcmMeterMileageA();
                            reply.writeNoException();
                            return true;
                        case TRANSACTION_resetIcmMeterMileageB /* 267 */:
                            data.enforceInterface(DESCRIPTOR);
                            resetIcmMeterMileageB();
                            reply.writeNoException();
                            return true;
                        case TRANSACTION_setIcmAlarmVolume /* 268 */:
                            return onTransact$setIcmAlarmVolume$(data, reply);
                        case TRANSACTION_getIcmAlarmVolume /* 269 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result71 = getIcmAlarmVolume();
                            reply.writeNoException();
                            reply.writeInt(_result71);
                            return true;
                        case TRANSACTION_setIcmTimeFormat /* 270 */:
                            return onTransact$setIcmTimeFormat$(data, reply);
                        case TRANSACTION_setIcmTemperature /* 271 */:
                            return onTransact$setIcmTemperature$(data, reply);
                        case 272:
                            data.enforceInterface(DESCRIPTOR);
                            int _result72 = getIcmTemperature();
                            reply.writeNoException();
                            reply.writeInt(_result72);
                            return true;
                        case TRANSACTION_setIcmWindPower /* 273 */:
                            return onTransact$setIcmWindPower$(data, reply);
                        case TRANSACTION_getIcmWindPower /* 274 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result73 = getIcmWindPower();
                            reply.writeNoException();
                            reply.writeInt(_result73);
                            return true;
                        case TRANSACTION_setIcmWindMode /* 275 */:
                            return onTransact$setIcmWindMode$(data, reply);
                        case TRANSACTION_getIcmWindMode /* 276 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result74 = getIcmWindMode();
                            reply.writeNoException();
                            reply.writeInt(_result74);
                            return true;
                        case TRANSACTION_setIcmMediaSource /* 277 */:
                            return onTransact$setIcmMediaSource$(data, reply);
                        case TRANSACTION_getIcmMediaSource /* 278 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result75 = getIcmMediaSource();
                            reply.writeNoException();
                            reply.writeInt(_result75);
                            return true;
                        case TRANSACTION_setIcmScreenLight /* 279 */:
                            return onTransact$setIcmScreenLight$(data, reply);
                        case TRANSACTION_getIcmScreenLight /* 280 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result76 = getIcmScreenLight();
                            reply.writeNoException();
                            reply.writeInt(_result76);
                            return true;
                        case TRANSACTION_setIcmNavigation /* 281 */:
                            return onTransact$setIcmNavigation$(data, reply);
                        case TRANSACTION_getIcmNavigation /* 282 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result77 = getIcmNavigation();
                            reply.writeNoException();
                            reply.writeInt(_result77);
                            return true;
                        case TRANSACTION_setIcmDayNightSwitch /* 283 */:
                            return onTransact$setIcmDayNightSwitch$(data, reply);
                        case TRANSACTION_getIcmDayNightSwitch /* 284 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result78 = getIcmDayNightSwitch();
                            reply.writeNoException();
                            reply.writeInt(_result78);
                            return true;
                        case TRANSACTION_setSpeedLimitWarningSwitch /* 285 */:
                            return onTransact$setSpeedLimitWarningSwitch$(data, reply);
                        case TRANSACTION_getSpeedLimitWarningSwitch /* 286 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result79 = getSpeedLimitWarningSwitch();
                            reply.writeNoException();
                            reply.writeInt(_result79);
                            return true;
                        case TRANSACTION_setSpeedLimitWarningValue /* 287 */:
                            return onTransact$setSpeedLimitWarningValue$(data, reply);
                        case TRANSACTION_getSpeedLimitWarningValue /* 288 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result80 = getSpeedLimitWarningValue();
                            reply.writeNoException();
                            reply.writeInt(_result80);
                            return true;
                        case TRANSACTION_setIcmWindBlowMode /* 289 */:
                            return onTransact$setIcmWindBlowMode$(data, reply);
                        case TRANSACTION_getIcmWindBlowMode /* 290 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result81 = getIcmWindBlowMode();
                            reply.writeNoException();
                            reply.writeInt(_result81);
                            return true;
                        case TRANSACTION_setIcmWindLevel /* 291 */:
                            return onTransact$setIcmWindLevel$(data, reply);
                        case TRANSACTION_getIcmWindLevel /* 292 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result82 = getIcmWindLevel();
                            reply.writeNoException();
                            reply.writeInt(_result82);
                            return true;
                        case TRANSACTION_setIcmDriverTempValue /* 293 */:
                            return onTransact$setIcmDriverTempValue$(data, reply);
                        case TRANSACTION_getIcmDriverTempValue /* 294 */:
                            data.enforceInterface(DESCRIPTOR);
                            float _result83 = getIcmDriverTempValue();
                            reply.writeNoException();
                            reply.writeFloat(_result83);
                            return true;
                        case TRANSACTION_setMeterSoundState /* 295 */:
                            return onTransact$setMeterSoundState$(data, reply);
                        case TRANSACTION_sendContacts /* 296 */:
                            return onTransact$sendContacts$(data, reply);
                        case TRANSACTION_setWeatherInfo /* 297 */:
                            return onTransact$setWeatherInfo$(data, reply);
                        case TRANSACTION_setNavigationInfo /* 298 */:
                            return onTransact$setNavigationInfo$(data, reply);
                        case TRANSACTION_setMusicInfo /* 299 */:
                            return onTransact$setMusicInfo$(data, reply);
                        case 300:
                            return onTransact$setNetRadioInfo$(data, reply);
                        case TRANSACTION_setRadioInfo /* 301 */:
                            return onTransact$setRadioInfo$(data, reply);
                        case TRANSACTION_setBtMusicState /* 302 */:
                            return onTransact$setBtMusicState$(data, reply);
                        case TRANSACTION_setIcmSystemTimeValue /* 303 */:
                            return onTransact$setIcmSystemTimeValue$(data, reply);
                        case TRANSACTION_getMeterMileageA /* 304 */:
                            data.enforceInterface(DESCRIPTOR);
                            float _result84 = getMeterMileageA();
                            reply.writeNoException();
                            reply.writeFloat(_result84);
                            return true;
                        case TRANSACTION_getMeterMileageB /* 305 */:
                            data.enforceInterface(DESCRIPTOR);
                            float _result85 = getMeterMileageB();
                            reply.writeNoException();
                            reply.writeFloat(_result85);
                            return true;
                        case TRANSACTION_getDriveTotalMileage /* 306 */:
                            data.enforceInterface(DESCRIPTOR);
                            float _result86 = getDriveTotalMileage();
                            reply.writeNoException();
                            reply.writeFloat(_result86);
                            return true;
                        case TRANSACTION_getLastChargeMileage /* 307 */:
                            data.enforceInterface(DESCRIPTOR);
                            float _result87 = getLastChargeMileage();
                            reply.writeNoException();
                            reply.writeFloat(_result87);
                            return true;
                        case TRANSACTION_getLastStartUpMileage /* 308 */:
                            data.enforceInterface(DESCRIPTOR);
                            float _result88 = getLastStartUpMileage();
                            reply.writeNoException();
                            reply.writeFloat(_result88);
                            return true;
                        case TRANSACTION_setMeterBackLightLevel /* 309 */:
                            return onTransact$setMeterBackLightLevel$(data, reply);
                        case TRANSACTION_setSpeechStateInfo /* 310 */:
                            return onTransact$setSpeechStateInfo$(data, reply);
                        case TRANSACTION_getIcmConnectionState /* 311 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result89 = getIcmConnectionState();
                            reply.writeNoException();
                            reply.writeInt(_result89);
                            return true;
                        case TRANSACTION_sendRomBinMsg /* 312 */:
                            return onTransact$sendRomBinMsg$(data, reply);
                        case TRANSACTION_setIcmAccount /* 313 */:
                            return onTransact$setIcmAccount$(data, reply);
                        case TRANSACTION_setNotifyMessage /* 314 */:
                            return onTransact$setNotifyMessage$(data, reply);
                        case TRANSACTION_getIpuFailStInfo /* 315 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result90 = getIpuFailStInfo();
                            reply.writeNoException();
                            reply.writeInt(_result90);
                            return true;
                        case TRANSACTION_getCtrlVolt /* 316 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result91 = getCtrlVolt();
                            reply.writeNoException();
                            reply.writeInt(_result91);
                            return true;
                        case TRANSACTION_getCtrlCurr /* 317 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result92 = getCtrlCurr();
                            reply.writeNoException();
                            reply.writeInt(_result92);
                            return true;
                        case TRANSACTION_getCtrlTemp /* 318 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result93 = getCtrlTemp();
                            reply.writeNoException();
                            reply.writeInt(_result93);
                            return true;
                        case TRANSACTION_getMotorTemp /* 319 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result94 = getMotorTemp();
                            reply.writeNoException();
                            reply.writeInt(_result94);
                            return true;
                        case 320:
                            data.enforceInterface(DESCRIPTOR);
                            float _result95 = getTorque();
                            reply.writeNoException();
                            reply.writeFloat(_result95);
                            return true;
                        case TRANSACTION_getRollSpeed /* 321 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result96 = getRollSpeed();
                            reply.writeNoException();
                            reply.writeInt(_result96);
                            return true;
                        case TRANSACTION_getMotorStatus /* 322 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result97 = getMotorStatus();
                            reply.writeNoException();
                            reply.writeInt(_result97);
                            return true;
                        case TRANSACTION_setPowerOnTunner /* 323 */:
                            data.enforceInterface(DESCRIPTOR);
                            setPowerOnTunner();
                            reply.writeNoException();
                            return true;
                        case TRANSACTION_setPowerOffTunner /* 324 */:
                            data.enforceInterface(DESCRIPTOR);
                            setPowerOffTunner();
                            reply.writeNoException();
                            return true;
                        case TRANSACTION_setRadioSearchStationUp /* 325 */:
                            data.enforceInterface(DESCRIPTOR);
                            setRadioSearchStationUp();
                            reply.writeNoException();
                            return true;
                        case TRANSACTION_setRadioSearchStationDown /* 326 */:
                            data.enforceInterface(DESCRIPTOR);
                            setRadioSearchStationDown();
                            reply.writeNoException();
                            return true;
                        case TRANSACTION_setStartFullBandScan /* 327 */:
                            data.enforceInterface(DESCRIPTOR);
                            setStartFullBandScan();
                            reply.writeNoException();
                            return true;
                        case TRANSACTION_setStopFullBandScan /* 328 */:
                            data.enforceInterface(DESCRIPTOR);
                            setStopFullBandScan();
                            reply.writeNoException();
                            return true;
                        case TRANSACTION_setRadioBand /* 329 */:
                            return onTransact$setRadioBand$(data, reply);
                        case TRANSACTION_setRadioVolumePercent /* 330 */:
                            return onTransact$setRadioVolumePercent$(data, reply);
                        case TRANSACTION_setRadioVolumeAutoFocus /* 331 */:
                            return onTransact$setRadioVolumeAutoFocus$(data, reply);
                        case TRANSACTION_getRadioVolumeAutoFocus /* 332 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result98 = getRadioVolumeAutoFocus();
                            reply.writeNoException();
                            reply.writeInt(_result98);
                            return true;
                        case TRANSACTION_setFmVolume /* 333 */:
                            return onTransact$setFmVolume$(data, reply);
                        case TRANSACTION_setCarExhibitionModeVol /* 334 */:
                            return onTransact$setCarExhibitionModeVol$(data, reply);
                        case TRANSACTION_setRadioFrequency /* 335 */:
                            return onTransact$setRadioFrequency$(data, reply);
                        case TRANSACTION_getRadioFrequency /* 336 */:
                            data.enforceInterface(DESCRIPTOR);
                            int[] _result99 = getRadioFrequency();
                            reply.writeNoException();
                            reply.writeIntArray(_result99);
                            return true;
                        case TRANSACTION_setAudioMode /* 337 */:
                            return onTransact$setAudioMode$(data, reply);
                        case TRANSACTION_getAudioMode /* 338 */:
                            data.enforceInterface(DESCRIPTOR);
                            int[] _result100 = getAudioMode();
                            reply.writeNoException();
                            reply.writeIntArray(_result100);
                            return true;
                        case TRANSACTION_getRadioStatus /* 339 */:
                            data.enforceInterface(DESCRIPTOR);
                            String _result101 = getRadioStatus();
                            reply.writeNoException();
                            reply.writeString(_result101);
                            return true;
                        case TRANSACTION_getAudioDspStatus /* 340 */:
                            data.enforceInterface(DESCRIPTOR);
                            String _result102 = getAudioDspStatus();
                            reply.writeNoException();
                            reply.writeString(_result102);
                            return true;
                        case TRANSACTION_setAudioGEQParams /* 341 */:
                            return onTransact$setAudioGEQParams$(data, reply);
                        case TRANSACTION_setAudioBalanceFader /* 342 */:
                            return onTransact$setAudioBalanceFader$(data, reply);
                        case TRANSACTION_setAudioParameters /* 343 */:
                            data.enforceInterface(DESCRIPTOR);
                            setAudioParameters();
                            reply.writeNoException();
                            return true;
                        case TRANSACTION_getBmsChargeCompleteTime /* 344 */:
                            data.enforceInterface(DESCRIPTOR);
                            float _result103 = getBmsChargeCompleteTime();
                            reply.writeNoException();
                            reply.writeFloat(_result103);
                            return true;
                        case TRANSACTION_getTboxRtcTimeStamp /* 345 */:
                            data.enforceInterface(DESCRIPTOR);
                            long _result104 = getTboxRtcTimeStamp();
                            reply.writeNoException();
                            reply.writeLong(_result104);
                            return true;
                        case TRANSACTION_setTboxWifiStatus /* 346 */:
                            return onTransact$setTboxWifiStatus$(data, reply);
                        case TRANSACTION_setTboxWifiGatewayInfo /* 347 */:
                            return onTransact$setTboxWifiGatewayInfo$(data, reply);
                        case TRANSACTION_sendTboxRemoteDiagInfo /* 348 */:
                            return onTransact$sendTboxRemoteDiagInfo$(data, reply);
                        case TRANSACTION_getRemoteDiagCaptureRequest /* 349 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result105 = getRemoteDiagCaptureRequest();
                            reply.writeNoException();
                            reply.writeInt(_result105);
                            return true;
                        case TRANSACTION_setRemoteDiagCaptureResponse /* 350 */:
                            return onTransact$setRemoteDiagCaptureResponse$(data, reply);
                        case TRANSACTION_getTboxVersionInfoAsync /* 351 */:
                            data.enforceInterface(DESCRIPTOR);
                            getTboxVersionInfoAsync();
                            reply.writeNoException();
                            return true;
                        case TRANSACTION_beginTboxOTA /* 352 */:
                            data.enforceInterface(DESCRIPTOR);
                            beginTboxOTA();
                            reply.writeNoException();
                            return true;
                        case TRANSACTION_stopTboxOTA /* 353 */:
                            data.enforceInterface(DESCRIPTOR);
                            stopTboxOTA();
                            reply.writeNoException();
                            return true;
                        case TRANSACTION_getOTAProgress /* 354 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result106 = getOTAProgress();
                            reply.writeNoException();
                            reply.writeInt(_result106);
                            return true;
                        case TRANSACTION_getTBoxModemInfo /* 356 */:
                            data.enforceInterface(DESCRIPTOR);
                            String _result107 = getTBoxModemInfo();
                            reply.writeNoException();
                            reply.writeString(_result107);
                            return true;
                        case TRANSACTION_getTBoxConnectionStatus /* 357 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result108 = getTBoxConnectionStatus();
                            reply.writeNoException();
                            reply.writeInt(_result108);
                            return true;
                        case TRANSACTION_setAnalogSoundEffect /* 358 */:
                            return onTransact$setAnalogSoundEffect$(data, reply);
                        case TRANSACTION_setAnalogSoundEnable /* 359 */:
                            return onTransact$setAnalogSoundEnable$(data, reply);
                        case TRANSACTION_openBcmBonnet /* 360 */:
                            data.enforceInterface(DESCRIPTOR);
                            openBcmBonnet();
                            reply.writeNoException();
                            return true;
                        case TRANSACTION_isBcmBonnetOpened /* 361 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result109 = isBcmBonnetOpened();
                            reply.writeNoException();
                            reply.writeInt(_result109);
                            return true;
                        case TRANSACTION_setEspIbsBrakeMode /* 362 */:
                            return onTransact$setEspIbsBrakeMode$(data, reply);
                        case TRANSACTION_getEspIbsBrakeMode /* 363 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result110 = getEspIbsBrakeMode();
                            reply.writeNoException();
                            reply.writeInt(_result110);
                            return true;
                        case TRANSACTION_getTBoxChargeLimitValue /* 364 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result111 = getTBoxChargeLimitValue();
                            reply.writeNoException();
                            reply.writeInt(_result111);
                            return true;
                        case TRANSACTION_setTBoxChargeLimitValue /* 365 */:
                            return onTransact$setTBoxChargeLimitValue$(data, reply);
                        case TRANSACTION_stopCharge /* 366 */:
                            data.enforceInterface(DESCRIPTOR);
                            stopCharge();
                            reply.writeNoException();
                            return true;
                        case TRANSACTION_setAtlOpen /* 367 */:
                            return onTransact$setAtlOpen$(data, reply);
                        case TRANSACTION_getAtlOpen /* 368 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result112 = getAtlOpen();
                            reply.writeNoException();
                            reply.writeInt(_result112);
                            return true;
                        case TRANSACTION_getAtlReady /* 369 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result113 = getAtlReady();
                            reply.writeNoException();
                            reply.writeInt(_result113);
                            return true;
                        case TRANSACTION_getDoubleThemeColor /* 370 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result114 = getDoubleThemeColor();
                            reply.writeNoException();
                            reply.writeInt(_result114);
                            return true;
                        case TRANSACTION_setDoubleThemeColor /* 371 */:
                            return onTransact$setDoubleThemeColor$(data, reply);
                        case TRANSACTION_setThemeFirstColor /* 372 */:
                            return onTransact$setThemeFirstColor$(data, reply);
                        case TRANSACTION_getThemeFirstColor /* 373 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result115 = getThemeFirstColor();
                            reply.writeNoException();
                            reply.writeInt(_result115);
                            return true;
                        case TRANSACTION_setThemeSecondColor /* 374 */:
                            return onTransact$setThemeSecondColor$(data, reply);
                        case TRANSACTION_getThemeSecondColor /* 375 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result116 = getThemeSecondColor();
                            reply.writeNoException();
                            reply.writeInt(_result116);
                            return true;
                        case TRANSACTION_setAutoBrightness /* 376 */:
                            return onTransact$setAutoBrightness$(data, reply);
                        case TRANSACTION_getAutoBrightness /* 377 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result117 = getAutoBrightness();
                            reply.writeNoException();
                            reply.writeInt(_result117);
                            return true;
                        case TRANSACTION_setBrightnessLevel /* 378 */:
                            return onTransact$setBrightnessLevel$(data, reply);
                        case TRANSACTION_getBrightnessLevel /* 379 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result118 = getBrightnessLevel();
                            reply.writeNoException();
                            reply.writeInt(_result118);
                            return true;
                        case TRANSACTION_setTwoLightData /* 380 */:
                            return onTransact$setTwoLightData$(data, reply);
                        case TRANSACTION_setGroutLightData /* 381 */:
                            return onTransact$setGroutLightData$(data, reply);
                        case TRANSACTION_setAllLightData /* 382 */:
                            return onTransact$setAllLightData$(data, reply);
                        case TRANSACTION_setBcmWindowMovePosition /* 383 */:
                            return onTransact$setBcmWindowMovePosition$(data, reply);
                        case TRANSACTION_setHvacFanSpeedInc /* 384 */:
                            data.enforceInterface(DESCRIPTOR);
                            setHvacFanSpeedInc();
                            reply.writeNoException();
                            return true;
                        case TRANSACTION_setHvacFanSpeedDec /* 385 */:
                            data.enforceInterface(DESCRIPTOR);
                            setHvacFanSpeedDec();
                            reply.writeNoException();
                            return true;
                        case TRANSACTION_setHvacDrvSeatTempInc /* 386 */:
                            data.enforceInterface(DESCRIPTOR);
                            setHvacDrvSeatTempInc();
                            reply.writeNoException();
                            return true;
                        case TRANSACTION_setHvacDrvSeatTempDec /* 387 */:
                            data.enforceInterface(DESCRIPTOR);
                            setHvacDrvSeatTempDec();
                            reply.writeNoException();
                            return true;
                        case TRANSACTION_setHvacPsnSeatTempInc /* 388 */:
                            data.enforceInterface(DESCRIPTOR);
                            setHvacPsnSeatTempInc();
                            reply.writeNoException();
                            return true;
                        case TRANSACTION_setHvacPsnSeatTempDec /* 389 */:
                            data.enforceInterface(DESCRIPTOR);
                            setHvacPsnSeatTempDec();
                            reply.writeNoException();
                            return true;
                        case TRANSACTION_getMcuBatteryStatus /* 390 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result119 = getMcuBatteryStatus();
                            reply.writeNoException();
                            reply.writeInt(_result119);
                            return true;
                        case TRANSACTION_getMcuIgState /* 391 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result120 = getMcuIgState();
                            reply.writeNoException();
                            reply.writeInt(_result120);
                            return true;
                        case TRANSACTION_getMcuCameraStatus /* 392 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result121 = getMcuCameraStatus();
                            reply.writeNoException();
                            reply.writeInt(_result121);
                            return true;
                        case TRANSACTION_getMcuLampStatus /* 393 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result122 = getMcuLampStatus();
                            reply.writeNoException();
                            reply.writeInt(_result122);
                            return true;
                        case TRANSACTION_getMcuChargeStatus /* 394 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result123 = getMcuChargeStatus();
                            reply.writeNoException();
                            reply.writeInt(_result123);
                            return true;
                        case TRANSACTION_requestTBoxModemStatus /* 395 */:
                            data.enforceInterface(DESCRIPTOR);
                            requestTBoxModemStatus();
                            reply.writeNoException();
                            return true;
                        case TRANSACTION_getTBoxLastApnMsg /* 396 */:
                            data.enforceInterface(DESCRIPTOR);
                            String _result124 = getTBoxLastApnMsg();
                            reply.writeNoException();
                            reply.writeString(_result124);
                            return true;
                        case TRANSACTION_getTBoxLastModemMsg /* 397 */:
                            data.enforceInterface(DESCRIPTOR);
                            String _result125 = getTBoxLastModemMsg();
                            reply.writeNoException();
                            reply.writeString(_result125);
                            return true;
                        case TRANSACTION_requestTBoxBandModemStatus /* 398 */:
                            data.enforceInterface(DESCRIPTOR);
                            requestTBoxBandModemStatus();
                            reply.writeNoException();
                            return true;
                        case TRANSACTION_getTBoxLastBandModemMsg /* 399 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result126 = getTBoxLastBandModemMsg();
                            reply.writeNoException();
                            reply.writeInt(_result126);
                            return true;
                        case TRANSACTION_setTBoxBandModem /* 400 */:
                            return onTransact$setTBoxBandModem$(data, reply);
                        case TRANSACTION_getTBoxBandModem /* 401 */:
                            data.enforceInterface(DESCRIPTOR);
                            String _result127 = getTBoxBandModem();
                            reply.writeNoException();
                            reply.writeString(_result127);
                            return true;
                        case TRANSACTION_setAtlDowOpen /* 402 */:
                            return onTransact$setAtlDowOpen$(data, reply);
                        case TRANSACTION_getAtlDowOpen /* 403 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result128 = getAtlDowOpen();
                            reply.writeNoException();
                            reply.writeInt(_result128);
                            return true;
                        case TRANSACTION_setLluEnableStatus /* 404 */:
                            return onTransact$setLluEnableStatus$(data, reply);
                        case TRANSACTION_getLluEnableStatus /* 405 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result129 = getLluEnableStatus();
                            reply.writeNoException();
                            reply.writeInt(_result129);
                            return true;
                        case TRANSACTION_setLluWakeWaitSwitch /* 406 */:
                            return onTransact$setLluWakeWaitSwitch$(data, reply);
                        case TRANSACTION_getLluWakeWaitSwitch /* 407 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result130 = getLluWakeWaitSwitch();
                            reply.writeNoException();
                            reply.writeInt(_result130);
                            return true;
                        case TRANSACTION_setLluShowOffSwitch /* 408 */:
                            return onTransact$setLluShowOffSwitch$(data, reply);
                        case TRANSACTION_getLluShowOffSwitch /* 409 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result131 = getLluShowOffSwitch();
                            reply.writeNoException();
                            reply.writeInt(_result131);
                            return true;
                        case TRANSACTION_setLluSleepSwitch /* 410 */:
                            return onTransact$setLluSleepSwitch$(data, reply);
                        case TRANSACTION_getLluSleepSwitch /* 411 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result132 = getLluSleepSwitch();
                            reply.writeNoException();
                            reply.writeInt(_result132);
                            return true;
                        case TRANSACTION_setLluChargingSwitch /* 412 */:
                            return onTransact$setLluChargingSwitch$(data, reply);
                        case TRANSACTION_getLluChargingSwitch /* 413 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result133 = getLluChargingSwitch();
                            reply.writeNoException();
                            reply.writeInt(_result133);
                            return true;
                        case TRANSACTION_setLluPhotoSwitch /* 414 */:
                            return onTransact$setLluPhotoSwitch$(data, reply);
                        case TRANSACTION_getLluPhotoSwitch /* 415 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result134 = getLluPhotoSwitch();
                            reply.writeNoException();
                            reply.writeInt(_result134);
                            return true;
                        case TRANSACTION_setLluPrivateCtrl /* 416 */:
                            return onTransact$setLluPrivateCtrl$(data, reply);
                        case TRANSACTION_setAvasWaitForWakeUpSoundSwitch /* 417 */:
                            return onTransact$setAvasWaitForWakeUpSoundSwitch$(data, reply);
                        case TRANSACTION_getAvasWaitForWakeUpSoundState /* 418 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result135 = getAvasWaitForWakeUpSoundState();
                            reply.writeNoException();
                            reply.writeInt(_result135);
                            return true;
                        case TRANSACTION_setAvasFullChargeWaitForWakeUpSoundSwitch /* 419 */:
                            return onTransact$setAvasFullChargeWaitForWakeUpSoundSwitch$(data, reply);
                        case TRANSACTION_getAvasFullChargeWaitForWakeUpSoundState /* 420 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result136 = getAvasFullChargeWaitForWakeUpSoundState();
                            reply.writeNoException();
                            reply.writeInt(_result136);
                            return true;
                        case TRANSACTION_setAvasSleepSoundSwitch /* 421 */:
                            return onTransact$setAvasSleepSoundSwitch$(data, reply);
                        case TRANSACTION_getAvasSleepSoundState /* 422 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result137 = getAvasSleepSoundState();
                            reply.writeNoException();
                            reply.writeInt(_result137);
                            return true;
                        case TRANSACTION_setAvasAcChargingSoundSwitch /* 423 */:
                            return onTransact$setAvasAcChargingSoundSwitch$(data, reply);
                        case TRANSACTION_getAvasAcChargingSoundState /* 424 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result138 = getAvasAcChargingSoundState();
                            reply.writeNoException();
                            reply.writeInt(_result138);
                            return true;
                        case TRANSACTION_setAvasDcChargingSoundSwitch /* 425 */:
                            return onTransact$setAvasDcChargingSoundSwitch$(data, reply);
                        case TRANSACTION_getAvasDcChargingSoundState /* 426 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result139 = getAvasDcChargingSoundState();
                            reply.writeNoException();
                            reply.writeInt(_result139);
                            return true;
                        case TRANSACTION_setAvasDisconnectChargingSoundSwitch /* 427 */:
                            return onTransact$setAvasDisconnectChargingSoundSwitch$(data, reply);
                        case TRANSACTION_getAvasDisconnectChargingSoundState /* 428 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result140 = getAvasDisconnectChargingSoundState();
                            reply.writeNoException();
                            reply.writeInt(_result140);
                            return true;
                        case TRANSACTION_setAvasLowSpeedSoundSwitch /* 429 */:
                            return onTransact$setAvasLowSpeedSoundSwitch$(data, reply);
                        case TRANSACTION_getAvasLowSpeedSoundSwitch /* 430 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result141 = getAvasLowSpeedSoundSwitch();
                            reply.writeNoException();
                            reply.writeInt(_result141);
                            return true;
                        case TRANSACTION_setAvasLowSpeedSoundEffect /* 431 */:
                            return onTransact$setAvasLowSpeedSoundEffect$(data, reply);
                        case TRANSACTION_getAvasLowSpeedSoundEffect /* 432 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result142 = getAvasLowSpeedSoundEffect();
                            reply.writeNoException();
                            reply.writeInt(_result142);
                            return true;
                        case TRANSACTION_setAvasExternalSoundCmd /* 433 */:
                            return onTransact$setAvasExternalSoundCmd$(data, reply);
                        case TRANSACTION_setAvasFriendlySayHiSound /* 434 */:
                            return onTransact$setAvasFriendlySayHiSound$(data, reply);
                        case TRANSACTION_getAvasFriendlySayHiSound /* 435 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result143 = getAvasFriendlySayHiSound();
                            reply.writeNoException();
                            reply.writeInt(_result143);
                            return true;
                        case TRANSACTION_setAvasExternalVolume /* 436 */:
                            return onTransact$setAvasExternalVolume$(data, reply);
                        case TRANSACTION_getAvasExternalVolume /* 437 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result144 = getAvasExternalVolume();
                            reply.writeNoException();
                            reply.writeInt(_result144);
                            return true;
                        case TRANSACTION_setAvasLowSpeedVolume /* 438 */:
                            return onTransact$setAvasLowSpeedVolume$(data, reply);
                        case TRANSACTION_getAvasLowSpeedVolume /* 439 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result145 = getAvasLowSpeedVolume();
                            reply.writeNoException();
                            reply.writeInt(_result145);
                            return true;
                        case TRANSACTION_setLluBreathMode /* 440 */:
                            return onTransact$setLluBreathMode$(data, reply);
                        case TRANSACTION_getLluBreathMode /* 441 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result146 = getLluBreathMode();
                            reply.writeNoException();
                            reply.writeInt(_result146);
                            return true;
                        case TRANSACTION_getLluCurrentFunction /* 442 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result147 = getLluCurrentFunction();
                            reply.writeNoException();
                            reply.writeInt(_result147);
                            return true;
                        case TRANSACTION_setAvasExternalSoundModeCmd /* 443 */:
                            return onTransact$setAvasExternalSoundModeCmd$(data, reply);
                        case TRANSACTION_setMsmDrvSeatHorizMove /* 444 */:
                            return onTransact$setMsmDrvSeatHorizMove$(data, reply);
                        case TRANSACTION_setMsmDrvSeatBackMove /* 445 */:
                            return onTransact$setMsmDrvSeatBackMove$(data, reply);
                        case TRANSACTION_setMsmDrvSeatVertiMove /* 446 */:
                            return onTransact$setMsmDrvSeatVertiMove$(data, reply);
                        case TRANSACTION_setMsmDrvLegVertiMove /* 447 */:
                            return onTransact$setMsmDrvLegVertiMove$(data, reply);
                        case TRANSACTION_setMsmDrvLumbHorzMove /* 448 */:
                            return onTransact$setMsmDrvLumbHorzMove$(data, reply);
                        case TRANSACTION_setMsmDrvLumbVertiMove /* 449 */:
                            return onTransact$setMsmDrvLumbVertiMove$(data, reply);
                        case TRANSACTION_setMsmDrvSeatHorizPosition /* 450 */:
                            return onTransact$setMsmDrvSeatHorizPosition$(data, reply);
                        case TRANSACTION_getMsmDrvSeatHorizPosition /* 451 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result148 = getMsmDrvSeatHorizPosition();
                            reply.writeNoException();
                            reply.writeInt(_result148);
                            return true;
                        case TRANSACTION_setMsmDrvSeatVertiPosition /* 452 */:
                            return onTransact$setMsmDrvSeatVertiPosition$(data, reply);
                        case TRANSACTION_getMsmDrvSeatVertiPosition /* 453 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result149 = getMsmDrvSeatVertiPosition();
                            reply.writeNoException();
                            reply.writeInt(_result149);
                            return true;
                        case TRANSACTION_setMsmDrvSeatBackPosition /* 454 */:
                            return onTransact$setMsmDrvSeatBackPosition$(data, reply);
                        case TRANSACTION_getMsmDrvSeatBackPosition /* 455 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result150 = getMsmDrvSeatBackPosition();
                            reply.writeNoException();
                            reply.writeInt(_result150);
                            return true;
                        case TRANSACTION_setMsmDrvSeatLegPosition /* 456 */:
                            return onTransact$setMsmDrvSeatLegPosition$(data, reply);
                        case TRANSACTION_getMsmDrvSeatLegPosition /* 457 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result151 = getMsmDrvSeatLegPosition();
                            reply.writeNoException();
                            reply.writeInt(_result151);
                            return true;
                        case TRANSACTION_setMsmPsnSeatHorizMove /* 462 */:
                            return onTransact$setMsmPsnSeatHorizMove$(data, reply);
                        case TRANSACTION_setMsmPsnSeatBackMove /* 463 */:
                            return onTransact$setMsmPsnSeatBackMove$(data, reply);
                        case TRANSACTION_setMsmPsnSeatVertiMove /* 464 */:
                            return onTransact$setMsmPsnSeatVertiMove$(data, reply);
                        case TRANSACTION_getBcmWindowMovePosition /* 471 */:
                            return onTransact$getBcmWindowMovePosition$(data, reply);
                        case TRANSACTION_setBcmWindowMoveCmd /* 472 */:
                            return onTransact$setBcmWindowMoveCmd$(data, reply);
                        case TRANSACTION_setBcmNfcCardEnabled /* 473 */:
                            return onTransact$setBcmNfcCardEnabled$(data, reply);
                        case TRANSACTION_getBcmNfcCardSwitchState /* 474 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result152 = getBcmNfcCardSwitchState();
                            reply.writeNoException();
                            reply.writeInt(_result152);
                            return true;
                        case TRANSACTION_setBcmAutoWindowCmd /* 475 */:
                            return onTransact$setBcmAutoWindowCmd$(data, reply);
                        case TRANSACTION_setBcmWindowRemoteCtrlCfg /* 476 */:
                            return onTransact$setBcmWindowRemoteCtrlCfg$(data, reply);
                        case TRANSACTION_getWindowRemoteCtrlCfg /* 477 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result153 = getWindowRemoteCtrlCfg();
                            reply.writeNoException();
                            reply.writeInt(_result153);
                            return true;
                        case TRANSACTION_setBcmChildLockCfg /* 478 */:
                            return onTransact$setBcmChildLockCfg$(data, reply);
                        case TRANSACTION_getBcmChildLockCfg /* 479 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result154 = getBcmChildLockCfg();
                            reply.writeNoException();
                            reply.writeInt(_result154);
                            return true;
                        case 480:
                            return onTransact$setBcmLeftMirrorCtrlCmd$(data, reply);
                        case TRANSACTION_setBcmRightMirrorCtrlCmd /* 481 */:
                            return onTransact$setBcmRightMirrorCtrlCmd$(data, reply);
                        case TRANSACTION_setBcmLeftMirrorHorizPos /* 482 */:
                            return onTransact$setBcmLeftMirrorHorizPos$(data, reply);
                        case TRANSACTION_getBcmLeftMirrorHorizPos /* 483 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result155 = getBcmLeftMirrorHorizPos();
                            reply.writeNoException();
                            reply.writeInt(_result155);
                            return true;
                        case TRANSACTION_setBcmRightMirrorHorizPos /* 484 */:
                            return onTransact$setBcmRightMirrorHorizPos$(data, reply);
                        case TRANSACTION_getBcmRightMirrorHorizPos /* 485 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result156 = getBcmRightMirrorHorizPos();
                            reply.writeNoException();
                            reply.writeInt(_result156);
                            return true;
                        case TRANSACTION_setBcmLeftMirrorVerticalPos /* 486 */:
                            return onTransact$setBcmLeftMirrorVerticalPos$(data, reply);
                        case TRANSACTION_getBcmLeftMirrorVerticalPos /* 487 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result157 = getBcmLeftMirrorVerticalPos();
                            reply.writeNoException();
                            reply.writeInt(_result157);
                            return true;
                        case TRANSACTION_setBcmRightMirrorVerticalPos /* 488 */:
                            return onTransact$setBcmRightMirrorVerticalPos$(data, reply);
                        case TRANSACTION_getBcmRightMirrorVerticalPos /* 489 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result158 = getBcmRightMirrorVerticalPos();
                            reply.writeNoException();
                            reply.writeInt(_result158);
                            return true;
                        case TRANSACTION_setBcmReverseMirrorCfgCmd /* 490 */:
                            return onTransact$setBcmReverseMirrorCfgCmd$(data, reply);
                        case TRANSACTION_getBcmReverseMirrorCfgCmd /* 491 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result159 = getBcmReverseMirrorCfgCmd();
                            reply.writeNoException();
                            reply.writeInt(_result159);
                            return true;
                        case TRANSACTION_setBcmShcReq /* 492 */:
                            return onTransact$setBcmShcReq$(data, reply);
                        case TRANSACTION_setBcmFollowMeTime /* 493 */:
                            return onTransact$setBcmFollowMeTime$(data, reply);
                        case TRANSACTION_getBcmFollowMeTime /* 494 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result160 = getBcmFollowMeTime();
                            reply.writeNoException();
                            reply.writeInt(_result160);
                            return true;
                        case TRANSACTION_setBcmDayLightMode /* 495 */:
                            return onTransact$setBcmDayLightMode$(data, reply);
                        case TRANSACTION_getBcmDayLightMode /* 496 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result161 = getBcmDayLightMode();
                            reply.writeNoException();
                            reply.writeInt(_result161);
                            return true;
                        case TRANSACTION_setBcmDomeLightCfg /* 499 */:
                            return onTransact$setBcmDomeLightCfg$(data, reply);
                        case 500:
                            data.enforceInterface(DESCRIPTOR);
                            int _result162 = getBcmDomeLightCfg();
                            reply.writeNoException();
                            reply.writeInt(_result162);
                            return true;
                        case TRANSACTION_getTpmsTirePressureValue /* 501 */:
                            return onTransact$getTpmsTirePressureValue$(data, reply);
                        case TRANSACTION_setHvacTempRightSyncEnabled /* 502 */:
                            return onTransact$setHvacTempRightSyncEnabled$(data, reply);
                        case TRANSACTION_getHvacTempRightSyncState /* 503 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result163 = getHvacTempRightSyncState();
                            reply.writeNoException();
                            reply.writeInt(_result163);
                            return true;
                        case TRANSACTION_setHvacDrvLeftFanHorPos /* 504 */:
                            return onTransact$setHvacDrvLeftFanHorPos$(data, reply);
                        case TRANSACTION_getHvacDrvLeftFanHorPos /* 505 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result164 = getHvacDrvLeftFanHorPos();
                            reply.writeNoException();
                            reply.writeInt(_result164);
                            return true;
                        case TRANSACTION_setHvacDrvLeftFanVerPos /* 506 */:
                            return onTransact$setHvacDrvLeftFanVerPos$(data, reply);
                        case TRANSACTION_getHvacDrvLeftFanVerPos /* 507 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result165 = getHvacDrvLeftFanVerPos();
                            reply.writeNoException();
                            reply.writeInt(_result165);
                            return true;
                        case TRANSACTION_setHvacDrvRightFanHorPos /* 508 */:
                            return onTransact$setHvacDrvRightFanHorPos$(data, reply);
                        case TRANSACTION_getHvacDrvRightFanHorPos /* 509 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result166 = getHvacDrvRightFanHorPos();
                            reply.writeNoException();
                            reply.writeInt(_result166);
                            return true;
                        case TRANSACTION_setHvacDrvRightFanVerPos /* 510 */:
                            return onTransact$setHvacDrvRightFanVerPos$(data, reply);
                        case TRANSACTION_getHvacDrvRightFanVerPos /* 511 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result167 = getHvacDrvRightFanVerPos();
                            reply.writeNoException();
                            reply.writeInt(_result167);
                            return true;
                        case 512:
                            return onTransact$setHvacPsnLeftFanHorPos$(data, reply);
                        case 513:
                            data.enforceInterface(DESCRIPTOR);
                            int _result168 = getHvacPsnLeftFanHorPos();
                            reply.writeNoException();
                            reply.writeInt(_result168);
                            return true;
                        case 514:
                            return onTransact$setHvacPsnLeftFanVerPos$(data, reply);
                        case 515:
                            data.enforceInterface(DESCRIPTOR);
                            int _result169 = getHvacPsnLeftFanVerPos();
                            reply.writeNoException();
                            reply.writeInt(_result169);
                            return true;
                        case 516:
                            return onTransact$setHvacPsnRightFanHorPos$(data, reply);
                        case 517:
                            data.enforceInterface(DESCRIPTOR);
                            int _result170 = getHvacPsnRightFanHorPos();
                            reply.writeNoException();
                            reply.writeInt(_result170);
                            return true;
                        case 518:
                            return onTransact$setHvacPsnRightFanVerPos$(data, reply);
                        case TRANSACTION_getHvacPsnRightFanVerPos /* 519 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result171 = getHvacPsnRightFanVerPos();
                            reply.writeNoException();
                            reply.writeInt(_result171);
                            return true;
                        case 520:
                            return onTransact$setHvacAqsEnabled$(data, reply);
                        case TRANSACTION_getHvacAqsSwitchState /* 521 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result172 = getHvacAqsSwitchState();
                            reply.writeNoException();
                            reply.writeInt(_result172);
                            return true;
                        case TRANSACTION_setHvacAqsSensitivity /* 522 */:
                            return onTransact$setHvacAqsSensitivity$(data, reply);
                        case TRANSACTION_getHvacAqsSensitivity /* 523 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result173 = getHvacAqsSensitivity();
                            reply.writeNoException();
                            reply.writeInt(_result173);
                            return true;
                        case TRANSACTION_setHvacSweepWindStatus /* 524 */:
                            return onTransact$setHvacSweepWindStatus$(data, reply);
                        case TRANSACTION_getHvacSweepWindStatus /* 525 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result174 = getHvacSweepWindStatus();
                            reply.writeNoException();
                            reply.writeInt(_result174);
                            return true;
                        case TRANSACTION_setHvacEconEnabled /* 526 */:
                            return onTransact$setHvacEconEnabled$(data, reply);
                        case TRANSACTION_getHvacEconState /* 527 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result175 = getHvacEconState();
                            reply.writeNoException();
                            reply.writeInt(_result175);
                            return true;
                        case TRANSACTION_setHvacEavDrvWindMode /* 528 */:
                            return onTransact$setHvacEavDrvWindMode$(data, reply);
                        case TRANSACTION_getHvacEavDrvWindMode /* 529 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result176 = getHvacEavDrvWindMode();
                            reply.writeNoException();
                            reply.writeInt(_result176);
                            return true;
                        case TRANSACTION_setHvacEavPsnWindMode /* 530 */:
                            return onTransact$setHvacEavPsnWindMode$(data, reply);
                        case TRANSACTION_getHvacEavPsnWindMode /* 531 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result177 = getHvacEavPsnWindMode();
                            reply.writeNoException();
                            reply.writeInt(_result177);
                            return true;
                        case TRANSACTION_setHvacAirCirculationPeriod /* 532 */:
                            return onTransact$setHvacAirCirculationPeriod$(data, reply);
                        case TRANSACTION_getHvacAirCirculationPeriod /* 533 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result178 = getHvacAirCirculationPeriod();
                            reply.writeNoException();
                            reply.writeInt(_result178);
                            return true;
                        case TRANSACTION_getHvacTempColor /* 534 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result179 = getHvacTempColor();
                            reply.writeNoException();
                            reply.writeInt(_result179);
                            return true;
                        case TRANSACTION_setHvacAirDistributionMode /* 535 */:
                            return onTransact$setHvacAirDistributionMode$(data, reply);
                        case TRANSACTION_getHvacExternalTemp /* 536 */:
                            data.enforceInterface(DESCRIPTOR);
                            float _result180 = getHvacExternalTemp();
                            reply.writeNoException();
                            reply.writeFloat(_result180);
                            return true;
                        case TRANSACTION_getHvacPm25Value /* 537 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result181 = getHvacPm25Value();
                            reply.writeNoException();
                            reply.writeInt(_result181);
                            return true;
                        case TRANSACTION_setSocCoolingRequestTemp /* 538 */:
                            return onTransact$setSocCoolingRequestTemp$(data, reply);
                        case TRANSACTION_setAmpCoolingRequestTemp /* 539 */:
                            return onTransact$setAmpCoolingRequestTemp$(data, reply);
                        case TRANSACTION_setAmpTempRiseSpeedState /* 540 */:
                            return onTransact$setAmpTempRiseSpeedState$(data, reply);
                        case TRANSACTION_getHvacLonizerState /* 541 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result182 = getHvacLonizerState();
                            reply.writeNoException();
                            reply.writeInt(_result182);
                            return true;
                        case TRANSACTION_setAvmCalibrationMode /* 542 */:
                            return onTransact$setAvmCalibrationMode$(data, reply);
                        case TRANSACTION_getAvmCalibrationMode /* 543 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result183 = getAvmCalibrationMode();
                            reply.writeNoException();
                            reply.writeInt(_result183);
                            return true;
                        case TRANSACTION_setAvmOverlayWorkSt /* 544 */:
                            return onTransact$setAvmOverlayWorkSt$(data, reply);
                        case TRANSACTION_getAvmOverlayWorkSt /* 545 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result184 = getAvmOverlayWorkSt();
                            reply.writeNoException();
                            reply.writeInt(_result184);
                            return true;
                        case TRANSACTION_setAvmTransparentChassisState /* 546 */:
                            return onTransact$setAvmTransparentChassisState$(data, reply);
                        case TRANSACTION_getAvmTransparentChassisState /* 547 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result185 = getAvmTransparentChassisState();
                            reply.writeNoException();
                            reply.writeInt(_result185);
                            return true;
                        case TRANSACTION_setAvmFineTuneMode /* 548 */:
                            return onTransact$setAvmFineTuneMode$(data, reply);
                        case TRANSACTION_getAvmFineTuneMode /* 549 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result186 = getAvmFineTuneMode();
                            reply.writeNoException();
                            reply.writeInt(_result186);
                            return true;
                        case 550:
                            return onTransact$setAmpMusicStyle$(data, reply);
                        case TRANSACTION_getAmpMusicStyle /* 551 */:
                            data.enforceInterface(DESCRIPTOR);
                            int _result187 = getAmpMusicStyle();
                            reply.writeNoException();
                            reply.writeInt(_result187);
                            return true;
                        case TRANSACTION_setAmpMusicScene /* 552 */:
                            return onTransact$setAmpMusicScene$(data, reply);
                        case TRANSACTION_getAmpMusicScene /* 553 */:
                            return onTransact$getAmpMusicScene$(data, reply);
                        case TRANSACTION_setAmpStandByEnabled /* 554 */:
                            return onTransact$setAmpStandByEnabled$(data, reply);
                        case TRANSACTION_isAmpStandByEnabled /* 555 */:
                            return onTransact$isAmpStandByEnabled$(data, reply);
                        case TRANSACTION_setAmpSoundFieldMode /* 556 */:
                            return onTransact$setAmpSoundFieldMode$(data, reply);
                        case TRANSACTION_getAmpSoundFieldMode /* 557 */:
                            return onTransact$getAmpSoundFieldMode$(data, reply);
                        case TRANSACTION_setApmAudioEffect /* 558 */:
                            return onTransact$setApmAudioEffect$(data, reply);
                        case TRANSACTION_getApmAudioEffect /* 559 */:
                            return onTransact$getApmAudioEffect$(data, reply);
                        case TRANSACTION_setAmpMute /* 560 */:
                            return onTransact$setAmpMute$(data, reply);
                        case TRANSACTION_isAmpMute /* 561 */:
                            return onTransact$isAmpMute$(data, reply);
                        case TRANSACTION_setAmpVolume /* 562 */:
                            return onTransact$setAmpVolume$(data, reply);
                        case TRANSACTION_getAmpVolume /* 563 */:
                            return onTransact$getAmpVolume$(data, reply);
                        case TRANSACTION_setAmpSoundTrackMode /* 564 */:
                            return onTransact$setAmpSoundTrackMode$(data, reply);
                        case TRANSACTION_getAmpSoundTrackMode /* 565 */:
                            return onTransact$getAmpSoundTrackMode$(data, reply);
                        case TRANSACTION_setFarLampAutoSwitch /* 566 */:
                            return onTransact$setFarLampAutoSwitch$(data, reply);
                        case TRANSACTION_getFarLampAutoSwitch /* 567 */:
                            return onTransact$getFarLampAutoSwitch$(data, reply);
                        case TRANSACTION_setCutLinePreventSw /* 568 */:
                            return onTransact$setCutLinePreventSw$(data, reply);
                        case TRANSACTION_getCutLinePreventSw /* 569 */:
                            return onTransact$getCutLinePreventSw$(data, reply);
                        case TRANSACTION_setRearCrossEmergencyWarning /* 570 */:
                            return onTransact$setRearCrossEmergencyWarning$(data, reply);
                        case TRANSACTION_getRearCrossEmergencyWarning /* 571 */:
                            return onTransact$getRearCrossEmergencyWarning$(data, reply);
                        case TRANSACTION_setRearCollisionSecurity /* 572 */:
                            return onTransact$setRearCollisionSecurity$(data, reply);
                        case TRANSACTION_getRearCollisionSecurity /* 573 */:
                            return onTransact$getRearCollisionSecurity$(data, reply);
                        case TRANSACTION_setDoorOpenWarning /* 574 */:
                            return onTransact$setDoorOpenWarning$(data, reply);
                        case TRANSACTION_getDoorOpenWarning /* 575 */:
                            return onTransact$getDoorOpenWarning$(data, reply);
                        case TRANSACTION_setFatigueDetectionSw /* 576 */:
                            return onTransact$setFatigueDetectionSw$(data, reply);
                        case TRANSACTION_getFatigueDetectionSw /* 577 */:
                            return onTransact$getFatigueDetectionSw$(data, reply);
                        case TRANSACTION_setTrafficSignRecognition /* 578 */:
                            return onTransact$setTrafficSignRecognition$(data, reply);
                        case TRANSACTION_getTrafficSignRecognition /* 579 */:
                            return onTransact$getTrafficSignRecognition$(data, reply);
                        case TRANSACTION_setSpdLimitWarnType /* 580 */:
                            return onTransact$setSpdLimitWarnType$(data, reply);
                        case TRANSACTION_getSpdLimitWarnType /* 581 */:
                            return onTransact$getSpdLimitWarnType$(data, reply);
                        case TRANSACTION_setLaneAlignmentAssist /* 582 */:
                            return onTransact$setLaneAlignmentAssist$(data, reply);
                        case TRANSACTION_getLaneAlignmentAssist /* 583 */:
                            return onTransact$getLaneAlignmentAssist$(data, reply);
                        case TRANSACTION_setHighSpeedNavigation /* 584 */:
                            return onTransact$setHighSpeedNavigation$(data, reply);
                        case TRANSACTION_getHighSpeedNavigation /* 585 */:
                            return onTransact$getHighSpeedNavigation$(data, reply);
                        case TRANSACTION_setAutoParkReq /* 586 */:
                            return onTransact$setAutoParkReq$(data, reply);
                        case TRANSACTION_setKeyRemoteParkType /* 587 */:
                            return onTransact$setKeyRemoteParkType$(data, reply);
                        case TRANSACTION_getKeyRemoteType /* 588 */:
                            return onTransact$getKeyRemoteType$(data, reply);
                        case TRANSACTION_setIntelligentCallButton /* 589 */:
                            return onTransact$setIntelligentCallButton$(data, reply);
                        case TRANSACTION_getIntelligentCallButton /* 590 */:
                            return onTransact$getIntelligentCallButton$(data, reply);
                        case TRANSACTION_getPhoneSMButton /* 591 */:
                            return onTransact$getPhoneSMButton$(data, reply);
                        case TRANSACTION_setAutoParkSwitch /* 592 */:
                            return onTransact$setAutoParkSwitch$(data, reply);
                        case TRANSACTION_getAutoParkSwitch /* 593 */:
                            return onTransact$getAutoParkSwitch$(data, reply);
                        case TRANSACTION_setPhoneParkType /* 594 */:
                            return onTransact$setPhoneParkType$(data, reply);
                        case TRANSACTION_getPhoneParkType /* 595 */:
                            return onTransact$getPhoneParkType$(data, reply);
                        case TRANSACTION_setKeyRemoteSMButton /* 596 */:
                            return onTransact$setKeyRemoteSMButton$(data, reply);
                        case TRANSACTION_getKeyRemoteSMButton /* 597 */:
                            return onTransact$getKeyRemoteSMButton$(data, reply);
                        case TRANSACTION_setAdasMapInfo /* 598 */:
                            return onTransact$setAdasMapInfo$(data, reply);
                        case TRANSACTION_getParkSlotInfo /* 599 */:
                            return onTransact$getParkSlotInfo$(data, reply);
                        case 600:
                            return onTransact$getEnvCharacterInfo$(data, reply);
                        case TRANSACTION_getCarPositionInfo /* 601 */:
                            return onTransact$getCarPositionInfo$(data, reply);
                        case 602:
                            return onTransact$getRadarDataInfo$(data, reply);
                        case 603:
                            return onTransact$getEpsSteeringAngle$(data, reply);
                        case 604:
                            return onTransact$getEpsSteeringAngleSpeed$(data, reply);
                        case 605:
                            return onTransact$setCdcFunctionMode$(data, reply);
                        case 606:
                            return onTransact$setMsbEnabled$(data, reply);
                        case 607:
                            return onTransact$isMsbEnabled$(data, reply);
                        case 608:
                            return onTransact$setDhcDoorknobAutoOpenEnabled$(data, reply);
                        case 609:
                            return onTransact$isDhcDoorknobAutoOpenEnabled$(data, reply);
                        case 610:
                            return onTransact$getCdcFunctionMode$(data, reply);
                        case 611:
                            return onTransact$setSrsBackBeltWarningEnabled$(data, reply);
                        case 612:
                            return onTransact$isSrsBackBeltWarningEnabled$(data, reply);
                        case TRANSACTION_isSrsPsnOnSeat /* 613 */:
                            return onTransact$isSrsPsnOnSeat$(data, reply);
                        case TRANSACTION_setChargeGunUnlock /* 614 */:
                            return onTransact$setChargeGunUnlock$(data, reply);
                        case TRANSACTION_setChargeAppointTime /* 615 */:
                            return onTransact$setChargeAppointTime$(data, reply);
                        case TRANSACTION_getVcuResHeatManaTime /* 616 */:
                            return onTransact$getVcuResHeatManaTime$(data, reply);
                        case TRANSACTION_getVcuAcChargeVolt /* 617 */:
                            return onTransact$getVcuAcChargeVolt$(data, reply);
                        case TRANSACTION_getVcuAcChargeCur /* 618 */:
                            return onTransact$getVcuAcChargeCur$(data, reply);
                        case TRANSACTION_getVcuDcChargeCur /* 619 */:
                            return onTransact$getVcuDcChargeCur$(data, reply);
                        case TRANSACTION_getVcuDcChargeVolt /* 620 */:
                            return onTransact$getVcuDcChargeVolt$(data, reply);
                        case TRANSACTION_setVcuDisChargeLimit /* 621 */:
                            return onTransact$setVcuDisChargeLimit$(data, reply);
                        case TRANSACTION_getVcuDisCargeLimit /* 622 */:
                            return onTransact$getVcuDisCargeLimit$(data, reply);
                        case TRANSACTION_setVcuDisChargeEnabled /* 623 */:
                            return onTransact$setVcuDisChargeEnabled$(data, reply);
                        case TRANSACTION_getVcuDischargeQuantity /* 624 */:
                            return onTransact$getVcuDischargeQuantity$(data, reply);
                        case TRANSACTION_getVcuChargeSocQuantity /* 625 */:
                            return onTransact$getVcuChargeSocQuantity$(data, reply);
                        case TRANSACTION_getVcuEvsysReadyState /* 626 */:
                            return onTransact$getVcuEvsysReadyState$(data, reply);
                        case TRANSACTION_setBcmWiperServiceMode /* 627 */:
                            return onTransact$setBcmWiperServiceMode$(data, reply);
                        case TRANSACTION_getBcmWiperServiceMode /* 628 */:
                            return onTransact$getBcmWiperServiceMode$(data, reply);
                        case TRANSACTION_getBcmManualFrontLeftWinStatus /* 629 */:
                            return onTransact$getBcmManualFrontLeftWinStatus$(data, reply);
                        case TRANSACTION_getBcmManualFrontRightWinStatus /* 630 */:
                            return onTransact$getBcmManualFrontRightWinStatus$(data, reply);
                        case TRANSACTION_getBcmManualRearLeftWinStatus /* 631 */:
                            return onTransact$getBcmManualRearLeftWinStatus$(data, reply);
                        case TRANSACTION_getBcmManualRearRightWinStatus /* 632 */:
                            return onTransact$getBcmManualRearRightWinStatus$(data, reply);
                        case TRANSACTION_getLeftFrontDoorOpened /* 633 */:
                            return onTransact$getLeftFrontDoorOpened$(data, reply);
                        case TRANSACTION_isBcmDriverOnSeat /* 634 */:
                            return onTransact$isBcmDriverOnSeat$(data, reply);
                        case TRANSACTION_setBcmHighBeamMode /* 635 */:
                            return onTransact$setBcmHighBeamMode$(data, reply);
                        case TRANSACTION_getVcuBatteryLevelPercent /* 636 */:
                            return onTransact$getVcuBatteryLevelPercent$(data, reply);
                        case TRANSACTION_getVcuBatteryVolt /* 637 */:
                            return onTransact$getVcuBatteryVolt$(data, reply);
                        case TRANSACTION_getVcuBatteryCur /* 638 */:
                            return onTransact$getVcuBatteryCur$(data, reply);
                        case TRANSACTION_getVcuStopChargeReason /* 639 */:
                            return onTransact$getVcuStopChargeReason$(data, reply);
                        case TRANSACTION_setVcuBrakeLightOn /* 640 */:
                            return onTransact$setVcuBrakeLightOn$(data, reply);
                        case TRANSACTION_getSrsDrvBeltFastenStatus /* 641 */:
                            return onTransact$getSrsDrvBeltFastenStatus$(data, reply);
                        case TRANSACTION_getSrsPsnBeltFastenStatus /* 642 */:
                            return onTransact$getSrsPsnBeltFastenStatus$(data, reply);
                        case TRANSACTION_getSrsBackLeftBeltFastenStatus /* 643 */:
                            return onTransact$getSrsBackLeftBeltFastenStatus$(data, reply);
                        case TRANSACTION_getSrsBackMiddleBeltFastenStatus /* 644 */:
                            return onTransact$getSrsBackMiddleBeltFastenStatus$(data, reply);
                        case TRANSACTION_getSrsBackRightBeltFastenStatus /* 645 */:
                            return onTransact$getSrsBackRightBeltFastenStatus$(data, reply);
                        case TRANSACTION_getSrsCrashOutputStatus /* 646 */:
                            return onTransact$getSrsCrashOutputStatus$(data, reply);
                        case TRANSACTION_getSrsAirbagFaultStatus /* 647 */:
                            return onTransact$getSrsAirbagFaultStatus$(data, reply);
                        case TRANSACTION_getSrsSelfCheckStatus /* 648 */:
                            return onTransact$getSrsSelfCheckStatus$(data, reply);
                        case TRANSACTION_getNetWorkType /* 649 */:
                            return onTransact$getNetWorkType$(data, reply);
                        case TRANSACTION_setAmpChannelVolAndSource /* 650 */:
                            return onTransact$setAmpChannelVolAndSource$(data, reply);
                        case TRANSACTION_getVcuBreakPedalStatus /* 651 */:
                            return onTransact$getVcuBreakPedalStatus$(data, reply);
                        case TRANSACTION_getVcuAccPedalStatus /* 652 */:
                            return onTransact$getVcuAccPedalStatus$(data, reply);
                        case TRANSACTION_getBcmLeftTurnLampStatus /* 653 */:
                            return onTransact$getBcmLeftTurnLampStatus$(data, reply);
                        case TRANSACTION_getBcmRightTurnLampStatus /* 654 */:
                            return onTransact$getBcmRightTurnLampStatus$(data, reply);
                        case TRANSACTION_setLluWakeWaitMode /* 655 */:
                            return onTransact$setLluWakeWaitMode$(data, reply);
                        case TRANSACTION_getLluWakeWaitMode /* 656 */:
                            return onTransact$getLluWakeWaitMode$(data, reply);
                        case TRANSACTION_setLluShowOffMode /* 657 */:
                            return onTransact$setLluShowOffMode$(data, reply);
                        case TRANSACTION_getLluShowOffMode /* 658 */:
                            return onTransact$getLluShowOffMode$(data, reply);
                        case TRANSACTION_setLluSleepMode /* 659 */:
                            return onTransact$setLluSleepMode$(data, reply);
                        case TRANSACTION_getLluSleepMode /* 660 */:
                            return onTransact$getLluSleepMode$(data, reply);
                        case TRANSACTION_setLluAcChargeMode /* 661 */:
                            return onTransact$setLluAcChargeMode$(data, reply);
                        case TRANSACTION_getLluAcChargeMode /* 662 */:
                            return onTransact$getLluAcChargeMode$(data, reply);
                        case TRANSACTION_setLluDcChargeMode /* 663 */:
                            return onTransact$setLluDcChargeMode$(data, reply);
                        case TRANSACTION_getLluDcChargeMode /* 664 */:
                            return onTransact$getLluDcChargeMode$(data, reply);
                        case TRANSACTION_setLluPhotoMode /* 665 */:
                            return onTransact$setLluPhotoMode$(data, reply);
                        case TRANSACTION_getLluPhotoMode /* 666 */:
                            return onTransact$getLluPhotoMode$(data, reply);
                        case TRANSACTION_isVcuParkingGearValid /* 667 */:
                            return onTransact$isVcuParkingGearValid$(data, reply);
                        case TRANSACTION_getBcmChargePortStatus /* 668 */:
                            return onTransact$getBcmChargePortStatus$(data, reply);
                        case TRANSACTION_getVpmLdwLeftWarningStatus /* 669 */:
                            return onTransact$getVpmLdwLeftWarningStatus$(data, reply);
                        case TRANSACTION_getVpmLdwRightWarningStatus /* 670 */:
                            return onTransact$getVpmLdwRightWarningStatus$(data, reply);
                        case TRANSACTION_getBlindAreaLeftWarning /* 671 */:
                            return onTransact$getBlindAreaLeftWarning$(data, reply);
                        case TRANSACTION_getBlindAreaRightWarning /* 672 */:
                            return onTransact$getBlindAreaRightWarning$(data, reply);
                        case TRANSACTION_getRearCrossLeftWarning /* 673 */:
                            return onTransact$getRearCrossLeftWarning$(data, reply);
                        case TRANSACTION_getRearCrossRightWarning /* 674 */:
                            return onTransact$getRearCrossRightWarning$(data, reply);
                        case TRANSACTION_getXpuLongCtrlRemind /* 675 */:
                            return onTransact$getXpuLongCtrlRemind$(data, reply);
                        case TRANSACTION_getXpilotStatus /* 676 */:
                            return onTransact$getXpilotStatus$(data, reply);
                        case TRANSACTION_getXpuLatCtrlRemind /* 677 */:
                            return onTransact$getXpuLatCtrlRemind$(data, reply);
                        case TRANSACTION_getVcuVehLast100mConsume /* 678 */:
                            return onTransact$getVcuVehLast100mConsume$(data, reply);
                        case TRANSACTION_isVcuBatteryCold /* 679 */:
                            return onTransact$isVcuBatteryCold$(data, reply);
                        case TRANSACTION_isVcuChargeSpeedSlow /* 680 */:
                            return onTransact$isVcuChargeSpeedSlow$(data, reply);
                        case TRANSACTION_getAccStatus /* 681 */:
                            return onTransact$getAccStatus$(data, reply);
                        case TRANSACTION_getChargeAppointTime /* 682 */:
                            return onTransact$getChargeAppointTime$(data, reply);
                        case TRANSACTION_getHvacTempSyncMode /* 683 */:
                            return onTransact$getHvacTempSyncMode$(data, reply);
                        case TRANSACTION_getSimStatusAsync /* 684 */:
                            return onTransact$getSimStatusAsync$(data, reply);
                        case TRANSACTION_getApmAllChannelVolume /* 685 */:
                            return onTransact$getApmAllChannelVolume$(data, reply);
                        case TRANSACTION_getApmAllChannelSoundSource /* 686 */:
                            return onTransact$getApmAllChannelSoundSource$(data, reply);
                        case TRANSACTION_setNetWorkType /* 687 */:
                            return onTransact$setNetWorkType$(data, reply);
                        case TRANSACTION_getBcmWiperInterval /* 688 */:
                            return onTransact$getBcmWiperInterval$(data, reply);
                        case TRANSACTION_getMcuUpdateReqStatus /* 689 */:
                            return onTransact$getMcuUpdateReqStatus$(data, reply);
                        case TRANSACTION_setMcuUpdateReqStatus /* 690 */:
                            return onTransact$setMcuUpdateReqStatus$(data, reply);
                        case TRANSACTION_getOtaMcuReqUpdatefile /* 691 */:
                            return onTransact$getOtaMcuReqUpdatefile$(data, reply);
                        case TRANSACTION_setOtaMcuReqUpdatefile /* 692 */:
                            return onTransact$setOtaMcuReqUpdatefile$(data, reply);
                        case TRANSACTION_setOtaMcuSendUpdatefile /* 693 */:
                            return onTransact$setOtaMcuSendUpdatefile$(data, reply);
                        case TRANSACTION_getOtaMcuUpdateStatus /* 694 */:
                            return onTransact$getOtaMcuUpdateStatus$(data, reply);
                        case TRANSACTION_getTboxVersionInfoResponse /* 695 */:
                            return onTransact$getTboxVersionInfoResponse$(data, reply);
                        case TRANSACTION_setTboxVersionInfoRequest /* 696 */:
                            return onTransact$setTboxVersionInfoRequest$(data, reply);
                        case TRANSACTION_startTboxOTA /* 697 */:
                            return onTransact$startTboxOTA$(data, reply);
                        case TRANSACTION_getStartTboxOTAResponse /* 698 */:
                            return onTransact$getStartTboxOTAResponse$(data, reply);
                        case TRANSACTION_getStopTboxOTAResponse /* 699 */:
                            return onTransact$getStopTboxOTAResponse$(data, reply);
                        case TRANSACTION_setIcmSyncSignal /* 700 */:
                            return onTransact$setIcmSyncSignal$(data, reply);
                        case TRANSACTION_setIcmOsdShow /* 701 */:
                            return onTransact$setIcmOsdShow$(data, reply);
                        case TRANSACTION_setIcmInfoCardAdd /* 702 */:
                            return onTransact$setIcmInfoCardAdd$(data, reply);
                        case TRANSACTION_setIcmInfoCardUpdate /* 703 */:
                            return onTransact$setIcmInfoCardUpdate$(data, reply);
                        case TRANSACTION_setIcmInfoCardRemove /* 704 */:
                            return onTransact$setIcmInfoCardRemove$(data, reply);
                        case TRANSACTION_setIcmAllCardsRefresh /* 705 */:
                            return onTransact$setIcmAllCardsRefresh$(data, reply);
                        case TRANSACTION_setIcmInfoFlowMsg /* 706 */:
                            return onTransact$setIcmInfoFlowMsg$(data, reply);
                        case TRANSACTION_setIcmCarSetting /* 707 */:
                            return onTransact$setIcmCarSetting$(data, reply);
                        case TRANSACTION_setIcmWeather /* 708 */:
                            return onTransact$setIcmWeather$(data, reply);
                        case TRANSACTION_setIcmWheelkey /* 709 */:
                            return onTransact$setIcmWheelkey$(data, reply);
                        case TRANSACTION_setIcmSyncTime /* 710 */:
                            return onTransact$setIcmSyncTime$(data, reply);
                        case TRANSACTION_setIcmNavigationBmp /* 711 */:
                            return onTransact$setIcmNavigationBmp$(data, reply);
                        case TRANSACTION_setIcmNavigationInfo /* 712 */:
                            return onTransact$setIcmNavigationInfo$(data, reply);
                        case TRANSACTION_setGpsReset /* 713 */:
                            return onTransact$setGpsReset$(data, reply);
                        case TRANSACTION_getGpsResetResp /* 714 */:
                            return onTransact$getGpsResetResp$(data, reply);
                        case TRANSACTION_setTboxPsuMsg /* 715 */:
                            return onTransact$setTboxPsuMsg$(data, reply);
                        case TRANSACTION_getTboxPsuMsg /* 716 */:
                            return onTransact$getTboxPsuMsg$(data, reply);
                        case TRANSACTION_getBcmPowerMode /* 717 */:
                            return onTransact$getBcmPowerMode$(data, reply);
                        case TRANSACTION_setBcmPsnSeatHeatLevel /* 720 */:
                            return onTransact$setBcmPsnSeatHeatLevel$(data, reply);
                        case TRANSACTION_getBcmPsnSeatHeatLevel /* 721 */:
                            return onTransact$getBcmPsnSeatHeatLevel$(data, reply);
                        case TRANSACTION_setIcmBrightness /* 722 */:
                            return onTransact$setIcmBrightness$(data, reply);
                        case TRANSACTION_getIcmBrightness /* 723 */:
                            return onTransact$getIcmBrightness$(data, reply);
                        case TRANSACTION_getIcmTimeFormat /* 724 */:
                            return onTransact$getIcmTimeFormat$(data, reply);
                        case TRANSACTION_getCwcChargeSt /* 725 */:
                            return onTransact$getCwcChargeSt$(data, reply);
                        case TRANSACTION_getCwcChargeErrorSt /* 726 */:
                            return onTransact$getCwcChargeErrorSt$(data, reply);
                        case TRANSACTION_setAutoWindowLockSw /* 727 */:
                            return onTransact$setAutoWindowLockSw$(data, reply);
                        case TRANSACTION_getAutoWindowLockSw /* 728 */:
                            return onTransact$getAutoWindowLockSw$(data, reply);
                        case TRANSACTION_setLeavePollingLockSw /* 729 */:
                            return onTransact$setLeavePollingLockSw$(data, reply);
                        case TRANSACTION_getLeavePollingLockSw /* 730 */:
                            return onTransact$getLeavePollingLockSw$(data, reply);
                        case TRANSACTION_setNearPollingUnLockSw /* 731 */:
                            return onTransact$setNearPollingUnLockSw$(data, reply);
                        case TRANSACTION_getNearePollingUnLockSw /* 732 */:
                            return onTransact$getNearePollingUnLockSw$(data, reply);
                        case TRANSACTION_setStealthMode /* 733 */:
                            return onTransact$setStealthMode$(data, reply);
                        case TRANSACTION_getStealthMode /* 734 */:
                            return onTransact$getStealthMode$(data, reply);
                        case TRANSACTION_setVcuSnowMode /* 735 */:
                            return onTransact$setVcuSnowMode$(data, reply);
                        case TRANSACTION_getVcuSnowMode /* 736 */:
                            return onTransact$getVcuSnowMode$(data, reply);
                        case TRANSACTION_hasEspFault /* 737 */:
                            return onTransact$hasEspFault$(data, reply);
                        case TRANSACTION_hasEspHdcFault /* 738 */:
                            return onTransact$hasEspHdcFault$(data, reply);
                        case TRANSACTION_hasEspAvhFault /* 739 */:
                            return onTransact$hasEspAvhFault$(data, reply);
                        case TRANSACTION_getCiuDmsStatus /* 740 */:
                            return onTransact$getCiuDmsStatus$(data, reply);
                        case TRANSACTION_setCiuDmsStatus /* 741 */:
                            return onTransact$setCiuDmsStatus$(data, reply);
                        case TRANSACTION_setCiuFaceIdMode /* 742 */:
                            return onTransact$setCiuFaceIdMode$(data, reply);
                        case TRANSACTION_getCiuUid /* 743 */:
                            return onTransact$getCiuUid$(data, reply);
                        case TRANSACTION_setCiuUid /* 744 */:
                            return onTransact$setCiuUid$(data, reply);
                        case TRANSACTION_getCiuFaceIdStatus /* 745 */:
                            return onTransact$getCiuFaceIdStatus$(data, reply);
                        case TRANSACTION_getCiuFaceIdPrimalStatus /* 746 */:
                            return onTransact$getCiuFaceIdPrimalStatus$(data, reply);
                        case TRANSACTION_getCiuFaceShieldStatus /* 747 */:
                            return onTransact$getCiuFaceShieldStatus$(data, reply);
                        case TRANSACTION_getCiuErrorType /* 748 */:
                            return onTransact$getCiuErrorType$(data, reply);
                        case TRANSACTION_getCiuLightIntensity /* 749 */:
                            return onTransact$getCiuLightIntensity$(data, reply);
                        case TRANSACTION_getCiuFaceIDSwitchStatus /* 750 */:
                            return onTransact$getCiuFaceIDSwitchStatus$(data, reply);
                        case TRANSACTION_setCiuFaceIdSwitch /* 751 */:
                            return onTransact$setCiuFaceIdSwitch$(data, reply);
                        case TRANSACTION_setCiuDeleteFaceId /* 752 */:
                            return onTransact$setCiuDeleteFaceId$(data, reply);
                        case TRANSACTION_getCiuDeleteFaceIdResult /* 753 */:
                            return onTransact$getCiuDeleteFaceIdResult$(data, reply);
                        case TRANSACTION_setCiuRegHint /* 754 */:
                            return onTransact$setCiuRegHint$(data, reply);
                        case TRANSACTION_setCiuStartRegFlow /* 755 */:
                            return onTransact$setCiuStartRegFlow$(data, reply);
                        case TRANSACTION_setCiuStartRegFlag /* 756 */:
                            return onTransact$setCiuStartRegFlag$(data, reply);
                        case TRANSACTION_getCiuFaceAction /* 757 */:
                            return onTransact$getCiuFaceAction$(data, reply);
                        case TRANSACTION_setCiuFaceActionRequest /* 758 */:
                            return onTransact$setCiuFaceActionRequest$(data, reply);
                        case TRANSACTION_setCiuFirmFaceCancel /* 759 */:
                            return onTransact$setCiuFirmFaceCancel$(data, reply);
                        case TRANSACTION_setCiuRegisterRequestMulti /* 760 */:
                            return onTransact$setCiuRegisterRequestMulti$(data, reply);
                        case TRANSACTION_setCiuDeleteMulti /* 761 */:
                            return onTransact$setCiuDeleteMulti$(data, reply);
                        case TRANSACTION_getCiuValid /* 762 */:
                            return onTransact$getCiuValid$(data, reply);
                        case TRANSACTION_getCiuAutoLockSt /* 763 */:
                            return onTransact$getCiuAutoLockSt$(data, reply);
                        case TRANSACTION_getCiuDvrMode /* 764 */:
                            return onTransact$getCiuDvrMode$(data, reply);
                        case TRANSACTION_setCiuDvrMode /* 765 */:
                            return onTransact$setCiuDvrMode$(data, reply);
                        case TRANSACTION_setCiuPhotoProcess /* 766 */:
                            return onTransact$setCiuPhotoProcess$(data, reply);
                        case TRANSACTION_setCiuDvrLockMode /* 767 */:
                            return onTransact$setCiuDvrLockMode$(data, reply);
                        case 768:
                            return onTransact$setCiuVideoOutputMode$(data, reply);
                        case 769:
                            return onTransact$getCiuSdStatus$(data, reply);
                        case 770:
                            return onTransact$getCiuDvrStatus$(data, reply);
                        case 771:
                            return onTransact$setCiuFormatMode$(data, reply);
                        case 772:
                            return onTransact$getCiuDvrFormatStatus$(data, reply);
                        case 773:
                            return onTransact$getCiuDvrLockFb$(data, reply);
                        case 774:
                            return onTransact$setScuPhoneSmMode$(data, reply);
                        case 775:
                            return onTransact$getScuPhoneSmMode$(data, reply);
                        case TRANSACTION_setScuKeyPark /* 776 */:
                            return onTransact$setScuKeyPark$(data, reply);
                        case TRANSACTION_getScuKeyPark /* 777 */:
                            return onTransact$getScuKeyPark$(data, reply);
                        case TRANSACTION_getScuAltimeter /* 778 */:
                            return onTransact$getScuAltimeter$(data, reply);
                        case TRANSACTION_getScuSlotTheta /* 779 */:
                            return onTransact$getScuSlotTheta$(data, reply);
                        case TRANSACTION_getScuTargetParkingPosition /* 781 */:
                            return onTransact$getScuTargetParkingPosition$(data, reply);
                        case TRANSACTION_getScuFrontMinDistance /* 782 */:
                            return onTransact$getScuFrontMinDistance$(data, reply);
                        case TRANSACTION_getScuRearMinDistance /* 783 */:
                            return onTransact$getScuRearMinDistance$(data, reply);
                        case TRANSACTION_getScuModeIndex /* 784 */:
                            return onTransact$getScuModeIndex$(data, reply);
                        case TRANSACTION_setScuLocalWeather /* 785 */:
                            return onTransact$setScuLocalWeather$(data, reply);
                        case TRANSACTION_getVcuRawCarSpeed /* 786 */:
                            return onTransact$getVcuRawCarSpeed$(data, reply);
                        case TRANSACTION_getVcuPureDriveModeFeedback /* 787 */:
                            return onTransact$getVcuPureDriveModeFeedback$(data, reply);
                        case TRANSACTION_getVcuEbsBatterySoc /* 788 */:
                            return onTransact$getVcuEbsBatterySoc$(data, reply);
                        case TRANSACTION_getVcuSupDebugInfo /* 789 */:
                            return onTransact$getVcuSupDebugInfo$(data, reply);
                        case TRANSACTION_getVcuErhDebugInfo /* 790 */:
                            return onTransact$getVcuErhDebugInfo$(data, reply);
                        case TRANSACTION_getVcuChargeError /* 791 */:
                            return onTransact$getVcuChargeError$(data, reply);
                        case TRANSACTION_getVcuAcInputStatus /* 792 */:
                            return onTransact$getVcuAcInputStatus$(data, reply);
                        case TRANSACTION_startVcuCharge /* 793 */:
                            return onTransact$startVcuCharge$(data, reply);
                        case TRANSACTION_stopVcuAcCharge /* 794 */:
                            return onTransact$stopVcuAcCharge$(data, reply);
                        case TRANSACTION_stopVcuDcCharge /* 795 */:
                            return onTransact$stopVcuDcCharge$(data, reply);
                        case TRANSACTION_setVcuBestCharge /* 796 */:
                            return onTransact$setVcuBestCharge$(data, reply);
                        case TRANSACTION_setVcuFullyCharge /* 797 */:
                            return onTransact$setVcuFullyCharge$(data, reply);
                        case TRANSACTION_setVcuChargeLimit /* 798 */:
                            return onTransact$setVcuChargeLimit$(data, reply);
                        case TRANSACTION_getMcuDtcReportEv /* 800 */:
                            return onTransact$getMcuDtcReportEv$(data, reply);
                        case TRANSACTION_getMcuFactoryDisplayTypeMsgToMcu /* 801 */:
                            return onTransact$getMcuFactoryDisplayTypeMsgToMcu$(data, reply);
                        case TRANSACTION_getMcuFaultInfo /* 802 */:
                            return onTransact$getMcuFaultInfo$(data, reply);
                        case TRANSACTION_setTboxCanControlMsg /* 803 */:
                            return onTransact$setTboxCanControlMsg$(data, reply);
                        case TRANSACTION_getTboxCanControlMsg /* 804 */:
                            return onTransact$getTboxCanControlMsg$(data, reply);
                        case TRANSACTION_setCiuRainSw /* 805 */:
                            return onTransact$setCiuRainSw$(data, reply);
                        case TRANSACTION_getCiuRainSw /* 806 */:
                            return onTransact$getCiuRainSw$(data, reply);
                        case TRANSACTION_getCiuCarWash /* 807 */:
                            return onTransact$getCiuCarWash$(data, reply);
                        case TRANSACTION_setCiuCarWash /* 808 */:
                            return onTransact$setCiuCarWash$(data, reply);
                        case TRANSACTION_getCiuDistractionStatus /* 809 */:
                            return onTransact$getCiuDistractionStatus$(data, reply);
                        case TRANSACTION_setCiuDistractionStatus /* 810 */:
                            return onTransact$setCiuDistractionStatus$(data, reply);
                        case TRANSACTION_getCiuFatigueStatus /* 811 */:
                            return onTransact$getCiuFatigueStatus$(data, reply);
                        case TRANSACTION_setCiuFatigueStatus /* 812 */:
                            return onTransact$setCiuFatigueStatus$(data, reply);
                        case TRANSACTION_setCiuDmsMode /* 813 */:
                            return onTransact$setCiuDmsMode$(data, reply);
                        case TRANSACTION_getCiuFatigueLevel /* 814 */:
                            return onTransact$getCiuFatigueLevel$(data, reply);
                        case TRANSACTION_getCiuDistractionLevel /* 815 */:
                            return onTransact$getCiuDistractionLevel$(data, reply);
                        case TRANSACTION_setScuRoadAttr /* 816 */:
                            return onTransact$setScuRoadAttr$(data, reply);
                        case TRANSACTION_setScuAssLineChanged /* 817 */:
                            return onTransact$setScuAssLineChanged$(data, reply);
                        case TRANSACTION_getScuAssLineChanged /* 818 */:
                            return onTransact$getScuAssLineChanged$(data, reply);
                        case TRANSACTION_setScuDmsMode /* 819 */:
                            return onTransact$setScuDmsMode$(data, reply);
                        case TRANSACTION_setScuSeatBeltReq /* 820 */:
                            return onTransact$setScuSeatBeltReq$(data, reply);
                        case TRANSACTION_setHvacTempPtcStatus /* 822 */:
                            return onTransact$setHvacTempPtcStatus$(data, reply);
                        case TRANSACTION_getBcmPollingOpenCfg /* 823 */:
                            return onTransact$getBcmPollingOpenCfg$(data, reply);
                        case TRANSACTION_setBcmPollingOpenCfg /* 824 */:
                            return onTransact$setBcmPollingOpenCfg$(data, reply);
                        case TRANSACTION_getBcmDriverBeltWarning /* 825 */:
                            return onTransact$getBcmDriverBeltWarning$(data, reply);
                        case TRANSACTION_getBcmRearViewAutoDownCfg /* 826 */:
                            return onTransact$getBcmRearViewAutoDownCfg$(data, reply);
                        case TRANSACTION_setBcmRearViewAutoDownCfg /* 827 */:
                            return onTransact$setBcmRearViewAutoDownCfg$(data, reply);
                        case TRANSACTION_getBcmChargeGunLockSt /* 828 */:
                            return onTransact$getBcmChargeGunLockSt$(data, reply);
                        case TRANSACTION_getScuRadarDisplayActive /* 829 */:
                            return onTransact$getScuRadarDisplayActive$(data, reply);
                        case TRANSACTION_getScuErrorTips /* 830 */:
                            return onTransact$getScuErrorTips$(data, reply);
                        case TRANSACTION_setIcmDmsMode /* 831 */:
                            return onTransact$setIcmDmsMode$(data, reply);
                        case TRANSACTION_setIcmFatigueLevel /* 832 */:
                            return onTransact$setIcmFatigueLevel$(data, reply);
                        case TRANSACTION_setIcmDistractionLevel /* 833 */:
                            return onTransact$setIcmDistractionLevel$(data, reply);
                        case TRANSACTION_getTboxAvpStartStatus /* 834 */:
                            return onTransact$getTboxAvpStartStatus$(data, reply);
                        case TRANSACTION_getBmsAcMaxCurrent /* 835 */:
                            return onTransact$getBmsAcMaxCurrent$(data, reply);
                        case TRANSACTION_getBmsDtcErrorStopCurrent /* 836 */:
                            return onTransact$getBmsDtcErrorStopCurrent$(data, reply);
                        case TRANSACTION_getBmsDtcChargeCurrentOver /* 837 */:
                            return onTransact$getBmsDtcChargeCurrentOver$(data, reply);
                        case TRANSACTION_getBmsDcChargeStopReason /* 838 */:
                            return onTransact$getBmsDcChargeStopReason$(data, reply);
                        case TRANSACTION_getBmsBatteryTotalVolt /* 839 */:
                            return onTransact$getBmsBatteryTotalVolt$(data, reply);
                        case TRANSACTION_getBmsDcCurrent /* 840 */:
                            return onTransact$getBmsDcCurrent$(data, reply);
                        case TRANSACTION_getBmsDcVolt /* 841 */:
                            return onTransact$getBmsDcVolt$(data, reply);
                        case TRANSACTION_startTboxCertInstall /* 842 */:
                            return onTransact$startTboxCertInstall$(data, reply);
                        case TRANSACTION_startTboxCertVerify /* 843 */:
                            return onTransact$startTboxCertVerify$(data, reply);
                        case TRANSACTION_getTboxDvBattMsg /* 844 */:
                            return onTransact$getTboxDvBattMsg$(data, reply);
                        case TRANSACTION_setMcuRepairMode /* 845 */:
                            return onTransact$setMcuRepairMode$(data, reply);
                        case TRANSACTION_setLluSelfActive /* 846 */:
                            return onTransact$setLluSelfActive$(data, reply);
                        case TRANSACTION_setTboxChargeGunLock /* 847 */:
                            return onTransact$setTboxChargeGunLock$(data, reply);
                        case TRANSACTION_setMultipleDmsStatus /* 848 */:
                            return onTransact$setMultipleDmsStatus$(data, reply);
                        case TRANSACTION_getEspEpbWarningLampStatus /* 849 */:
                            return onTransact$getEspEpbWarningLampStatus$(data, reply);
                        case TRANSACTION_getEspEpsWarninglampStatus /* 850 */:
                            return onTransact$getEspEpsWarninglampStatus$(data, reply);
                        case TRANSACTION_getVcuEvErrLampDsp /* 851 */:
                            return onTransact$getVcuEvErrLampDsp$(data, reply);
                        case TRANSACTION_getVcuEvErrMsgDsp /* 852 */:
                            return onTransact$getVcuEvErrMsgDsp$(data, reply);
                        case TRANSACTION_getScuSuperParkMode /* 853 */:
                            return onTransact$getScuSuperParkMode$(data, reply);
                        case TRANSACTION_getScuLocatData /* 854 */:
                            return onTransact$getScuLocatData$(data, reply);
                        case TRANSACTION_getScuParkingProgress /* 857 */:
                            return onTransact$getScuParkingProgress$(data, reply);
                        case TRANSACTION_getScuSensorData /* 858 */:
                            return onTransact$getScuSensorData$(data, reply);
                        case TRANSACTION_getScuLAvmData /* 859 */:
                            return onTransact$getScuLAvmData$(data, reply);
                        case TRANSACTION_getScuRAvmData /* 860 */:
                            return onTransact$getScuRAvmData$(data, reply);
                        case TRANSACTION_getScuSlotForPark /* 861 */:
                            return onTransact$getScuSlotForPark$(data, reply);
                        case TRANSACTION_getScuRadarVoiceActive /* 862 */:
                            return onTransact$getScuRadarVoiceActive$(data, reply);
                        case TRANSACTION_getScuRadarVoiceTone /* 863 */:
                            return onTransact$getScuRadarVoiceTone$(data, reply);
                        case TRANSACTION_setBcmLeftMirrorMove /* 864 */:
                            return onTransact$setBcmLeftMirrorMove$(data, reply);
                        case TRANSACTION_setBcmRightMirrorMove /* 865 */:
                            return onTransact$setBcmRightMirrorMove$(data, reply);
                        case TRANSACTION_setMsmDriverAllPositions /* 866 */:
                            return onTransact$setMsmDriverAllPositions$(data, reply);
                        case TRANSACTION_setBcmAllExteriorMirrorsPositions /* 867 */:
                            return onTransact$setBcmAllExteriorMirrorsPositions$(data, reply);
                        case TRANSACTION_getScuSlotData /* 868 */:
                            return onTransact$getScuSlotData$(data, reply);
                        case TRANSACTION_setLluCurrentFunction /* 869 */:
                            return onTransact$setLluCurrentFunction$(data, reply);
                        case TRANSACTION_setTboxDvTestReq /* 870 */:
                            return onTransact$setTboxDvTestReq$(data, reply);
                        case TRANSACTION_setTboxDvTempSamplingPeriod /* 871 */:
                            return onTransact$setTboxDvTempSamplingPeriod$(data, reply);
                        case TRANSACTION_getTboxDvTempMsg /* 872 */:
                            return onTransact$getTboxDvTempMsg$(data, reply);
                        case TRANSACTION_setMcuPsuTestReq /* 873 */:
                            return onTransact$setMcuPsuTestReq$(data, reply);
                        case TRANSACTION_getMcuPsuTestResult /* 874 */:
                            return onTransact$getMcuPsuTestResult$(data, reply);
                        case TRANSACTION_getDvTestMcuTemp /* 875 */:
                            return onTransact$getDvTestMcuTemp$(data, reply);
                        case TRANSACTION_getMcuDvBattMsg /* 876 */:
                            return onTransact$getMcuDvBattMsg$(data, reply);
                        case TRANSACTION_getDvTestBatTemp /* 877 */:
                            return onTransact$getDvTestBatTemp$(data, reply);
                        case TRANSACTION_getDvTestPcbTemp /* 878 */:
                            return onTransact$getDvTestPcbTemp$(data, reply);
                        case TRANSACTION_setMcuDvTestReq /* 879 */:
                            return onTransact$setMcuDvTestReq$(data, reply);
                        case TRANSACTION_setMcuDvTempSamplingPeriod /* 880 */:
                            return onTransact$setMcuDvTempSamplingPeriod$(data, reply);
                        case TRANSACTION_setHvacSelfDrySwStatus /* 881 */:
                            return onTransact$setHvacSelfDrySwStatus$(data, reply);
                        case TRANSACTION_getHvacSelfDrySwStatus /* 882 */:
                            return onTransact$getHvacSelfDrySwStatus$(data, reply);
                        case TRANSACTION_setLluLockSocDspSwitch /* 883 */:
                            return onTransact$setLluLockSocDspSwitch$(data, reply);
                        case TRANSACTION_getLluLockSocDspSwitch /* 884 */:
                            return onTransact$getLluLockSocDspSwitch$(data, reply);
                        case TRANSACTION_setLluUnLockSocDspSwitch /* 885 */:
                            return onTransact$setLluUnLockSocDspSwitch$(data, reply);
                        case TRANSACTION_getLluUnLockSocDspSwitch /* 886 */:
                            return onTransact$getLluUnLockSocDspSwitch$(data, reply);
                        case TRANSACTION_setAvasPhotoSoundSwitch /* 887 */:
                            return onTransact$setAvasPhotoSoundSwitch$(data, reply);
                        case TRANSACTION_getAvasPhotoSoundSwitch /* 888 */:
                            return onTransact$getAvasPhotoSoundSwitch$(data, reply);
                        case TRANSACTION_saveMsmDriverAllPositionsToMcu /* 889 */:
                            return onTransact$saveMsmDriverAllPositionsToMcu$(data, reply);
                        case TRANSACTION_getMcuChairWelcomeMode /* 890 */:
                            return onTransact$getMcuChairWelcomeMode$(data, reply);
                        case TRANSACTION_setMcuChairWelcomeMode /* 891 */:
                            return onTransact$setMcuChairWelcomeMode$(data, reply);
                        case TRANSACTION_setBtPhoneCall /* 892 */:
                            return onTransact$setBtPhoneCall$(data, reply);
                        case TRANSACTION_startTboxUpgradingTmcu /* 893 */:
                            return onTransact$startTboxUpgradingTmcu$(data, reply);
                        case TRANSACTION_getTboxTmcuUpgradingProgress /* 894 */:
                            return onTransact$getTboxTmcuUpgradingProgress$(data, reply);
                        case TRANSACTION_startTboxUpgrading4G /* 895 */:
                            return onTransact$startTboxUpgrading4G$(data, reply);
                        case TRANSACTION_getTbox4GUpgradingProgress /* 896 */:
                            return onTransact$getTbox4GUpgradingProgress$(data, reply);
                        case TRANSACTION_getTpmsSystemFaultWarnLampStatus /* 897 */:
                            return onTransact$getTpmsSystemFaultWarnLampStatus$(data, reply);
                        case TRANSACTION_getTpmsAbnormalTirePressureWarnLampStatus /* 898 */:
                            return onTransact$getTpmsAbnormalTirePressureWarnLampStatus$(data, reply);
                        case TRANSACTION_getTpmsTirePressureWarningInfo /* 899 */:
                            return onTransact$getTpmsTirePressureWarningInfo$(data, reply);
                        case TRANSACTION_setMcuRemoteControlFeedback /* 900 */:
                            return onTransact$setMcuRemoteControlFeedback$(data, reply);
                        case TRANSACTION_setTboxCameraRemoteControlFeedback /* 901 */:
                            return onTransact$setTboxCameraRemoteControlFeedback$(data, reply);
                        case TRANSACTION_registerScuListener /* 902 */:
                            return onTransact$registerScuListener$(data, reply);
                        case TRANSACTION_unregisterScuListener /* 903 */:
                            return onTransact$unregisterScuListener$(data, reply);
                        case TRANSACTION_setIcmMusicInfo /* 904 */:
                            return onTransact$setIcmMusicInfo$(data, reply);
                        case TRANSACTION_setIcmMusicPlaybackTimeInfo /* 905 */:
                            return onTransact$setIcmMusicPlaybackTimeInfo$(data, reply);
                        case TRANSACTION_sendUpgradingTboxByUdiskReq /* 906 */:
                            return onTransact$sendUpgradingTboxByUdiskReq$(data, reply);
                        case TRANSACTION_getUpgradingTboxByUdiskResponse /* 907 */:
                            return onTransact$getUpgradingTboxByUdiskResponse$(data, reply);
                        case TRANSACTION_getPmStatusWithParameter /* 908 */:
                            return onTransact$getPmStatusWithParameter$(data, reply);
                        case TRANSACTION_getMcuOcuState /* 909 */:
                            return onTransact$getMcuOcuState$(data, reply);
                        case TRANSACTION_getMcuCiuState /* 910 */:
                            return onTransact$getMcuCiuState$(data, reply);
                        case TRANSACTION_getNaviBmpInfoRequiredByIcm /* 911 */:
                            return onTransact$getNaviBmpInfoRequiredByIcm$(data, reply);
                        case TRANSACTION_getImuSystemState /* 912 */:
                            return onTransact$getImuSystemState$(data, reply);
                        case TRANSACTION_getImuQuatData /* 913 */:
                            return onTransact$getImuQuatData$(data, reply);
                        case TRANSACTION_getImuUbxPvtData1 /* 914 */:
                            return onTransact$getImuUbxPvtData1$(data, reply);
                        case TRANSACTION_getImuUbxPvtData2 /* 915 */:
                            return onTransact$getImuUbxPvtData2$(data, reply);
                        case TRANSACTION_getImuUbxRawXData /* 916 */:
                            return onTransact$getImuUbxRawXData$(data, reply);
                        case TRANSACTION_getImuTboxPackGgaData /* 917 */:
                            return onTransact$getImuTboxPackGgaData$(data, reply);
                        case TRANSACTION_getImuAddData /* 918 */:
                            return onTransact$getImuAddData$(data, reply);
                        case TRANSACTION_getImuDiagMessage /* 919 */:
                            return onTransact$getImuDiagMessage$(data, reply);
                        case TRANSACTION_getImuNavigationData /* 920 */:
                            return onTransact$getImuNavigationData$(data, reply);
                        case TRANSACTION_getImuUbxSfrbxData /* 921 */:
                            return onTransact$getImuUbxSfrbxData$(data, reply);
                        case TRANSACTION_getMcuAtlsState /* 922 */:
                            return onTransact$getMcuAtlsState$(data, reply);
                        case TRANSACTION_startTboxSlowCharge /* 923 */:
                            return onTransact$startTboxSlowCharge$(data, reply);
                        case TRANSACTION_stopTboxSlowCharge /* 924 */:
                            return onTransact$stopTboxSlowCharge$(data, reply);
                        case TRANSACTION_setTboxAutoPowerOffConfig /* 925 */:
                            return onTransact$setTboxAutoPowerOffConfig$(data, reply);
                        case TRANSACTION_getTboxAutoPowerOffSt /* 926 */:
                            return onTransact$getTboxAutoPowerOffSt$(data, reply);
                        case TRANSACTION_setTboxCancelPowerOffConfig /* 927 */:
                            return onTransact$setTboxCancelPowerOffConfig$(data, reply);
                        case TRANSACTION_getTboxCancelPowerOffSt /* 928 */:
                            return onTransact$getTboxCancelPowerOffSt$(data, reply);
                        case TRANSACTION_getTboxPowerOffCountdown /* 929 */:
                            return onTransact$getTboxPowerOffCountdown$(data, reply);
                        case TRANSACTION_getScuSlotsNumber /* 930 */:
                            return onTransact$getScuSlotsNumber$(data, reply);
                        case TRANSACTION_getHvacMinWindSpeedLevel /* 931 */:
                            return onTransact$getHvacMinWindSpeedLevel$(data, reply);
                        case TRANSACTION_getHvacMaxWindSpeedLevel /* 932 */:
                            return onTransact$getHvacMaxWindSpeedLevel$(data, reply);
                        case TRANSACTION_getMinHavcTemperature /* 933 */:
                            return onTransact$getMinHavcTemperature$(data, reply);
                        case TRANSACTION_getMaxHavcTemperature /* 934 */:
                            return onTransact$getMaxHavcTemperature$(data, reply);
                        case TRANSACTION_setTboxSoldierSw /* 935 */:
                            return onTransact$setTboxSoldierSw$(data, reply);
                        case TRANSACTION_getTboxSoldierSwState /* 936 */:
                            return onTransact$getTboxSoldierSwState$(data, reply);
                        case TRANSACTION_getTboxSoldierWorkState /* 937 */:
                            return onTransact$getTboxSoldierWorkState$(data, reply);
                        case TRANSACTION_getTboxSoldierGsensorData /* 938 */:
                            return onTransact$getTboxSoldierGsensorData$(data, reply);
                        case TRANSACTION_sendTboxSoldierTick /* 939 */:
                            return onTransact$sendTboxSoldierTick$(data, reply);
                        case TRANSACTION_getTpmsAllTirePressureWarnings /* 940 */:
                            return onTransact$getTpmsAllTirePressureWarnings$(data, reply);
                        case TRANSACTION_getTpmsAllTireTemperatureWarnings /* 941 */:
                            return onTransact$getTpmsAllTireTemperatureWarnings$(data, reply);
                        case TRANSACTION_getTpmsllTirePerssureSensorStatus /* 942 */:
                            return onTransact$getTpmsllTirePerssureSensorStatus$(data, reply);
                        case TRANSACTION_setVcuExtremeFastChargingMode /* 943 */:
                            return onTransact$setVcuExtremeFastChargingMode$(data, reply);
                        case TRANSACTION_getVcuExtremeFastChargingSt /* 944 */:
                            return onTransact$getVcuExtremeFastChargingSt$(data, reply);
                        case TRANSACTION_setScuRoadAttributes /* 945 */:
                            return onTransact$setScuRoadAttributes$(data, reply);
                        case TRANSACTION_setScuDetailRoadClass /* 946 */:
                            return onTransact$setScuDetailRoadClass$(data, reply);
                        case TRANSACTION_getTpmsAllTireTemperature /* 947 */:
                            return onTransact$getTpmsAllTireTemperature$(data, reply);
                        case TRANSACTION_getMcuPsuOtaFeedbackMsg /* 948 */:
                            return onTransact$getMcuPsuOtaFeedbackMsg$(data, reply);
                        case TRANSACTION_setMcuFaceIdSw /* 949 */:
                            return onTransact$setMcuFaceIdSw$(data, reply);
                        case TRANSACTION_getMcuFaceIdSwState /* 950 */:
                            return onTransact$getMcuFaceIdSwState$(data, reply);
                        case TRANSACTION_setFaceIdModeState /* 951 */:
                            return onTransact$setFaceIdModeState$(data, reply);
                        case TRANSACTION_getMcuFaceIdMode /* 952 */:
                            return onTransact$getMcuFaceIdMode$(data, reply);
                        case TRANSACTION_setLluScriptStRequest /* 953 */:
                            return onTransact$setLluScriptStRequest$(data, reply);
                        case TRANSACTION_getLluScriptStResponse /* 954 */:
                            return onTransact$getLluScriptStResponse$(data, reply);
                        case TRANSACTION_setLluScriptParameter /* 955 */:
                            return onTransact$setLluScriptParameter$(data, reply);
                        case TRANSACTION_setLluScriptData /* 956 */:
                            return onTransact$setLluScriptData$(data, reply);
                        case TRANSACTION_setDvrEnable /* 957 */:
                            return onTransact$setDvrEnable$(data, reply);
                        case TRANSACTION_getDvrEnableState /* 958 */:
                            return onTransact$getDvrEnableState$(data, reply);
                        case TRANSACTION_setNotifyCiuAutoLightStatus /* 959 */:
                            return onTransact$setNotifyCiuAutoLightStatus$(data, reply);
                        case TRANSACTION_setCiuConfigurationActive /* 960 */:
                            return onTransact$setCiuConfigurationActive$(data, reply);
                        case TRANSACTION_getCiuConfigurationActive /* 961 */:
                            return onTransact$getCiuConfigurationActive$(data, reply);
                        case TRANSACTION_setCiuDelayOff /* 962 */:
                            return onTransact$setCiuDelayOff$(data, reply);
                        case TRANSACTION_getCiuDelayOff /* 963 */:
                            return onTransact$getCiuDelayOff$(data, reply);
                        case TRANSACTION_setCiuDeliveryUploadMode /* 964 */:
                            return onTransact$setCiuDeliveryUploadMode$(data, reply);
                        case TRANSACTION_getCiuDeliveryUploadMode /* 965 */:
                            return onTransact$getCiuDeliveryUploadMode$(data, reply);
                        case TRANSACTION_setBcmWindowsMovePositions /* 966 */:
                            return onTransact$setBcmWindowsMovePositions$(data, reply);
                        case TRANSACTION_setBcmSdcMode /* 967 */:
                            return onTransact$setBcmSdcMode$(data, reply);
                        case TRANSACTION_setBcmTwcMode /* 968 */:
                            return onTransact$setBcmTwcMode$(data, reply);
                        case TRANSACTION_setBcmTwcUpdownSwitch /* 969 */:
                            return onTransact$setBcmTwcUpdownSwitch$(data, reply);
                        case TRANSACTION_setBcmLeftSdcSwitch /* 970 */:
                            return onTransact$setBcmLeftSdcSwitch$(data, reply);
                        case TRANSACTION_setBcmRightSdcSwitch /* 971 */:
                            return onTransact$setBcmRightSdcSwitch$(data, reply);
                        case TRANSACTION_sendTboxGpsAntPowerControlReq /* 972 */:
                            return onTransact$sendTboxGpsAntPowerControlReq$(data, reply);
                        case TRANSACTION_getGpsAntPowerControlResponse /* 973 */:
                            return onTransact$getGpsAntPowerControlResponse$(data, reply);
                        case TRANSACTION_setMcuAndroidOtaStatus /* 974 */:
                            return onTransact$setMcuAndroidOtaStatus$(data, reply);
                        case TRANSACTION_setLluFindCarSwitch /* 975 */:
                            return onTransact$setLluFindCarSwitch$(data, reply);
                        case TRANSACTION_getLluFindCarSwitchState /* 976 */:
                            return onTransact$getLluFindCarSwitchState$(data, reply);
                        case TRANSACTION_setLluLockUnlockSocDspSwitch /* 977 */:
                            return onTransact$setLluLockUnlockSocDspSwitch$(data, reply);
                        case TRANSACTION_getLluLockUnlockSocDspSwitchState /* 978 */:
                            return onTransact$getLluLockUnlockSocDspSwitchState$(data, reply);
                        case TRANSACTION_getLluAcChargingCfg /* 979 */:
                            return onTransact$getLluAcChargingCfg$(data, reply);
                        case TRANSACTION_getLluDcChargingCfg /* 980 */:
                            return onTransact$getLluDcChargingCfg$(data, reply);
                        case TRANSACTION_setLluSpeedLimitCfg /* 981 */:
                            return onTransact$setLluSpeedLimitCfg$(data, reply);
                        case TRANSACTION_getLluSpeedLimitCfg /* 982 */:
                            return onTransact$getLluSpeedLimitCfg$(data, reply);
                        case TRANSACTION_setLluPersonAngle /* 983 */:
                            return onTransact$setLluPersonAngle$(data, reply);
                        case TRANSACTION_setLluPersonWalkDirection /* 984 */:
                            return onTransact$setLluPersonWalkDirection$(data, reply);
                        case TRANSACTION_setMcuLluEnableStatus /* 985 */:
                            return onTransact$setMcuLluEnableStatus$(data, reply);
                        case TRANSACTION_getMcuLluEnableStatus /* 986 */:
                            return onTransact$getMcuLluEnableStatus$(data, reply);
                        case TRANSACTION_setMcuLluWakeWaitSwitch /* 987 */:
                            return onTransact$setMcuLluWakeWaitSwitch$(data, reply);
                        case TRANSACTION_getMcuLluWakeWaitSwitch /* 988 */:
                            return onTransact$getMcuLluWakeWaitSwitch$(data, reply);
                        case TRANSACTION_setMcuLluShowOffSwitch /* 989 */:
                            return onTransact$setMcuLluShowOffSwitch$(data, reply);
                        case TRANSACTION_getMcuLluShowOffSwitch /* 990 */:
                            return onTransact$getMcuLluShowOffSwitch$(data, reply);
                        case TRANSACTION_setMcuLluSleepSwitch /* 991 */:
                            return onTransact$setMcuLluSleepSwitch$(data, reply);
                        case TRANSACTION_getMcuLluSleepSwitch /* 992 */:
                            return onTransact$getMcuLluSleepSwitch$(data, reply);
                        case TRANSACTION_setMcuLluChargingSwitch /* 993 */:
                            return onTransact$setMcuLluChargingSwitch$(data, reply);
                        case TRANSACTION_getMcuLluChargingSwitch /* 994 */:
                            return onTransact$getMcuLluChargingSwitch$(data, reply);
                        case TRANSACTION_setMcuLluPhotoSwitch /* 995 */:
                            return onTransact$setMcuLluPhotoSwitch$(data, reply);
                        case TRANSACTION_getMcuLluPhotoSwitch /* 996 */:
                            return onTransact$getMcuLluPhotoSwitch$(data, reply);
                        case TRANSACTION_getVcuRealGearLevel /* 997 */:
                            return onTransact$getVcuRealGearLevel$(data, reply);
                        case TRANSACTION_setVcuNGearWarningSwitch /* 998 */:
                            return onTransact$setVcuNGearWarningSwitch$(data, reply);
                        case TRANSACTION_getVcuNGearWarningSwitchStatus /* 999 */:
                            return onTransact$getVcuNGearWarningSwitchStatus$(data, reply);
                        case 1000:
                            return onTransact$setMcuAutoPowerOffSw$(data, reply);
                        case 1001:
                            return onTransact$getMcuAutoPowerOffSwitchState$(data, reply);
                        case TRANSACTION_setMcuPowerOffCountdownAction /* 1002 */:
                            return onTransact$setMcuPowerOffCountdownAction$(data, reply);
                        case TRANSACTION_getMcuPowerOffCountdownNotice /* 1003 */:
                            return onTransact$getMcuPowerOffCountdownNotice$(data, reply);
                        case TRANSACTION_getSwsButtonsRawData /* 1004 */:
                            return onTransact$getSwsButtonsRawData$(data, reply);
                        case TRANSACTION_sendTboxGpsHwResetRequest /* 1005 */:
                            return onTransact$sendTboxGpsHwResetRequest$(data, reply);
                        case TRANSACTION_setGpsPollingType /* 1006 */:
                            return onTransact$setGpsPollingType$(data, reply);
                        case TRANSACTION_setTboxGpsDebugSwitch /* 1007 */:
                            return onTransact$setTboxGpsDebugSwitch$(data, reply);
                        case TRANSACTION_sendTboxGpsMgaRequest /* 1008 */:
                            return onTransact$sendTboxGpsMgaRequest$(data, reply);
                        case TRANSACTION_getTboxGpsMgaResponse /* 1009 */:
                            return onTransact$getTboxGpsMgaResponse$(data, reply);
                        case TRANSACTION_setIcmRadioType /* 1010 */:
                            return onTransact$setIcmRadioType$(data, reply);
                        case TRANSACTION_setIcmFaceInfo /* 1011 */:
                            return onTransact$setIcmFaceInfo$(data, reply);
                        case TRANSACTION_getBcmLeftChargePortLockState /* 1012 */:
                            return onTransact$getBcmLeftChargePortLockState$(data, reply);
                        case TRANSACTION_getBcmRightChargePortLockState /* 1013 */:
                            return onTransact$getBcmRightChargePortLockState$(data, reply);
                        case TRANSACTION_getAlsInitializationStudyState /* 1014 */:
                            return onTransact$getAlsInitializationStudyState$(data, reply);
                        case TRANSACTION_getMcuVersion /* 1015 */:
                            return onTransact$getMcuVersion$(data, reply);
                        case TRANSACTION_getAlsInitializationStudyAndErrorState /* 1016 */:
                            return onTransact$getAlsInitializationStudyAndErrorState$(data, reply);
                        case TRANSACTION_setMcuHornsStates /* 1017 */:
                            return onTransact$setMcuHornsStates$(data, reply);
                        case TRANSACTION_sendChargeCompleteTimeToMcu /* 1018 */:
                            return onTransact$sendChargeCompleteTimeToMcu$(data, reply);
                        case TRANSACTION_getMcuRequestedMessage /* 1019 */:
                            return onTransact$getMcuRequestedMessage$(data, reply);
                        case TRANSACTION_setAvmMultipleDisplayProperties /* 1020 */:
                            return onTransact$setAvmMultipleDisplayProperties$(data, reply);
                        case TRANSACTION_resetTbox /* 1021 */:
                            return onTransact$resetTbox$(data, reply);
                        case TRANSACTION_getScuMrrAssistSystemStates /* 1022 */:
                            return onTransact$getScuMrrAssistSystemStates$(data, reply);
                        case TRANSACTION_setBcmWiperRainDetectSensitivity /* 1023 */:
                            return onTransact$setBcmWiperRainDetectSensitivity$(data, reply);
                        case 1024:
                            return onTransact$getBcmWiperRainDetectSensitivity$(data, reply);
                        case 1025:
                            return onTransact$getBcmWindowLockState$(data, reply);
                        case 1026:
                            return onTransact$getAvmWorkState$(data, reply);
                        case 1027:
                            return onTransact$getBcmLeftAndRightTurnLampStatus$(data, reply);
                        case 1028:
                            return onTransact$sendXpuUpdateRequest$(data, reply);
                        case 1029:
                            return onTransact$getXpuUpdateResponse$(data, reply);
                        case TRANSACTION_setXpuUpdateFileTransferStatus /* 1030 */:
                            return onTransact$setXpuUpdateFileTransferStatus$(data, reply);
                        case TRANSACTION_getXpuUpdateResult /* 1031 */:
                            return onTransact$getXpuUpdateResult$(data, reply);
                        case TRANSACTION_getXpuUpdateProgress /* 1032 */:
                            return onTransact$getXpuUpdateProgress$(data, reply);
                        case TRANSACTION_getXpuConnectionStatus /* 1033 */:
                            return onTransact$getXpuConnectionStatus$(data, reply);
                        case TRANSACTION_setBcmParkLightRelatedFMBLightConfig /* 1034 */:
                            return onTransact$setBcmParkLightRelatedFMBLightConfig$(data, reply);
                        case TRANSACTION_getBcmParkLightRelatedFMBLightConfigState /* 1035 */:
                            return onTransact$getBcmParkLightRelatedFMBLightConfigState$(data, reply);
                        case TRANSACTION_getScuRearCollisionWarning /* 1036 */:
                            return onTransact$getScuRearCollisionWarning$(data, reply);
                        case TRANSACTION_getAvmCamerasFaultStates /* 1037 */:
                            return onTransact$getAvmCamerasFaultStates$(data, reply);
                        case TRANSACTION_setMcuMonitorSwitch /* 1039 */:
                            return onTransact$setMcuMonitorSwitch$(data, reply);
                        case TRANSACTION_getMcuMonitorState /* 1040 */:
                            return onTransact$getMcuMonitorState$(data, reply);
                        case TRANSACTION_getBcmParkingLampsStates /* 1041 */:
                            return onTransact$getBcmParkingLampsStates$(data, reply);
                        case TRANSACTION_getBcmDoorUnlockRequestSource /* 1042 */:
                            return onTransact$getBcmDoorUnlockRequestSource$(data, reply);
                        case TRANSACTION_setScuCommonHomeSlotID /* 1043 */:
                            return onTransact$setScuCommonHomeSlotID$(data, reply);
                        case TRANSACTION_setScuFreeParking1Data /* 1044 */:
                            return onTransact$setScuFreeParking1Data$(data, reply);
                        case TRANSACTION_setScuFreeParking2Data /* 1045 */:
                            return onTransact$setScuFreeParking2Data$(data, reply);
                        case TRANSACTION_getScuLeftDoorOpenWarning /* 1046 */:
                            return onTransact$getScuLeftDoorOpenWarning$(data, reply);
                        case TRANSACTION_getScuRightDoorOpenWarning /* 1047 */:
                            return onTransact$getScuRightDoorOpenWarning$(data, reply);
                        case TRANSACTION_setTboxRepairMode /* 1048 */:
                            return onTransact$setTboxRepairMode$(data, reply);
                        case TRANSACTION_getTboxRepairModeState /* 1049 */:
                            return onTransact$getTboxRepairModeState$(data, reply);
                        case TRANSACTION_getBcmLeftSdcPsdMotorState /* 1050 */:
                            return onTransact$getBcmLeftSdcPsdMotorState$(data, reply);
                        case TRANSACTION_getBcmRightSdcPsdMotorState /* 1051 */:
                            return onTransact$getBcmRightSdcPsdMotorState$(data, reply);
                        case TRANSACTION_setXpuNedcSwitch /* 1052 */:
                            return onTransact$setXpuNedcSwitch$(data, reply);
                        case TRANSACTION_setXpuLightChange /* 1053 */:
                            return onTransact$setXpuLightChange$(data, reply);
                        case TRANSACTION_registerVcuListener /* 1054 */:
                            return onTransact$registerVcuListener$(data, reply);
                        case TRANSACTION_unregisterVcuListener /* 1055 */:
                            return onTransact$unregisterVcuListener$(data, reply);
                        case TRANSACTION_registerEpsListener /* 1056 */:
                            return onTransact$registerEpsListener$(data, reply);
                        case TRANSACTION_unregisterEpsListener /* 1057 */:
                            return onTransact$unregisterEpsListener$(data, reply);
                        case TRANSACTION_getBcmKeyAuthState /* 1058 */:
                            return onTransact$getBcmKeyAuthState$(data, reply);
                        case TRANSACTION_setTboxSoliderCameraSwitch /* 1059 */:
                            return onTransact$setTboxSoliderCameraSwitch$(data, reply);
                        case TRANSACTION_getTboxSoliderCameraState /* 1060 */:
                            return onTransact$getTboxSoliderCameraState$(data, reply);
                        case TRANSACTION_setTboxThresholdSwitch /* 1061 */:
                            return onTransact$setTboxThresholdSwitch$(data, reply);
                        case TRANSACTION_getScuRearMirrorControlState /* 1062 */:
                            return onTransact$getScuRearMirrorControlState$(data, reply);
                        case TRANSACTION_activateAndroidLluControl /* 1063 */:
                            return onTransact$activateAndroidLluControl$(data, reply);
                        case TRANSACTION_getMcuLluWorkStatus /* 1064 */:
                            return onTransact$getMcuLluWorkStatus$(data, reply);
                        case TRANSACTION_getTboxSoliderEnableState /* 1065 */:
                            return onTransact$getTboxSoliderEnableState$(data, reply);
                        case TRANSACTION_getEspApbSystemDisplayMessage /* 1066 */:
                            return onTransact$getEspApbSystemDisplayMessage$(data, reply);
                        case TRANSACTION_getEspApbSystemStatus /* 1067 */:
                            return onTransact$getEspApbSystemStatus$(data, reply);
                        case TRANSACTION_getEspHbcRequestStatus /* 1068 */:
                            return onTransact$getEspHbcRequestStatus$(data, reply);
                        case TRANSACTION_getIcmBrakeFluidLevelWarningMessage /* 1069 */:
                            return onTransact$getIcmBrakeFluidLevelWarningMessage$(data, reply);
                        case TRANSACTION_getVcuAcChargeCurAfterVoltBoosted /* 1070 */:
                            return onTransact$getVcuAcChargeCurAfterVoltBoosted$(data, reply);
                        case TRANSACTION_getVcuAcChargeVoltAfterVoltBoosted /* 1071 */:
                            return onTransact$getVcuAcChargeVoltAfterVoltBoosted$(data, reply);
                        case TRANSACTION_getVcuCruiseControlStatus /* 1072 */:
                            return onTransact$getVcuCruiseControlStatus$(data, reply);
                        case TRANSACTION_sendIcmUpdateRequest /* 1073 */:
                            return onTransact$sendIcmUpdateRequest$(data, reply);
                        case TRANSACTION_getIcmUpdateResponse /* 1074 */:
                            return onTransact$getIcmUpdateResponse$(data, reply);
                        case TRANSACTION_setIcmUpdateFileTransferStatus /* 1075 */:
                            return onTransact$setIcmUpdateFileTransferStatus$(data, reply);
                        case TRANSACTION_getIcmUpdateResult /* 1076 */:
                            return onTransact$getIcmUpdateResult$(data, reply);
                        case TRANSACTION_getIcmUpdateProgress /* 1077 */:
                            return onTransact$getIcmUpdateProgress$(data, reply);
                        case TRANSACTION_getBcmWiperSpeedSwitchState /* 1078 */:
                            return onTransact$getBcmWiperSpeedSwitchState$(data, reply);
                        case TRANSACTION_sendTboxRenewalPartsRequest /* 1079 */:
                            return onTransact$sendTboxRenewalPartsRequest$(data, reply);
                        case TRANSACTION_getTboxRenewalPartsResponse /* 1080 */:
                            return onTransact$getTboxRenewalPartsResponse$(data, reply);
                        case TRANSACTION_getTboxRemoteLluMode /* 1081 */:
                            return onTransact$getTboxRemoteLluMode$(data, reply);
                        case TRANSACTION_sendBcmSeatBeltRequest /* 1082 */:
                            return onTransact$sendBcmSeatBeltRequest$(data, reply);
                        case TRANSACTION_sendCduVolumeToAmp /* 1083 */:
                            return onTransact$sendCduVolumeToAmp$(data, reply);
                        case TRANSACTION_getBcmNfcCardIdInfo /* 1084 */:
                            return onTransact$getBcmNfcCardIdInfo$(data, reply);
                        case TRANSACTION_getBcmAutoLightState /* 1085 */:
                            return onTransact$getBcmAutoLightState$(data, reply);
                        case TRANSACTION_setXpuCduBrightness /* 1086 */:
                            return onTransact$setXpuCduBrightness$(data, reply);
                        case TRANSACTION_getXpuBrightness /* 1087 */:
                            return onTransact$getXpuBrightness$(data, reply);
                        case TRANSACTION_setMcuDelaySleep /* 1088 */:
                            return onTransact$setMcuDelaySleep$(data, reply);
                        case TRANSACTION_sendTboxBleAccountLoginFeedback /* 1089 */:
                            return onTransact$sendTboxBleAccountLoginFeedback$(data, reply);
                        case TRANSACTION_sendMcuBleAccountDataFeedback /* 1090 */:
                            return onTransact$sendMcuBleAccountDataFeedback$(data, reply);
                        case TRANSACTION_getMcuBleAccountData /* 1091 */:
                            return onTransact$getMcuBleAccountData$(data, reply);
                        case TRANSACTION_getScuExtraLatCtrlRemindInfo /* 1092 */:
                            return onTransact$getScuExtraLatCtrlRemindInfo$(data, reply);
                        case TRANSACTION_getAvasFaultStatus /* 1093 */:
                            return onTransact$getAvasFaultStatus$(data, reply);
                        case TRANSACTION_getCiuStatus /* 1094 */:
                            return onTransact$getCiuStatus$(data, reply);
                        case TRANSACTION_getBmsCellTempMaxNum /* 1095 */:
                            return onTransact$getBmsCellTempMaxNum$(data, reply);
                        case TRANSACTION_getBmsCellTempMinNum /* 1096 */:
                            return onTransact$getBmsCellTempMinNum$(data, reply);
                        case TRANSACTION_getWasherFluidWarning /* 1097 */:
                            return onTransact$getWasherFluidWarning$(data, reply);
                        case TRANSACTION_getBcmPassengerSeatBeltSbrWarningStatus /* 1099 */:
                            return onTransact$getBcmPassengerSeatBeltSbrWarningStatus$(data, reply);
                        case TRANSACTION_getBcmSeatHeatErrStatus /* 1100 */:
                            return onTransact$getBcmSeatHeatErrStatus$(data, reply);
                        case TRANSACTION_getIcmCabinAiFeedback /* 1101 */:
                            return onTransact$getIcmCabinAiFeedback$(data, reply);
                        case TRANSACTION_getScuAlarmFaultStatus /* 1103 */:
                            return onTransact$getScuAlarmFaultStatus$(data, reply);
                        case TRANSACTION_getScu322LogDataD20 /* 1104 */:
                            return onTransact$getScu322LogDataD20$(data, reply);
                        case TRANSACTION_getScuSlaStatus /* 1105 */:
                            return onTransact$getScuSlaStatus$(data, reply);
                        case TRANSACTION_getScuLdwStatus /* 1106 */:
                            return onTransact$getScuLdwStatus$(data, reply);
                        case TRANSACTION_getScuBsdStatus /* 1107 */:
                            return onTransact$getScuBsdStatus$(data, reply);
                        case TRANSACTION_getScuRctaStatus /* 1108 */:
                            return onTransact$getScuRctaStatus$(data, reply);
                        case TRANSACTION_getHvacErrorStatus /* 1111 */:
                            return onTransact$getHvacErrorStatus$(data, reply);
                        case TRANSACTION_getBmsScoIsLowStatus /* 1112 */:
                            return onTransact$getBmsScoIsLowStatus$(data, reply);
                        case TRANSACTION_getBmsIsErrorStatus /* 1113 */:
                            return onTransact$getBmsIsErrorStatus$(data, reply);
                        case TRANSACTION_getIsHvCutOffStatus /* 1114 */:
                            return onTransact$getIsHvCutOffStatus$(data, reply);
                        case TRANSACTION_setBatteryKeepTempSwitch /* 1115 */:
                            return onTransact$setBatteryKeepTempSwitch$(data, reply);
                        case TRANSACTION_getBatteryKeepTempMode /* 1116 */:
                            return onTransact$getBatteryKeepTempMode$(data, reply);
                        case TRANSACTION_setSpeedUpChargeSwitch /* 1117 */:
                            return onTransact$setSpeedUpChargeSwitch$(data, reply);
                        case TRANSACTION_getSpeedUpChargeMode /* 1118 */:
                            return onTransact$getSpeedUpChargeMode$(data, reply);
                        case TRANSACTION_setAutoLightSwitch /* 1119 */:
                            return onTransact$setAutoLightSwitch$(data, reply);
                        case TRANSACTION_sendTboxLocationInfo /* 1120 */:
                            return onTransact$sendTboxLocationInfo$(data, reply);
                        case TRANSACTION_setBcmRearLeftSeatHeatSw /* 1121 */:
                            return onTransact$setBcmRearLeftSeatHeatSw$(data, reply);
                        case TRANSACTION_getBcmRearLeftSeatHeatState /* 1122 */:
                            return onTransact$getBcmRearLeftSeatHeatState$(data, reply);
                        case TRANSACTION_setBcmRearRightSeatHeatSw /* 1123 */:
                            return onTransact$setBcmRearRightSeatHeatSw$(data, reply);
                        case TRANSACTION_getBcmRearRightSeatHeatState /* 1124 */:
                            return onTransact$getBcmRearRightSeatHeatState$(data, reply);
                        case TRANSACTION_getBcmRearLeftHeaterErrorState /* 1125 */:
                            return onTransact$getBcmRearLeftHeaterErrorState$(data, reply);
                        case TRANSACTION_getBcmRearRightHeaterErrorState /* 1126 */:
                            return onTransact$getBcmRearRightHeaterErrorState$(data, reply);
                        case TRANSACTION_setVcuDriveMileIncreaseSwitch /* 1127 */:
                            return onTransact$setVcuDriveMileIncreaseSwitch$(data, reply);
                        case TRANSACTION_getVcuDriveMileIncreaseStatus /* 1128 */:
                            return onTransact$getVcuDriveMileIncreaseStatus$(data, reply);
                        case TRANSACTION_setScuDistractionSwitch /* 1129 */:
                            return onTransact$setScuDistractionSwitch$(data, reply);
                        case TRANSACTION_getScuCutInPreventionWarning /* 1130 */:
                            return onTransact$getScuCutInPreventionWarning$(data, reply);
                        case TRANSACTION_getScuAccLkaWarning /* 1131 */:
                            return onTransact$getScuAccLkaWarning$(data, reply);
                        case TRANSACTION_getScuRoadVoiceTips /* 1132 */:
                            return onTransact$getScuRoadVoiceTips$(data, reply);
                        case TRANSACTION_getHvacAirInTakeAutoControlStatus /* 1133 */:
                            return onTransact$getHvacAirInTakeAutoControlStatus$(data, reply);
                        case TRANSACTION_getHvacWindSpeedAutoControlStatus /* 1134 */:
                            return onTransact$getHvacWindSpeedAutoControlStatus$(data, reply);
                        case TRANSACTION_getHvacAirDistributionAutoControlStatus /* 1135 */:
                            return onTransact$getHvacAirDistributionAutoControlStatus$(data, reply);
                        case TRANSACTION_setBcmSdcKeyOpenCtrlCfg /* 1136 */:
                            return onTransact$setBcmSdcKeyOpenCtrlCfg$(data, reply);
                        case TRANSACTION_getBcmSdcKeyOpenCtrlCfg /* 1137 */:
                            return onTransact$getBcmSdcKeyOpenCtrlCfg$(data, reply);
                        case TRANSACTION_setBcmSdcKeyCloseCtrlCfg /* 1138 */:
                            return onTransact$setBcmSdcKeyCloseCtrlCfg$(data, reply);
                        case TRANSACTION_getBcmSdcKeyCloseCtrlCfg /* 1139 */:
                            return onTransact$getBcmSdcKeyCloseCtrlCfg$(data, reply);
                        case TRANSACTION_setBcmSdcMaxAutoDoorOpeningAngle /* 1140 */:
                            return onTransact$setBcmSdcMaxAutoDoorOpeningAngle$(data, reply);
                        case TRANSACTION_getBcmSdcMaxAutoDoorOpeningAngle /* 1141 */:
                            return onTransact$getBcmSdcMaxAutoDoorOpeningAngle$(data, reply);
                        case TRANSACTION_getBcmLeftSdcHazzardRequest /* 1142 */:
                            return onTransact$getBcmLeftSdcHazzardRequest$(data, reply);
                        case TRANSACTION_getBcmRightSdcHazzardRequest /* 1143 */:
                            return onTransact$getBcmRightSdcHazzardRequest$(data, reply);
                        case TRANSACTION_getBcmLeftSdcSystemErrorState /* 1144 */:
                            return onTransact$getBcmLeftSdcSystemErrorState$(data, reply);
                        case TRANSACTION_getBcmRightSdcSystemErrorState /* 1145 */:
                            return onTransact$getBcmRightSdcSystemErrorState$(data, reply);
                        case TRANSACTION_getBcmLeftSdcDenormalizeState /* 1146 */:
                            return onTransact$getBcmLeftSdcDenormalizeState$(data, reply);
                        case TRANSACTION_getBcmRightSdcDenormalizeState /* 1147 */:
                            return onTransact$getBcmRightSdcDenormalizeState$(data, reply);
                        case TRANSACTION_setBcmLeftSdcWindowsAutoDownSwitch /* 1148 */:
                            return onTransact$setBcmLeftSdcWindowsAutoDownSwitch$(data, reply);
                        case TRANSACTION_getBcmLeftSdcWindowsAutoDownSwitchState /* 1149 */:
                            return onTransact$getBcmLeftSdcWindowsAutoDownSwitchState$(data, reply);
                        case TRANSACTION_setBcmRightSdcWindowsAutoDownSwitch /* 1150 */:
                            return onTransact$setBcmRightSdcWindowsAutoDownSwitch$(data, reply);
                        case TRANSACTION_getBcmRightSdcWindowsAutoDownSwitchState /* 1151 */:
                            return onTransact$getBcmRightSdcWindowsAutoDownSwitchState$(data, reply);
                        case TRANSACTION_setBcmLeftSdcAutoOrManualControl /* 1152 */:
                            return onTransact$setBcmLeftSdcAutoOrManualControl$(data, reply);
                        case TRANSACTION_setBcmRightSdcAutoOrManualControl /* 1153 */:
                            return onTransact$setBcmRightSdcAutoOrManualControl$(data, reply);
                        case TRANSACTION_getBcmReadyEnableState /* 1154 */:
                            return onTransact$getBcmReadyEnableState$(data, reply);
                        case TRANSACTION_getXpuNedcSwitchStatus /* 1155 */:
                            return onTransact$getXpuNedcSwitchStatus$(data, reply);
                        case TRANSACTION_setVcuEnduranceMileageMode /* 1156 */:
                            return onTransact$setVcuEnduranceMileageMode$(data, reply);
                        case TRANSACTION_getVcuEnduranceMileageMode /* 1157 */:
                            return onTransact$getVcuEnduranceMileageMode$(data, reply);
                        case TRANSACTION_getVcuWltpAvailableDrivingDistance /* 1158 */:
                            return onTransact$getVcuWltpAvailableDrivingDistance$(data, reply);
                        case TRANSACTION_getBcmBreakPedalStatus /* 1159 */:
                            return onTransact$getBcmBreakPedalStatus$(data, reply);
                        case TRANSACTION_setBcmLeftSdcDoorPosition /* 1160 */:
                            return onTransact$setBcmLeftSdcDoorPosition$(data, reply);
                        case TRANSACTION_setBcmRightSdcDoorPosition /* 1161 */:
                            return onTransact$setBcmRightSdcDoorPosition$(data, reply);
                        case TRANSACTION_setScuSlaAlarmSwitch /* 1162 */:
                            return onTransact$setScuSlaAlarmSwitch$(data, reply);
                        case TRANSACTION_getScuSlaAlarmSwitchState /* 1163 */:
                            return onTransact$getScuSlaAlarmSwitchState$(data, reply);
                        case TRANSACTION_getScuLocatDataWithZ /* 1164 */:
                            return onTransact$getScuLocatDataWithZ$(data, reply);
                        case TRANSACTION_getMcuCidState /* 1165 */:
                            return onTransact$getMcuCidState$(data, reply);
                        case TRANSACTION_setMcuRvcState /* 1166 */:
                            return onTransact$setMcuRvcState$(data, reply);
                        case TRANSACTION_setScuFsdSwitch /* 1167 */:
                            return onTransact$setScuFsdSwitch$(data, reply);
                        case TRANSACTION_getScuFsdSwitchState /* 1168 */:
                            return onTransact$getScuFsdSwitchState$(data, reply);
                        case TRANSACTION_getMcuBacklightTemperature /* 1169 */:
                            return onTransact$getMcuBacklightTemperature$(data, reply);
                        case TRANSACTION_getMcuBacklightIcDriverState /* 1170 */:
                            return onTransact$getMcuBacklightIcDriverState$(data, reply);
                        case TRANSACTION_setIcmDayNightMode /* 1171 */:
                            return onTransact$setIcmDayNightMode$(data, reply);
                        case TRANSACTION_setTboxBatteryKeepTempSwitch /* 1172 */:
                            return onTransact$setTboxBatteryKeepTempSwitch$(data, reply);
                        case TRANSACTION_getTboxRemoteBatteryKeepTempReq /* 1173 */:
                            return onTransact$getTboxRemoteBatteryKeepTempReq$(data, reply);
                        case TRANSACTION_setTboxBatteryKeepTempAppointTime /* 1174 */:
                            return onTransact$setTboxBatteryKeepTempAppointTime$(data, reply);
                        case TRANSACTION_getTboxBatteryKeepTempAppointTime /* 1175 */:
                            return onTransact$getTboxBatteryKeepTempAppointTime$(data, reply);
                        case TRANSACTION_getHvacAcCtrlType /* 1176 */:
                            return onTransact$getHvacAcCtrlType$(data, reply);
                        case TRANSACTION_getHvacBlowerCtrlType /* 1177 */:
                            return onTransact$getHvacBlowerCtrlType$(data, reply);
                        case TRANSACTION_getHvacAirCirculationType /* 1178 */:
                            return onTransact$getHvacAirCirculationType$(data, reply);
                        case TRANSACTION_getScuLkaState /* 1179 */:
                            return onTransact$getScuLkaState$(data, reply);
                        case TRANSACTION_getBcmNfcCardAuthStatus /* 1180 */:
                            return onTransact$getBcmNfcCardAuthStatus$(data, reply);
                        case TRANSACTION_getIcmUpdatingPartitionAndProgress /* 1181 */:
                            return onTransact$getIcmUpdatingPartitionAndProgress$(data, reply);
                        case TRANSACTION_getLeftAndRightTurnLampsActiveStatus /* 1182 */:
                            return onTransact$getLeftAndRightTurnLampsActiveStatus$(data, reply);
                        case TRANSACTION_setBcmAutoWindowsControl /* 1183 */:
                            return onTransact$setBcmAutoWindowsControl$(data, reply);
                        case TRANSACTION_getBcmDaytimeRunningLightsOutputStatus /* 1184 */:
                            return onTransact$getBcmDaytimeRunningLightsOutputStatus$(data, reply);
                        case TRANSACTION_getBcmEnvironmentMode /* 1185 */:
                            return onTransact$getBcmEnvironmentMode$(data, reply);
                        case TRANSACTION_notifyScuRearViewMirrorAdjustmentPageState /* 1186 */:
                            return onTransact$notifyScuRearViewMirrorAdjustmentPageState$(data, reply);
                        case TRANSACTION_getBcmTrunkDoorHeight /* 1187 */:
                            return onTransact$getBcmTrunkDoorHeight$(data, reply);
                        case TRANSACTION_getScuMrrFailureSt /* 1188 */:
                            return onTransact$getScuMrrFailureSt$(data, reply);
                        case TRANSACTION_getScuFishEyeCamFailureSt /* 1189 */:
                            return onTransact$getScuFishEyeCamFailureSt$(data, reply);
                        case TRANSACTION_getScuMainCamFailureSt /* 1190 */:
                            return onTransact$getScuMainCamFailureSt$(data, reply);
                        case TRANSACTION_getScuNarrowCamFailureSt /* 1191 */:
                            return onTransact$getScuNarrowCamFailureSt$(data, reply);
                        case TRANSACTION_getScuSideCamsFailureSt /* 1192 */:
                            return onTransact$getScuSideCamsFailureSt$(data, reply);
                        case TRANSACTION_getScuDisplayCruiseSpeed /* 1193 */:
                            return onTransact$getScuDisplayCruiseSpeed$(data, reply);
                        case TRANSACTION_getQuitNgpOddSt /* 1194 */:
                            return onTransact$getQuitNgpOddSt$(data, reply);
                        case TRANSACTION_setScuNgpOperationButton /* 1195 */:
                            return onTransact$setScuNgpOperationButton$(data, reply);
                        case TRANSACTION_getScuNgpOperationButtonSt /* 1196 */:
                            return onTransact$getScuNgpOperationButtonSt$(data, reply);
                        case TRANSACTION_getScuNgpLcTips1 /* 1197 */:
                            return onTransact$getScuNgpLcTips1$(data, reply);
                        case TRANSACTION_getScuNgpInfoTips1 /* 1198 */:
                            return onTransact$getScuNgpInfoTips1$(data, reply);
                        case TRANSACTION_setScuNgpTipsWindowsSw /* 1199 */:
                            return onTransact$setScuNgpTipsWindowsSw$(data, reply);
                        case TRANSACTION_getScuDoorsObstacleDetectionSt /* 1200 */:
                            return onTransact$getScuDoorsObstacleDetectionSt$(data, reply);
                        case TRANSACTION_getScuDoorsRadarDistance /* 1201 */:
                            return onTransact$getScuDoorsRadarDistance$(data, reply);
                        case TRANSACTION_getScuDoorsRadarDisplayLevel /* 1202 */:
                            return onTransact$getScuDoorsRadarDisplayLevel$(data, reply);
                        case TRANSACTION_setBcmFollowMeHomeCfg /* 1203 */:
                            return onTransact$setBcmFollowMeHomeCfg$(data, reply);
                        case TRANSACTION_getBcmFollowMeHomeCfg /* 1204 */:
                            return onTransact$getBcmFollowMeHomeCfg$(data, reply);
                        case TRANSACTION_setAtlConfiguration /* 1205 */:
                            return onTransact$setAtlConfiguration$(data, reply);
                        case TRANSACTION_getIcmEcuUpdateResult /* 1206 */:
                            return onTransact$getIcmEcuUpdateResult$(data, reply);
                        case TRANSACTION_setTboxGpsLogSwitch /* 1207 */:
                            return onTransact$setTboxGpsLogSwitch$(data, reply);
                        case TRANSACTION_getTboxToggleGpsLogSwitchResult /* 1208 */:
                            return onTransact$getTboxToggleGpsLogSwitchResult$(data, reply);
                        case TRANSACTION_setBcmCwcSwitch /* 1209 */:
                            return onTransact$setBcmCwcSwitch$(data, reply);
                        case TRANSACTION_getBcmCwcSwitchState /* 1210 */:
                            return onTransact$getBcmCwcSwitchState$(data, reply);
                        case TRANSACTION_getIcmCrashInfo /* 1211 */:
                            return onTransact$getIcmCrashInfo$(data, reply);
                        case TRANSACTION_getBcmLeftSdcMoveCommand /* 1212 */:
                            return onTransact$getBcmLeftSdcMoveCommand$(data, reply);
                        case TRANSACTION_getBcmRightSdcMoveCommand /* 1213 */:
                            return onTransact$getBcmRightSdcMoveCommand$(data, reply);
                        case TRANSACTION_getEpsTorsionBarTorque /* 1214 */:
                            return onTransact$getEpsTorsionBarTorque$(data, reply);
                        case TRANSACTION_getScuXpilot3Status /* 1215 */:
                            return onTransact$getScuXpilot3Status$(data, reply);
                        case TRANSACTION_setScuNgpPreferFastLaneSw /* 1216 */:
                            return onTransact$setScuNgpPreferFastLaneSw$(data, reply);
                        case TRANSACTION_setScuNgpAvoidTruckSw /* 1217 */:
                            return onTransact$setScuNgpAvoidTruckSw$(data, reply);
                        case TRANSACTION_setScuNgpDriverConfirmLaneChangeSw /* 1218 */:
                            return onTransact$setScuNgpDriverConfirmLaneChangeSw$(data, reply);
                        case TRANSACTION_setScuNgpLaneChangeMode /* 1219 */:
                            return onTransact$setScuNgpLaneChangeMode$(data, reply);
                        case TRANSACTION_setScuNgpRemindMode /* 1220 */:
                            return onTransact$setScuNgpRemindMode$(data, reply);
                        case TRANSACTION_setMcuLluModeCtrl /* 1221 */:
                            return onTransact$setMcuLluModeCtrl$(data, reply);
                        case TRANSACTION_setMcuLLuSelfControlData /* 1222 */:
                            return onTransact$setMcuLLuSelfControlData$(data, reply);
                        case TRANSACTION_setMcuTrunkPowerSw /* 1223 */:
                            return onTransact$setMcuTrunkPowerSw$(data, reply);
                        case TRANSACTION_getMcuTrunkPowerStatus /* 1224 */:
                            return onTransact$getMcuTrunkPowerStatus$(data, reply);
                        case TRANSACTION_setMcuTrunkPowerOffDelay /* 1225 */:
                            return onTransact$setMcuTrunkPowerOffDelay$(data, reply);
                        case TRANSACTION_getMcuTrunkPowerOffDelay /* 1226 */:
                            return onTransact$getMcuTrunkPowerOffDelay$(data, reply);
                        case TRANSACTION_getIcmDiagnosisInfo /* 1227 */:
                            return onTransact$getIcmDiagnosisInfo$(data, reply);
                        case TRANSACTION_getScuNgpTipsWindowsSwSt /* 1228 */:
                            return onTransact$getScuNgpTipsWindowsSwSt$(data, reply);
                        case TRANSACTION_getScuNgpPreferFastLaneSwSt /* 1229 */:
                            return onTransact$getScuNgpPreferFastLaneSwSt$(data, reply);
                        case TRANSACTION_getScuNgpAvoidTruckSwSt /* 1230 */:
                            return onTransact$getScuNgpAvoidTruckSwSt$(data, reply);
                        case TRANSACTION_getScuNgpDriverConfirmLaneChangeSwSt /* 1231 */:
                            return onTransact$getScuNgpDriverConfirmLaneChangeSwSt$(data, reply);
                        case TRANSACTION_getScuNgpLaneChangeMode /* 1232 */:
                            return onTransact$getScuNgpLaneChangeMode$(data, reply);
                        case TRANSACTION_getScuNgpRemindMode /* 1233 */:
                            return onTransact$getScuNgpRemindMode$(data, reply);
                        case TRANSACTION_getSrsRearLeftSeatOccupancyStatus /* 1234 */:
                            return onTransact$getSrsRearLeftSeatOccupancyStatus$(data, reply);
                        case TRANSACTION_getSrsRearMiddleSeatOccupancyStatus /* 1235 */:
                            return onTransact$getSrsRearMiddleSeatOccupancyStatus$(data, reply);
                        case TRANSACTION_getSrsRearRightSeatOccupancyStatus /* 1236 */:
                            return onTransact$getSrsRearRightSeatOccupancyStatus$(data, reply);
                        case TRANSACTION_setBcmShadeControllerComfortCommand /* 1237 */:
                            return onTransact$setBcmShadeControllerComfortCommand$(data, reply);
                        case TRANSACTION_setBcmShadeControllerPosition /* 1238 */:
                            return onTransact$setBcmShadeControllerPosition$(data, reply);
                        case TRANSACTION_getBcmShadeControllerPosition /* 1239 */:
                            return onTransact$getBcmShadeControllerPosition$(data, reply);
                        case TRANSACTION_setBcmShadeControllerInitialization /* 1240 */:
                            return onTransact$setBcmShadeControllerInitialization$(data, reply);
                        case TRANSACTION_getBcmShadeControllerInitializationSt /* 1241 */:
                            return onTransact$getBcmShadeControllerInitializationSt$(data, reply);
                        case TRANSACTION_getBcmWiperSpeedSwitchesStatus /* 1242 */:
                            return onTransact$getBcmWiperSpeedSwitchesStatus$(data, reply);
                        case TRANSACTION_getVcuObcAcVoltage /* 1243 */:
                            return onTransact$getVcuObcAcVoltage$(data, reply);
                        case TRANSACTION_getVcuObcAcCurrent /* 1244 */:
                            return onTransact$getVcuObcAcCurrent$(data, reply);
                        case TRANSACTION_getVcuObcAcVoltageStatus /* 1245 */:
                            return onTransact$getVcuObcAcVoltageStatus$(data, reply);
                        case TRANSACTION_getBcmLeftSdcSystemRunningState /* 1246 */:
                            return onTransact$getBcmLeftSdcSystemRunningState$(data, reply);
                        case TRANSACTION_getBcmRightSdcSystemRunningState /* 1247 */:
                            return onTransact$getBcmRightSdcSystemRunningState$(data, reply);
                        case TRANSACTION_setScuSsLeftSystemStatus /* 1248 */:
                            return onTransact$setScuSsLeftSystemStatus$(data, reply);
                        case TRANSACTION_setScuSsRightSystemStatus /* 1249 */:
                            return onTransact$setScuSsRightSystemStatus$(data, reply);
                        case TRANSACTION_getScuSdcUltrasonicRadarVoiceTone /* 1250 */:
                            return onTransact$getScuSdcUltrasonicRadarVoiceTone$(data, reply);
                        case TRANSACTION_getBcmLeftSdcDoorPosition /* 1251 */:
                            return onTransact$getBcmLeftSdcDoorPosition$(data, reply);
                        case TRANSACTION_getBcmRightSdcDoorPosition /* 1252 */:
                            return onTransact$getBcmRightSdcDoorPosition$(data, reply);
                        case TRANSACTION_setScuOtaTagStatus /* 1253 */:
                            return onTransact$setScuOtaTagStatus$(data, reply);
                        case TRANSACTION_getScuSdcTips /* 1254 */:
                            return onTransact$getScuSdcTips$(data, reply);
                        case TRANSACTION_getScuSdcTts /* 1255 */:
                            return onTransact$getScuSdcTts$(data, reply);
                        case TRANSACTION_setScuCurrentRoadSpeedLimit /* 1256 */:
                            return onTransact$setScuCurrentRoadSpeedLimit$(data, reply);
                        case TRANSACTION_getScuLccExitReason /* 1257 */:
                            return onTransact$getScuLccExitReason$(data, reply);
                        case TRANSACTION_getScuAccExitReason /* 1258 */:
                            return onTransact$getScuAccExitReason$(data, reply);
                        case TRANSACTION_setScuElkSwitch /* 1259 */:
                            return onTransact$setScuElkSwitch$(data, reply);
                        case TRANSACTION_getScuElkSwitchState /* 1260 */:
                            return onTransact$getScuElkSwitchState$(data, reply);
                        case TRANSACTION_getBcmRearViewMirrorsAdjustStates /* 1261 */:
                            return onTransact$getBcmRearViewMirrorsAdjustStates$(data, reply);
                        case TRANSACTION_setHvacSfsSwitch /* 1262 */:
                            return onTransact$setHvacSfsSwitch$(data, reply);
                        case TRANSACTION_getHvacSfsSwitchStatus /* 1263 */:
                            return onTransact$getHvacSfsSwitchStatus$(data, reply);
                        case TRANSACTION_getHvacSfsTypeInChannels /* 1264 */:
                            return onTransact$getHvacSfsTypeInChannels$(data, reply);
                        case TRANSACTION_setHavacSfsChannel /* 1265 */:
                            return onTransact$setHavacSfsChannel$(data, reply);
                        case TRANSACTION_getHvacSfsChannel /* 1266 */:
                            return onTransact$getHvacSfsChannel$(data, reply);
                        case TRANSACTION_setHvacDeodorizeSwitch /* 1267 */:
                            return onTransact$setHvacDeodorizeSwitch$(data, reply);
                        case TRANSACTION_getHvacDeodorizeSwitchStatus /* 1268 */:
                            return onTransact$getHvacDeodorizeSwitchStatus$(data, reply);
                        case TRANSACTION_setHvacWarpSpeedWarmingSwitch /* 1269 */:
                            return onTransact$setHvacWarpSpeedWarmingSwitch$(data, reply);
                        case TRANSACTION_getHvacWarpSpeedWarmingSwitchStatus /* 1270 */:
                            return onTransact$getHvacWarpSpeedWarmingSwitchStatus$(data, reply);
                        case TRANSACTION_setHvacWarpSpeedCoolingSwitch /* 1271 */:
                            return onTransact$setHvacWarpSpeedCoolingSwitch$(data, reply);
                        case TRANSACTION_getHvacWarpSpeedCoolingSwitchStatus /* 1272 */:
                            return onTransact$getHvacWarpSpeedCoolingSwitchStatus$(data, reply);
                        case TRANSACTION_setHvacAutoDefogSwitch /* 1273 */:
                            return onTransact$setHvacAutoDefogSwitch$(data, reply);
                        case TRANSACTION_getHvacAutoDefogSwitchStatus /* 1274 */:
                            return onTransact$getHvacAutoDefogSwitchStatus$(data, reply);
                        case TRANSACTION_setMsmPassengerSeatHorizontalPosition /* 1275 */:
                            return onTransact$setMsmPassengerSeatHorizontalPosition$(data, reply);
                        case TRANSACTION_getMsmPassengerSeatHorizontalPosition /* 1276 */:
                            return onTransact$getMsmPassengerSeatHorizontalPosition$(data, reply);
                        case TRANSACTION_setMsmPassengerSeatVerticalPosition /* 1277 */:
                            return onTransact$setMsmPassengerSeatVerticalPosition$(data, reply);
                        case TRANSACTION_getMsmPassengerSeatVerticalPosition /* 1278 */:
                            return onTransact$getMsmPassengerSeatVerticalPosition$(data, reply);
                        case TRANSACTION_setMsmPassengerSeatBackPosition /* 1279 */:
                            return onTransact$setMsmPassengerSeatBackPosition$(data, reply);
                        case 1280:
                            return onTransact$getMsmPassengerSeatBackPosition$(data, reply);
                        case 1281:
                            return onTransact$getMsmDriverHeadrestStatus$(data, reply);
                        case 1282:
                            return onTransact$getMsmPassengerHeadrestStatus$(data, reply);
                        case 1283:
                            return onTransact$getImuSatellitesNumber$(data, reply);
                        case TRANSACTION_getImuNavigationSatellitesRssi /* 1284 */:
                            return onTransact$getImuNavigationSatellitesRssi$(data, reply);
                        case TRANSACTION_deactivateAndroidLluControl /* 1285 */:
                            return onTransact$deactivateAndroidLluControl$(data, reply);
                        case TRANSACTION_getBcmShadeControllerMotorStatus /* 1286 */:
                            return onTransact$getBcmShadeControllerMotorStatus$(data, reply);
                        case TRANSACTION_setMsmPassengerAllPositions /* 1287 */:
                            return onTransact$setMsmPassengerAllPositions$(data, reply);
                        case TRANSACTION_getScuRightSdcRadarStatus /* 1288 */:
                            return onTransact$getScuRightSdcRadarStatus$(data, reply);
                        case TRANSACTION_getScuLeftSdcRadarStatus /* 1289 */:
                            return onTransact$getScuLeftSdcRadarStatus$(data, reply);
                        case TRANSACTION_getScuLeftSdcBlindStatus /* 1290 */:
                            return onTransact$getScuLeftSdcBlindStatus$(data, reply);
                        case TRANSACTION_getScuLeftSdcSceneStatus /* 1291 */:
                            return onTransact$getScuLeftSdcSceneStatus$(data, reply);
                        case TRANSACTION_getScuRightSdcBlindStatus /* 1292 */:
                            return onTransact$getScuRightSdcBlindStatus$(data, reply);
                        case TRANSACTION_getScuRightSdcSceneStatus /* 1293 */:
                            return onTransact$getScuRightSdcSceneStatus$(data, reply);
                        case TRANSACTION_getScuSdcAutoModeStatus /* 1294 */:
                            return onTransact$getScuSdcAutoModeStatus$(data, reply);
                        case TRANSACTION_getScuSdcCtrlIndex1 /* 1295 */:
                            return onTransact$getScuSdcCtrlIndex1$(data, reply);
                        case TRANSACTION_getScuSdcCtrlIndex2 /* 1296 */:
                            return onTransact$getScuSdcCtrlIndex2$(data, reply);
                        case TRANSACTION_getScuLeftSdcURadarDistance /* 1297 */:
                            return onTransact$getScuLeftSdcURadarDistance$(data, reply);
                        case TRANSACTION_getScuRightSdcURadarDistance /* 1298 */:
                            return onTransact$getScuRightSdcURadarDistance$(data, reply);
                        case TRANSACTION_setScuParkingGroundState /* 1299 */:
                            return onTransact$setScuParkingGroundState$(data, reply);
                        case TRANSACTION_setMsmPassengerAllPositionsToLDCU /* 1300 */:
                            return onTransact$setMsmPassengerAllPositionsToLDCU$(data, reply);
                        case TRANSACTION_getScuRightSdcRadarDistance /* 1319 */:
                            return onTransact$getScuRightSdcRadarDistance$(data, reply);
                        case TRANSACTION_getScuRightSdcRadarTof /* 1320 */:
                            return onTransact$getScuRightSdcRadarTof$(data, reply);
                        case TRANSACTION_getScuRightSdcRadarPeakLevel /* 1321 */:
                            return onTransact$getScuRightSdcRadarPeakLevel$(data, reply);
                        case TRANSACTION_getScuRightSdcRadarStatusCcp /* 1322 */:
                            return onTransact$getScuRightSdcRadarStatusCcp$(data, reply);
                        case TRANSACTION_getScuRightSdcRadarErrorStatus /* 1323 */:
                            return onTransact$getScuRightSdcRadarErrorStatus$(data, reply);
                        case TRANSACTION_getScuLeftSdcRadarDistance /* 1324 */:
                            return onTransact$getScuLeftSdcRadarDistance$(data, reply);
                        case TRANSACTION_getScuLeftSdcRadarTof /* 1325 */:
                            return onTransact$getScuLeftSdcRadarTof$(data, reply);
                        case TRANSACTION_getScuLeftSdcRadarPeakLevel /* 1326 */:
                            return onTransact$getScuLeftSdcRadarPeakLevel$(data, reply);
                        case TRANSACTION_getScuLeftSdcRadarStatusCcp /* 1327 */:
                            return onTransact$getScuLeftSdcRadarStatusCcp$(data, reply);
                        case TRANSACTION_getScuLeftSdcRadarErrorStatus /* 1328 */:
                            return onTransact$getScuLeftSdcRadarErrorStatus$(data, reply);
                        case TRANSACTION_getScuRightSdcRadarRt /* 1329 */:
                            return onTransact$getScuRightSdcRadarRt$(data, reply);
                        case TRANSACTION_getScuRightSdcRadarWaveWidth /* 1330 */:
                            return onTransact$getScuRightSdcRadarWaveWidth$(data, reply);
                        case TRANSACTION_getScuLeftSdcRadarRt /* 1331 */:
                            return onTransact$getScuLeftSdcRadarRt$(data, reply);
                        case TRANSACTION_getScuLeftSdcRadarWaveWidth /* 1332 */:
                            return onTransact$getScuLeftSdcRadarWaveWidth$(data, reply);
                        case TRANSACTION_getRightRightSdcIndexN /* 1333 */:
                            return onTransact$getRightRightSdcIndexN$(data, reply);
                        case TRANSACTION_getLeftSdcIndexN /* 1334 */:
                            return onTransact$getLeftSdcIndexN$(data, reply);
                        case TRANSACTION_getScuSdcRadarFusion /* 1335 */:
                            return onTransact$getScuSdcRadarFusion$(data, reply);
                        case TRANSACTION_getScuLeftSdcRadarHallCounter /* 1336 */:
                            return onTransact$getScuLeftSdcRadarHallCounter$(data, reply);
                        case TRANSACTION_getScuRightSdcRadarHallCounter /* 1337 */:
                            return onTransact$getScuRightSdcRadarHallCounter$(data, reply);
                        case TRANSACTION_setMcuFactoryModeSwitch /* 1338 */:
                            return onTransact$setMcuFactoryModeSwitch$(data, reply);
                        case TRANSACTION_getVcuCarStationaryStatus /* 1339 */:
                            return onTransact$getVcuCarStationaryStatus$(data, reply);
                        case TRANSACTION_getMcuFactoryModeSwitchStatus /* 1340 */:
                            return onTransact$getMcuFactoryModeSwitchStatus$(data, reply);
                        case TRANSACTION_getMcuTemporaryFactoryStatus /* 1341 */:
                            return onTransact$getMcuTemporaryFactoryStatus$(data, reply);
                        case TRANSACTION_getScuAebAlarmSwitchState /* 1342 */:
                            return onTransact$getScuAebAlarmSwitchState$(data, reply);
                        case TRANSACTION_setHvacSfsConcentration /* 1343 */:
                            return onTransact$setHvacSfsConcentration$(data, reply);
                        case TRANSACTION_getHvacSfsConcentrationStatus /* 1344 */:
                            return onTransact$getHvacSfsConcentrationStatus$(data, reply);
                        case TRANSACTION_getScuSteeringWheelEps /* 1345 */:
                            return onTransact$getScuSteeringWheelEps$(data, reply);
                        case TRANSACTION_setScuVoiceLaneChangeCommand /* 1346 */:
                            return onTransact$setScuVoiceLaneChangeCommand$(data, reply);
                        case TRANSACTION_getScuNgpModeStatus /* 1347 */:
                            return onTransact$getScuNgpModeStatus$(data, reply);
                        case TRANSACTION_getScuParkByMemorySwSt /* 1348 */:
                            return onTransact$getScuParkByMemorySwSt$(data, reply);
                        case TRANSACTION_setScuParkByMemorySw /* 1349 */:
                            return onTransact$setScuParkByMemorySw$(data, reply);
                        case TRANSACTION_stopMsmDriverSeatMoving /* 1350 */:
                            return onTransact$stopMsmDriverSeatMoving$(data, reply);
                        case TRANSACTION_stopMsmPassengerSeatMoving /* 1351 */:
                            return onTransact$stopMsmPassengerSeatMoving$(data, reply);
                        case TRANSACTION_getScuDsmPrompt /* 1352 */:
                            return onTransact$getScuDsmPrompt$(data, reply);
                        case TRANSACTION_getImuSystemStateAndSpeed /* 1353 */:
                            return onTransact$getImuSystemStateAndSpeed$(data, reply);
                        case TRANSACTION_getScuLdwLkaSwitchStatus /* 1354 */:
                            return onTransact$getScuLdwLkaSwitchStatus$(data, reply);
                        case TRANSACTION_setScuLdwLkaSwitchStatus /* 1355 */:
                            return onTransact$setScuLdwLkaSwitchStatus$(data, reply);
                        case TRANSACTION_getScuLkaSwitchState /* 1356 */:
                            return onTransact$getScuLkaSwitchState$(data, reply);
                        case TRANSACTION_setScuCurrentElectronicEyeSpeedLimitAndDistance /* 1357 */:
                            return onTransact$setScuCurrentElectronicEyeSpeedLimitAndDistance$(data, reply);
                        case TRANSACTION_setTboxUpgradePrepareRequest /* 1358 */:
                            return onTransact$setTboxUpgradePrepareRequest$(data, reply);
                        case TRANSACTION_getTboxUpgradePrepareResponse /* 1359 */:
                            return onTransact$getTboxUpgradePrepareResponse$(data, reply);
                        case TRANSACTION_getMcuWifiHotspotRequest /* 1360 */:
                            return onTransact$getMcuWifiHotspotRequest$(data, reply);
                        case TRANSACTION_getScuURadarDataInfo /* 1361 */:
                            return onTransact$getScuURadarDataInfo$(data, reply);
                        case TRANSACTION_getScuAlcCtrlRemindInfo /* 1362 */:
                            return onTransact$getScuAlcCtrlRemindInfo$(data, reply);
                        case TRANSACTION_getHvacCoConcentrationStatus /* 1363 */:
                            return onTransact$getHvacCoConcentrationStatus$(data, reply);
                        case TRANSACTION_sendTboxEmergencyWifiBleMessage /* 1364 */:
                            return onTransact$sendTboxEmergencyWifiBleMessage$(data, reply);
                        case TRANSACTION_getVpmRdpLeftWarningStatus /* 1365 */:
                            return onTransact$getVpmRdpLeftWarningStatus$(data, reply);
                        case TRANSACTION_getVpmRdpRightWarningStatus /* 1366 */:
                            return onTransact$getVpmRdpRightWarningStatus$(data, reply);
                        case TRANSACTION_getSrsPassengerCrashOccurSwSt /* 1367 */:
                            return onTransact$getSrsPassengerCrashOccurSwSt$(data, reply);
                        case TRANSACTION_setSrsPassengerCrashOccurSw /* 1368 */:
                            return onTransact$setSrsPassengerCrashOccurSw$(data, reply);
                        case TRANSACTION_sendMcuOpenWifiHotspotResponse /* 1369 */:
                            return onTransact$sendMcuOpenWifiHotspotResponse$(data, reply);
                        case TRANSACTION_requestIcmDashboardLightsStatus /* 1370 */:
                            return onTransact$requestIcmDashboardLightsStatus$(data, reply);
                        case TRANSACTION_getIcmDashboardLightsStatus /* 1371 */:
                            return onTransact$getIcmDashboardLightsStatus$(data, reply);
                        case TRANSACTION_setIcmLeftCard /* 1372 */:
                            return onTransact$setIcmLeftCard$(data, reply);
                        case TRANSACTION_setIcmRightCard /* 1373 */:
                            return onTransact$setIcmRightCard$(data, reply);
                        case TRANSACTION_getMcuKeyStartStatus /* 1374 */:
                            return onTransact$getMcuKeyStartStatus$(data, reply);
                        case TRANSACTION_setBcmSaberLightSw /* 1375 */:
                            return onTransact$setBcmSaberLightSw$(data, reply);
                        case TRANSACTION_getSpcSolarWorkSt /* 1376 */:
                            return onTransact$getSpcSolarWorkSt$(data, reply);
                        case TRANSACTION_getSpcGrossEnergyGeneration /* 1377 */:
                            return onTransact$getSpcGrossEnergyGeneration$(data, reply);
                        case TRANSACTION_getSpcRecentEnergyGeneration /* 1378 */:
                            return onTransact$getSpcRecentEnergyGeneration$(data, reply);
                        case TRANSACTION_getScuRemoteFlag /* 1379 */:
                            return onTransact$getScuRemoteFlag$(data, reply);
                        case TRANSACTION_getSpcSolarPower /* 1380 */:
                            return onTransact$getSpcSolarPower$(data, reply);
                        case TRANSACTION_setLluAndroidLlSt /* 1381 */:
                            return onTransact$setLluAndroidLlSt$(data, reply);
                        case TRANSACTION_setBcmMaintainModeSw /* 1382 */:
                            return onTransact$setBcmMaintainModeSw$(data, reply);
                        case TRANSACTION_getMcuTrunkPowerOnRequest /* 1383 */:
                            return onTransact$getMcuTrunkPowerOnRequest$(data, reply);
                        case TRANSACTION_getBcmScSwitchStatus /* 1384 */:
                            return onTransact$getBcmScSwitchStatus$(data, reply);
                        case TRANSACTION_getBcmScEcuStatus /* 1385 */:
                            return onTransact$getBcmScEcuStatus$(data, reply);
                        case TRANSACTION_getBcmScThermalProtectSt /* 1386 */:
                            return onTransact$getBcmScThermalProtectSt$(data, reply);
                        case TRANSACTION_getBcmScAntiPinchStatus /* 1387 */:
                            return onTransact$getBcmScAntiPinchStatus$(data, reply);
                        case TRANSACTION_getBcmScIceBreakMode /* 1388 */:
                            return onTransact$getBcmScIceBreakMode$(data, reply);
                        case TRANSACTION_getBcmScLinStatus /* 1389 */:
                            return onTransact$getBcmScLinStatus$(data, reply);
                        case TRANSACTION_setVcuSpecialDrivingMode /* 1390 */:
                            return onTransact$setVcuSpecialDrivingMode$(data, reply);
                        case TRANSACTION_getVcuSpecialDrivingMode /* 1391 */:
                            return onTransact$getVcuSpecialDrivingMode$(data, reply);
                        case TRANSACTION_setVcuPowerResponseMode /* 1392 */:
                            return onTransact$setVcuPowerResponseMode$(data, reply);
                        case TRANSACTION_getVcuPowerResponseMode /* 1393 */:
                            return onTransact$getVcuPowerResponseMode$(data, reply);
                        case TRANSACTION_setVcuMotorPowerMode /* 1394 */:
                            return onTransact$setVcuMotorPowerMode$(data, reply);
                        case TRANSACTION_getVcuMotorPowerMode /* 1395 */:
                            return onTransact$getVcuMotorPowerMode$(data, reply);
                        case TRANSACTION_setVcuXpedalModeSwitchStatus /* 1396 */:
                            return onTransact$setVcuXpedalModeSwitchStatus$(data, reply);
                        case TRANSACTION_getVcuXpedalModeSwitchStatus /* 1397 */:
                            return onTransact$getVcuXpedalModeSwitchStatus$(data, reply);
                        case TRANSACTION_setBcmHeightLvlConfigValue /* 1398 */:
                            return onTransact$setBcmHeightLvlConfigValue$(data, reply);
                        case TRANSACTION_getBcmHeightLvlConfigValue /* 1399 */:
                            return onTransact$getBcmHeightLvlConfigValue$(data, reply);
                        case 1400:
                            return onTransact$setBcmSoftLvlConfigValue$(data, reply);
                        case TRANSACTION_getBcmSoftLvlConfigValue /* 1401 */:
                            return onTransact$getBcmSoftLvlConfigValue$(data, reply);
                        case TRANSACTION_setBcmHandleAutoSwitch /* 1402 */:
                            return onTransact$setBcmHandleAutoSwitch$(data, reply);
                        case TRANSACTION_getBcmHandleAutoState /* 1403 */:
                            return onTransact$getBcmHandleAutoState$(data, reply);
                        case TRANSACTION_setEspOffRoadSwitch /* 1404 */:
                            return onTransact$setEspOffRoadSwitch$(data, reply);
                        case TRANSACTION_getBcmEasyLoadingState /* 1405 */:
                            return onTransact$getBcmEasyLoadingState$(data, reply);
                        case TRANSACTION_setBcmEasyLoadingSwitch /* 1406 */:
                            return onTransact$setBcmEasyLoadingSwitch$(data, reply);
                        case TRANSACTION_getBcmMaintainModeSwitchStatus /* 1407 */:
                            return onTransact$getBcmMaintainModeSwitchStatus$(data, reply);
                        case TRANSACTION_getBcmSuspenWelcomeSwitchState /* 1408 */:
                            return onTransact$getBcmSuspenWelcomeSwitchState$(data, reply);
                        case TRANSACTION_setBcmSuspenWelcomeSwitch /* 1409 */:
                            return onTransact$setBcmSuspenWelcomeSwitch$(data, reply);
                        case TRANSACTION_getVcuExhibModeSwitchStatus /* 1410 */:
                            return onTransact$getVcuExhibModeSwitchStatus$(data, reply);
                        case TRANSACTION_setScuRoadAttribType /* 1411 */:
                            return onTransact$setScuRoadAttribType$(data, reply);
                        case TRANSACTION_setScuSpeedLimitDriverConfirmSwitch /* 1412 */:
                            return onTransact$setScuSpeedLimitDriverConfirmSwitch$(data, reply);
                        case TRANSACTION_setScuSpeedLimitRange /* 1413 */:
                            return onTransact$setScuSpeedLimitRange$(data, reply);
                        case TRANSACTION_getScuSpeedLimitSwitchState /* 1414 */:
                            return onTransact$getScuSpeedLimitSwitchState$(data, reply);
                        case TRANSACTION_setScuSpeedLimitSwitchState /* 1415 */:
                            return onTransact$setScuSpeedLimitSwitchState$(data, reply);
                        case TRANSACTION_setScuIntelligentSpeedLimitValue /* 1416 */:
                            return onTransact$setScuIntelligentSpeedLimitValue$(data, reply);
                        case TRANSACTION_getImuSystemStateFromCan /* 1417 */:
                            return onTransact$getImuSystemStateFromCan$(data, reply);
                        case TRANSACTION_getImuNavigationDataFromCan /* 1418 */:
                            return onTransact$getImuNavigationDataFromCan$(data, reply);
                        case TRANSACTION_getImuSystemStateAndSpeedFromCan /* 1419 */:
                            return onTransact$getImuSystemStateAndSpeedFromCan$(data, reply);
                        case TRANSACTION_getBcmSaberLightSwitchStatus /* 1420 */:
                            return onTransact$getBcmSaberLightSwitchStatus$(data, reply);
                        case TRANSACTION_sendMcuMapVersion /* 1421 */:
                            return onTransact$sendMcuMapVersion$(data, reply);
                        case TRANSACTION_getScuSpeedLimitDriverConfirmStatus /* 1422 */:
                            return onTransact$getScuSpeedLimitDriverConfirmStatus$(data, reply);
                        case TRANSACTION_getScuSpeedLimitRange /* 1423 */:
                            return onTransact$getScuSpeedLimitRange$(data, reply);
                        case TRANSACTION_getScuSpeedLimitControlSystemState /* 1424 */:
                            return onTransact$getScuSpeedLimitControlSystemState$(data, reply);
                        case TRANSACTION_getBcmLRMirrorHeatSwitchStatus /* 1425 */:
                            return onTransact$getBcmLRMirrorHeatSwitchStatus$(data, reply);
                        case TRANSACTION_getVcuCltcAvailableDrivingDistance /* 1426 */:
                            return onTransact$getVcuCltcAvailableDrivingDistance$(data, reply);
                        case TRANSACTION_sendMcuTboxVBusControlCommand /* 1427 */:
                            return onTransact$sendMcuTboxVBusControlCommand$(data, reply);
                        case TRANSACTION_sendTboxMultiBleRenewalRequest /* 1428 */:
                            return onTransact$sendTboxMultiBleRenewalRequest$(data, reply);
                        case TRANSACTION_getTboxMultiBleRenewalResponse /* 1429 */:
                            return onTransact$getTboxMultiBleRenewalResponse$(data, reply);
                        case TRANSACTION_getScuMemoryParkingState /* 1430 */:
                            return onTransact$getScuMemoryParkingState$(data, reply);
                        case TRANSACTION_getVcuObcFaultPhaseLossStatus /* 1431 */:
                            return onTransact$getVcuObcFaultPhaseLossStatus$(data, reply);
                        case TRANSACTION_getScuSpeedLimitRemindVoice /* 1432 */:
                            return onTransact$getScuSpeedLimitRemindVoice$(data, reply);
                        case TRANSACTION_setScuDsmStatus /* 1437 */:
                            return onTransact$setScuDsmStatus$(data, reply);
                        case TRANSACTION_getScuDsmStatus /* 1438 */:
                            return onTransact$getScuDsmStatus$(data, reply);
                        case TRANSACTION_sendTboxFactoryPreCert /* 1439 */:
                            return onTransact$sendTboxFactoryPreCert$(data, reply);
                        case TRANSACTION_getTboxFactoryPreCert /* 1440 */:
                            return onTransact$getTboxFactoryPreCert$(data, reply);
                        case TRANSACTION_sendScuNaviLoadLinkType /* 1441 */:
                            return onTransact$sendScuNaviLoadLinkType$(data, reply);
                        case TRANSACTION_setXpuApRemoteSw /* 1442 */:
                            return onTransact$setXpuApRemoteSw$(data, reply);
                        case TRANSACTION_getXpuApRemoteSw /* 1443 */:
                            return onTransact$getXpuApRemoteSw$(data, reply);
                        case TRANSACTION_setEspEpbSystemSwitch /* 1444 */:
                            return onTransact$setEspEpbSystemSwitch$(data, reply);
                        case TRANSACTION_getEspInterventionStatus /* 1445 */:
                            return onTransact$getEspInterventionStatus$(data, reply);
                        case TRANSACTION_setVcuTrailerModeSwitchStatus /* 1446 */:
                            return onTransact$setVcuTrailerModeSwitchStatus$(data, reply);
                        case TRANSACTION_getVcuTrailerModeSwitchStatus /* 1447 */:
                            return onTransact$getVcuTrailerModeSwitchStatus$(data, reply);
                        case TRANSACTION_setMsmdAllPositions /* 1448 */:
                            return onTransact$setMsmdAllPositions$(data, reply);
                        case TRANSACTION_saveMsmDAllPositionsToMcu /* 1449 */:
                            return onTransact$saveMsmDAllPositionsToMcu$(data, reply);
                        case TRANSACTION_setMsmDriverSeatTiltLevelOff /* 1450 */:
                            return onTransact$setMsmDriverSeatTiltLevelOff$(data, reply);
                        case TRANSACTION_setMsmDriverSeatCushTiltPos /* 1451 */:
                            return onTransact$setMsmDriverSeatCushTiltPos$(data, reply);
                        case TRANSACTION_setMsmPassengerSeatCushExt /* 1452 */:
                            return onTransact$setMsmPassengerSeatCushExt$(data, reply);
                        case TRANSACTION_setMsmSecrowLtSeatTiltReq /* 1453 */:
                            return onTransact$setMsmSecrowLtSeatTiltReq$(data, reply);
                        case TRANSACTION_setMsmSecrowLtSeatUnfoldReq /* 1454 */:
                            return onTransact$setMsmSecrowLtSeatUnfoldReq$(data, reply);
                        case TRANSACTION_setMsmSecrowLtSeatSTopMoveReq /* 1455 */:
                            return onTransact$setMsmSecrowLtSeatSTopMoveReq$(data, reply);
                        case TRANSACTION_setMsmSecrowRtSeatTiltReq /* 1456 */:
                            return onTransact$setMsmSecrowRtSeatTiltReq$(data, reply);
                        case TRANSACTION_setMsmSecrowRtSeatSTopMoveReq /* 1457 */:
                            return onTransact$setMsmSecrowRtSeatSTopMoveReq$(data, reply);
                        case TRANSACTION_setMsmSecrowRTSeatUnfoldReq /* 1458 */:
                            return onTransact$setMsmSecrowRTSeatUnfoldReq$(data, reply);
                        case TRANSACTION_setLluPowerRequestSwitchStatus /* 1459 */:
                            return onTransact$setLluPowerRequestSwitchStatus$(data, reply);
                        case TRANSACTION_getTpmsAllSensorStatus /* 1460 */:
                            return onTransact$getTpmsAllSensorStatus$(data, reply);
                        case TRANSACTION_getHvacDisinfSwitchStatus /* 1461 */:
                            return onTransact$getHvacDisinfSwitchStatus$(data, reply);
                        case TRANSACTION_getHvacFrogingRiskStatus /* 1462 */:
                            return onTransact$getHvacFrogingRiskStatus$(data, reply);
                        case TRANSACTION_setVcuSpecialCarbinModeSwitch /* 1463 */:
                            return onTransact$setVcuSpecialCarbinModeSwitch$(data, reply);
                        case TRANSACTION_setVcuSecondaryPowerOffRequest /* 1464 */:
                            return onTransact$setVcuSecondaryPowerOffRequest$(data, reply);
                        case TRANSACTION_getVcuSecondaryPowerOffResponce /* 1465 */:
                            return onTransact$getVcuSecondaryPowerOffResponce$(data, reply);
                        case TRANSACTION_setVcuCdcuChargeGunCommand /* 1466 */:
                            return onTransact$setVcuCdcuChargeGunCommand$(data, reply);
                        case TRANSACTION_getVcuCdcuChargeGunStatus /* 1467 */:
                            return onTransact$getVcuCdcuChargeGunStatus$(data, reply);
                        case TRANSACTION_setVcuDcPreWarmSwitchStatus /* 1468 */:
                            return onTransact$setVcuDcPreWarmSwitchStatus$(data, reply);
                        case TRANSACTION_getVcuDcPreWarmSwitchStatus /* 1469 */:
                            return onTransact$getVcuDcPreWarmSwitchStatus$(data, reply);
                        case TRANSACTION_setVcuDcPreWarmRequestStatus /* 1470 */:
                            return onTransact$setVcuDcPreWarmRequestStatus$(data, reply);
                        case TRANSACTION_getVcuDcPreWarmRequestStatus /* 1471 */:
                            return onTransact$getVcuDcPreWarmRequestStatus$(data, reply);
                        case TRANSACTION_getVcuDcPreWarmInStatus /* 1472 */:
                            return onTransact$getVcuDcPreWarmInStatus$(data, reply);
                        case TRANSACTION_getBcmTemporaryStopLockActivateStatus /* 1473 */:
                            return onTransact$getBcmTemporaryStopLockActivateStatus$(data, reply);
                        case TRANSACTION_getMcuLluPowerRequestSwitchStatus /* 1474 */:
                            return onTransact$getMcuLluPowerRequestSwitchStatus$(data, reply);
                        case TRANSACTION_getVcuDischargeQuantityFloat /* 1475 */:
                            return onTransact$getVcuDischargeQuantityFloat$(data, reply);
                        case TRANSACTION_getVcuChargeSocQuantityFloat /* 1476 */:
                            return onTransact$getVcuChargeSocQuantityFloat$(data, reply);
                        case TRANSACTION_getBcmFootKickSwitchStatus /* 1477 */:
                            return onTransact$getBcmFootKickSwitchStatus$(data, reply);
                        case TRANSACTION_setBcmFrontMirrorHeatSwitchStatus /* 1478 */:
                            return onTransact$setBcmFrontMirrorHeatSwitchStatus$(data, reply);
                        case TRANSACTION_getBcmFrontMirrorHeatSwitchStatus /* 1479 */:
                            return onTransact$getBcmFrontMirrorHeatSwitchStatus$(data, reply);
                        case TRANSACTION_setBcmRearWiperServiceSwitchStatus /* 1480 */:
                            return onTransact$setBcmRearWiperServiceSwitchStatus$(data, reply);
                        case TRANSACTION_getBcmRearWiperServiceSwitchStatus /* 1481 */:
                            return onTransact$getBcmRearWiperServiceSwitchStatus$(data, reply);
                        case TRANSACTION_setBcmSteeringWheelHeatingStatus /* 1482 */:
                            return onTransact$setBcmSteeringWheelHeatingStatus$(data, reply);
                        case TRANSACTION_getBcmSteeringWheelHeatingStatus /* 1483 */:
                            return onTransact$getBcmSteeringWheelHeatingStatus$(data, reply);
                        case TRANSACTION_setBcmLeftChildLockSwitchStatus /* 1484 */:
                            return onTransact$setBcmLeftChildLockSwitchStatus$(data, reply);
                        case TRANSACTION_getBcmLeftChildLockSwitchStatus /* 1485 */:
                            return onTransact$getBcmLeftChildLockSwitchStatus$(data, reply);
                        case TRANSACTION_setBcmRightChildLockSwitchStatus /* 1486 */:
                            return onTransact$setBcmRightChildLockSwitchStatus$(data, reply);
                        case TRANSACTION_getBcmRightChildLockSwitchStatus /* 1487 */:
                            return onTransact$getBcmRightChildLockSwitchStatus$(data, reply);
                        case TRANSACTION_setAmpPowerRequestSwitchStatus /* 1488 */:
                            return onTransact$setAmpPowerRequestSwitchStatus$(data, reply);
                        case TRANSACTION_getAmpPowerRequestSwitchStatus /* 1489 */:
                            return onTransact$getAmpPowerRequestSwitchStatus$(data, reply);
                        case TRANSACTION_setAtlPowerRequestSwitchStatus /* 1490 */:
                            return onTransact$setAtlPowerRequestSwitchStatus$(data, reply);
                        case TRANSACTION_getAtlLrPowerRequestSwitchStatus /* 1491 */:
                            return onTransact$getAtlLrPowerRequestSwitchStatus$(data, reply);
                        case TRANSACTION_setBcmLockHazardLightSwitchStatus /* 1492 */:
                            return onTransact$setBcmLockHazardLightSwitchStatus$(data, reply);
                        case TRANSACTION_getBcmLockHazardLightSwitchStatus /* 1493 */:
                            return onTransact$getBcmLockHazardLightSwitchStatus$(data, reply);
                        case TRANSACTION_setBcmLockHornSwitchStatus /* 1494 */:
                            return onTransact$setBcmLockHornSwitchStatus$(data, reply);
                        case TRANSACTION_getBcmLockHornSwitchStatus /* 1495 */:
                            return onTransact$getBcmLockHornSwitchStatus$(data, reply);
                        case TRANSACTION_setBcmLockAvasSwitchStatus /* 1496 */:
                            return onTransact$setBcmLockAvasSwitchStatus$(data, reply);
                        case TRANSACTION_getBcmLockAvasSwitchStatus /* 1497 */:
                            return onTransact$getBcmLockAvasSwitchStatus$(data, reply);
                        case TRANSACTION_setBcmDomeLightModeStatus /* 1498 */:
                            return onTransact$setBcmDomeLightModeStatus$(data, reply);
                        case TRANSACTION_getBcmDomeLightModeStatus /* 1499 */:
                            return onTransact$getBcmDomeLightModeStatus$(data, reply);
                        case 1500:
                            return onTransact$setBcmDomeLightBrightLevel$(data, reply);
                        case TRANSACTION_getBcmDomeLightBrightLevel /* 1501 */:
                            return onTransact$getBcmDomeLightBrightLevel$(data, reply);
                        case TRANSACTION_setBcmFrontLeftDomeLightSwitchStatus /* 1502 */:
                            return onTransact$setBcmFrontLeftDomeLightSwitchStatus$(data, reply);
                        case TRANSACTION_getBcmFrontLeftDomeLightSwitchStatus /* 1503 */:
                            return onTransact$getBcmFrontLeftDomeLightSwitchStatus$(data, reply);
                        case TRANSACTION_setBcmFrontRightDomeLightSwitchStatus /* 1504 */:
                            return onTransact$setBcmFrontRightDomeLightSwitchStatus$(data, reply);
                        case TRANSACTION_getBcmFrontRightDomeLightSwitchStatus /* 1505 */:
                            return onTransact$getBcmFrontRightDomeLightSwitchStatus$(data, reply);
                        case TRANSACTION_setBcmRearLeftDomeLightSwitchStatus /* 1506 */:
                            return onTransact$setBcmRearLeftDomeLightSwitchStatus$(data, reply);
                        case TRANSACTION_getBcmRearLeftDomeLightSwitchStatus /* 1507 */:
                            return onTransact$getBcmRearLeftDomeLightSwitchStatus$(data, reply);
                        case TRANSACTION_setBcmRearRightDomeLightSwitchStatus /* 1508 */:
                            return onTransact$setBcmRearRightDomeLightSwitchStatus$(data, reply);
                        case TRANSACTION_getBcmRearRightDomeLightSwitchStatus /* 1509 */:
                            return onTransact$getBcmRearRightDomeLightSwitchStatus$(data, reply);
                        case TRANSACTION_setBcmFootKickSwitchStatus /* 1510 */:
                            return onTransact$setBcmFootKickSwitchStatus$(data, reply);
                        case TRANSACTION_setMsmPassengerSeatTitlLevelOff /* 1511 */:
                            return onTransact$setMsmPassengerSeatTitlLevelOff$(data, reply);
                        case TRANSACTION_setBcmWashCarModeSwitchStatus /* 1513 */:
                            return onTransact$setBcmWashCarModeSwitchStatus$(data, reply);
                        case TRANSACTION_setBcmHeadLampLevelingReqValue /* 1514 */:
                            return onTransact$setBcmHeadLampLevelingReqValue$(data, reply);
                        case TRANSACTION_getBcmHeadLampLevelingCtrlMode /* 1515 */:
                            return onTransact$getBcmHeadLampLevelingCtrlMode$(data, reply);
                        case TRANSACTION_getBcmHeadLampCtrlLevel /* 1516 */:
                            return onTransact$getBcmHeadLampCtrlLevel$(data, reply);
                        case TRANSACTION_setBcmTrunkOpenRequestPosition /* 1518 */:
                            return onTransact$setBcmTrunkOpenRequestPosition$(data, reply);
                        case TRANSACTION_setBcmTrunkSetPositionRequest /* 1519 */:
                            return onTransact$setBcmTrunkSetPositionRequest$(data, reply);
                        case TRANSACTION_setAtlSwitchStatus /* 1520 */:
                            return onTransact$setAtlSwitchStatus$(data, reply);
                        case TRANSACTION_getAtlSwitchStatus /* 1521 */:
                            return onTransact$getAtlSwitchStatus$(data, reply);
                        case TRANSACTION_setAtlLin2Data /* 1522 */:
                            return onTransact$setAtlLin2Data$(data, reply);
                        case TRANSACTION_setAtlLin3Data /* 1523 */:
                            return onTransact$setAtlLin3Data$(data, reply);
                        case TRANSACTION_getMsmSecrowLtSeatTiltPosition /* 1524 */:
                            return onTransact$getMsmSecrowLtSeatTiltPosition$(data, reply);
                        case TRANSACTION_getMsmSecrowRtSeatTiltPosition /* 1525 */:
                            return onTransact$getMsmSecrowRtSeatTiltPosition$(data, reply);
                        case TRANSACTION_getMsmPassengerSeatCushExtPosition /* 1526 */:
                            return onTransact$getMsmPassengerSeatCushExtPosition$(data, reply);
                        case TRANSACTION_getMsmDriverSeatCushTiltPosition /* 1527 */:
                            return onTransact$getMsmDriverSeatCushTiltPosition$(data, reply);
                        case TRANSACTION_setBcmTrailerHitchSwitchStatus /* 1529 */:
                            return onTransact$setBcmTrailerHitchSwitchStatus$(data, reply);
                        case TRANSACTION_getBcmTrailerHitchSwitchStatus /* 1530 */:
                            return onTransact$getBcmTrailerHitchSwitchStatus$(data, reply);
                        case TRANSACTION_getBcmLeftRightRearMirrorFoldOutputStatus /* 1531 */:
                            return onTransact$getBcmLeftRightRearMirrorFoldOutputStatus$(data, reply);
                        case TRANSACTION_setBcmPassengerSeatBlowLevel /* 1532 */:
                            return onTransact$setBcmPassengerSeatBlowLevel$(data, reply);
                        case TRANSACTION_getBcmPassengerSeatBlowLevel /* 1533 */:
                            return onTransact$getBcmPassengerSeatBlowLevel$(data, reply);
                        case TRANSACTION_setHvacSfsTypeMode /* 1534 */:
                            return onTransact$setHvacSfsTypeMode$(data, reply);
                        case TRANSACTION_setHvacSfsChannelResetRequest /* 1535 */:
                            return onTransact$setHvacSfsChannelResetRequest$(data, reply);
                        case 1536:
                            return onTransact$setBcmEngineeringModeStatus$(data, reply);
                        case 1537:
                            return onTransact$getBcmEngineeringModeStatus$(data, reply);
                        case 1538:
                            return onTransact$setBcmTransportModeSwitchStatus$(data, reply);
                        case 1539:
                            return onTransact$setBcmAsTrailerModeSwitchStatus$(data, reply);
                        case 1540:
                            return onTransact$setMsmDriverSeatCushTiltPosition$(data, reply);
                        case 1541:
                            return onTransact$setMsmPassengerSeatCushExtPosition$(data, reply);
                        case 1542:
                            return onTransact$setEspTsmSwitchStatus$(data, reply);
                        case 1543:
                            return onTransact$setXpuScpSwitchStatus$(data, reply);
                        case TRANSACTION_getXpuScpSwitchStatus /* 1544 */:
                            return onTransact$getXpuScpSwitchStatus$(data, reply);
                        case TRANSACTION_setXpuRaebSwitchStatus /* 1545 */:
                            return onTransact$setXpuRaebSwitchStatus$(data, reply);
                        case TRANSACTION_getXpuRaebSwitchStatus /* 1546 */:
                            return onTransact$getXpuRaebSwitchStatus$(data, reply);
                        case TRANSACTION_getBcmHeadLampLevelingReqValue /* 1547 */:
                            return onTransact$getBcmHeadLampLevelingReqValue$(data, reply);
                        case TRANSACTION_setBcmColumnVerticalMove /* 1548 */:
                            return onTransact$setBcmColumnVerticalMove$(data, reply);
                        case TRANSACTION_setBcmColumnHorizonalMove /* 1549 */:
                            return onTransact$setBcmColumnHorizonalMove$(data, reply);
                        case TRANSACTION_getBcmTrunkSetPositionResponcePosition /* 1550 */:
                            return onTransact$getBcmTrunkSetPositionResponcePosition$(data, reply);
                        case TRANSACTION_getBcmColumnVerticalPosition /* 1551 */:
                            return onTransact$getBcmColumnVerticalPosition$(data, reply);
                        case TRANSACTION_getBcmColumnHorizonalPosition /* 1552 */:
                            return onTransact$getBcmColumnHorizonalPosition$(data, reply);
                        case TRANSACTION_setVcuNaviDestInfo /* 1553 */:
                            return onTransact$setVcuNaviDestInfo$(data, reply);
                        case TRANSACTION_setVcuNaviDestType /* 1554 */:
                            return onTransact$setVcuNaviDestType$(data, reply);
                        case TRANSACTION_setVcuNaviRemainDistance /* 1555 */:
                            return onTransact$setVcuNaviRemainDistance$(data, reply);
                        case TRANSACTION_setVcuNaviPathId /* 1556 */:
                            return onTransact$setVcuNaviPathId$(data, reply);
                        case TRANSACTION_setVcuNaviType /* 1557 */:
                            return onTransact$setVcuNaviType$(data, reply);
                        case TRANSACTION_setVcuNaviKValue /* 1558 */:
                            return onTransact$setVcuNaviKValue$(data, reply);
                        case TRANSACTION_setAvasLockUnlockSoundSwitchStatus /* 1559 */:
                            return onTransact$setAvasLockUnlockSoundSwitchStatus$(data, reply);
                        case TRANSACTION_getAvasLockUnlockSoundSwitchStatus /* 1560 */:
                            return onTransact$getAvasLockUnlockSoundSwitchStatus$(data, reply);
                        case TRANSACTION_setAvasChargeSoundSwitchStatus /* 1561 */:
                            return onTransact$setAvasChargeSoundSwitchStatus$(data, reply);
                        case TRANSACTION_getAvasChargeSoundSwitchStatus /* 1562 */:
                            return onTransact$getAvasChargeSoundSwitchStatus$(data, reply);
                        case TRANSACTION_setAvasSocSoundSwitchStatus /* 1563 */:
                            return onTransact$setAvasSocSoundSwitchStatus$(data, reply);
                        case TRANSACTION_getAvasSocSoundSwitchStatus /* 1564 */:
                            return onTransact$getAvasSocSoundSwitchStatus$(data, reply);
                        case TRANSACTION_setAvasUnlockSoundEffect /* 1565 */:
                            return onTransact$setAvasUnlockSoundEffect$(data, reply);
                        case TRANSACTION_getAvasUnlockSoundEffect /* 1566 */:
                            return onTransact$getAvasUnlockSoundEffect$(data, reply);
                        case TRANSACTION_setAvasLockSoundEffect /* 1567 */:
                            return onTransact$setAvasLockSoundEffect$(data, reply);
                        case TRANSACTION_getAvasLockSoundEffect /* 1568 */:
                            return onTransact$getAvasLockSoundEffect$(data, reply);
                        case TRANSACTION_getAvasMcuAvasRunnningStatus /* 1569 */:
                            return onTransact$getAvasMcuAvasRunnningStatus$(data, reply);
                        case TRANSACTION_getAvasUnlockSoundSpeedVolume /* 1570 */:
                            return onTransact$getAvasUnlockSoundSpeedVolume$(data, reply);
                        case TRANSACTION_getAvasChargeSoundSpeedVolume /* 1571 */:
                            return onTransact$getAvasChargeSoundSpeedVolume$(data, reply);
                        case TRANSACTION_getAvasSocSoundSpeedVolume /* 1572 */:
                            return onTransact$getAvasSocSoundSpeedVolume$(data, reply);
                        case TRANSACTION_setBcmColumnVerticalPosition /* 1573 */:
                            return onTransact$setBcmColumnVerticalPosition$(data, reply);
                        case TRANSACTION_setBcmColumnHorizonalPosition /* 1574 */:
                            return onTransact$setBcmColumnHorizonalPosition$(data, reply);
                        case TRANSACTION_getScuLeftRightBlindSpotDetectionSwitchStatus /* 1575 */:
                            return onTransact$getScuLeftRightBlindSpotDetectionSwitchStatus$(data, reply);
                        case TRANSACTION_getScuLeftRightRearCollisionSwitchStatus /* 1576 */:
                            return onTransact$getScuLeftRightRearCollisionSwitchStatus$(data, reply);
                        case TRANSACTION_setVcuNaviRemainTime /* 1577 */:
                            return onTransact$setVcuNaviRemainTime$(data, reply);
                        case TRANSACTION_getBcmWindowsInitSignalLostRequestStatus /* 1578 */:
                            return onTransact$getBcmWindowsInitSignalLostRequestStatus$(data, reply);
                        case TRANSACTION_getScuLeftRightDoorOpenWarningSwitchStatus /* 1579 */:
                            return onTransact$getScuLeftRightDoorOpenWarningSwitchStatus$(data, reply);
                        case TRANSACTION_getScuLeftRightRearCrossTrafficAlertStatus /* 1580 */:
                            return onTransact$getScuLeftRightRearCrossTrafficAlertStatus$(data, reply);
                        case TRANSACTION_setScuNaviRoadConnectAttrib /* 1581 */:
                            return onTransact$setScuNaviRoadConnectAttrib$(data, reply);
                        case TRANSACTION_getBmsChargeMode /* 1582 */:
                            return onTransact$getBmsChargeMode$(data, reply);
                        case TRANSACTION_getDcdcInputVoltage /* 1583 */:
                            return onTransact$getDcdcInputVoltage$(data, reply);
                        case TRANSACTION_getDcdcInputCurrent /* 1584 */:
                            return onTransact$getDcdcInputCurrent$(data, reply);
                        case TRANSACTION_getHavcCompressorConsumePower /* 1585 */:
                            return onTransact$getHavcCompressorConsumePower$(data, reply);
                        case TRANSACTION_getHavcHvhConsumePower /* 1586 */:
                            return onTransact$getHavcHvhConsumePower$(data, reply);
                        case TRANSACTION_getBcmTrunkOpennerStatus /* 1587 */:
                            return onTransact$getBcmTrunkOpennerStatus$(data, reply);
                        case TRANSACTION_getBcmBonnetStatus /* 1588 */:
                            return onTransact$getBcmBonnetStatus$(data, reply);
                        case TRANSACTION_getVcuVirtualAccPedalStatus /* 1589 */:
                            return onTransact$getVcuVirtualAccPedalStatus$(data, reply);
                        case TRANSACTION_getMcuRvcEnable /* 1590 */:
                            return onTransact$getMcuRvcEnable$(data, reply);
                        case TRANSACTION_setMcuRvcEnable /* 1591 */:
                            return onTransact$setMcuRvcEnable$(data, reply);
                        case TRANSACTION_setMcuRvcVersion /* 1592 */:
                            return onTransact$setMcuRvcVersion$(data, reply);
                        case TRANSACTION_setAmpChannelSwitchControlStatus /* 1593 */:
                            return onTransact$setAmpChannelSwitchControlStatus$(data, reply);
                        case TRANSACTION_setAmpChannelVolumeControlValue /* 1594 */:
                            return onTransact$setAmpChannelVolumeControlValue$(data, reply);
                        case TRANSACTION_setAmpGroupSwitchControlStatus /* 1595 */:
                            return onTransact$setAmpGroupSwitchControlStatus$(data, reply);
                        case TRANSACTION_setAmpGroupVolumeControlValue /* 1596 */:
                            return onTransact$setAmpGroupVolumeControlValue$(data, reply);
                        case TRANSACTION_getBmsBatteryChargeStatus /* 1597 */:
                            return onTransact$getBmsBatteryChargeStatus$(data, reply);
                        case TRANSACTION_getBmsAcChargeStopReason /* 1598 */:
                            return onTransact$getBmsAcChargeStopReason$(data, reply);
                        case TRANSACTION_getVcuAsDriveModeStatus /* 1599 */:
                            return onTransact$getVcuAsDriveModeStatus$(data, reply);
                        case TRANSACTION_getEspTsmSwitchStatus /* 1600 */:
                            return onTransact$getEspTsmSwitchStatus$(data, reply);
                        case TRANSACTION_setMsmPassengerWelcomeSwitch /* 1601 */:
                            return onTransact$setMsmPassengerWelcomeSwitch$(data, reply);
                        case TRANSACTION_setXpuNaviTypeStatus /* 1602 */:
                            return onTransact$setXpuNaviTypeStatus$(data, reply);
                        case TRANSACTION_setBcmColumnPositionMove /* 1603 */:
                            return onTransact$setBcmColumnPositionMove$(data, reply);
                        case TRANSACTION_getXpuRaebActiveStatus /* 1604 */:
                            return onTransact$getXpuRaebActiveStatus$(data, reply);
                        case TRANSACTION_sendXpuTransferVpaCmd /* 1605 */:
                            return onTransact$sendXpuTransferVpaCmd$(data, reply);
                        case TRANSACTION_sendXpuTransferVpaAbInfo /* 1606 */:
                            return onTransact$sendXpuTransferVpaAbInfo$(data, reply);
                        case TRANSACTION_getEspOffRoadSwitchStatus /* 1607 */:
                            return onTransact$getEspOffRoadSwitchStatus$(data, reply);
                        case TRANSACTION_setBcmWindowLockState /* 1608 */:
                            return onTransact$setBcmWindowLockState$(data, reply);
                        case TRANSACTION_getVcuDepolarizeStatus /* 1609 */:
                            return onTransact$getVcuDepolarizeStatus$(data, reply);
                        case TRANSACTION_setXpuNraSwitchStatus /* 1610 */:
                            return onTransact$setXpuNraSwitchStatus$(data, reply);
                        case TRANSACTION_getXpuNraSwitchStatus /* 1611 */:
                            return onTransact$getXpuNraSwitchStatus$(data, reply);
                        case TRANSACTION_getXpuNraControlStatus /* 1612 */:
                            return onTransact$getXpuNraControlStatus$(data, reply);
                        case TRANSACTION_setMsmSecrowLtSeatTiltPosition /* 1613 */:
                            return onTransact$setMsmSecrowLtSeatTiltPosition$(data, reply);
                        case TRANSACTION_setMsmSecrowRtSeatTiltPosition /* 1614 */:
                            return onTransact$setMsmSecrowRtSeatTiltPosition$(data, reply);
                        case TRANSACTION_setMsmPassengerSeatLumbVerticalPos /* 1615 */:
                            return onTransact$setMsmPassengerSeatLumbVerticalPos$(data, reply);
                        case TRANSACTION_setMsmPassengerSeatLumbHorzPos /* 1616 */:
                            return onTransact$setMsmPassengerSeatLumbHorzPos$(data, reply);
                        case TRANSACTION_setMsmSecRowLeftSeatCushExtReq /* 1617 */:
                            return onTransact$setMsmSecRowLeftSeatCushExtReq$(data, reply);
                        case TRANSACTION_setMsmSecRowRightSeatCushExtReq /* 1618 */:
                            return onTransact$setMsmSecRowRightSeatCushExtReq$(data, reply);
                        case TRANSACTION_setMsmSecRowLeftSeatCushExtPosition /* 1619 */:
                            return onTransact$setMsmSecRowLeftSeatCushExtPosition$(data, reply);
                        case TRANSACTION_getMsmSecRowLeftSeatCushExtPosition /* 1620 */:
                            return onTransact$getMsmSecRowLeftSeatCushExtPosition$(data, reply);
                        case TRANSACTION_setMsmSecRowRightSeatCushExtPosition /* 1621 */:
                            return onTransact$setMsmSecRowRightSeatCushExtPosition$(data, reply);
                        case TRANSACTION_getMsmSecRowRightSeatCushExtPosition /* 1622 */:
                            return onTransact$getMsmSecRowRightSeatCushExtPosition$(data, reply);
                        case TRANSACTION_setMsmSecrowRightSeatUnlockReq /* 1623 */:
                            return onTransact$setMsmSecrowRightSeatUnlockReq$(data, reply);
                        case TRANSACTION_setMsmSecrowLeftSeatUnlockReq /* 1624 */:
                            return onTransact$setMsmSecrowLeftSeatUnlockReq$(data, reply);
                        case TRANSACTION_setVcuBatBumpRecrdStatus /* 1625 */:
                            return onTransact$setVcuBatBumpRecrdStatus$(data, reply);
                        case TRANSACTION_getVcuBatBumpRecrdRequest /* 1626 */:
                            return onTransact$getVcuBatBumpRecrdRequest$(data, reply);
                        case TRANSACTION_getVcuBrakeLightOnOffStatus /* 1627 */:
                            return onTransact$getVcuBrakeLightOnOffStatus$(data, reply);
                        case TRANSACTION_setXpuCityNgpSwitchStatus /* 1628 */:
                            return onTransact$setXpuCityNgpSwitchStatus$(data, reply);
                        case TRANSACTION_getXpuCityNgpSwitchStatus /* 1629 */:
                            return onTransact$getXpuCityNgpSwitchStatus$(data, reply);
                        case TRANSACTION_setBcmSwsControlSceneStatus /* 1630 */:
                            return onTransact$setBcmSwsControlSceneStatus$(data, reply);
                        case TRANSACTION_getVcuWltpAvailableDrivingDistanceFloat /* 1631 */:
                            return onTransact$getVcuWltpAvailableDrivingDistanceFloat$(data, reply);
                        case TRANSACTION_getVcuCltcAvailableDrivingDistanceFloat /* 1632 */:
                            return onTransact$getVcuCltcAvailableDrivingDistanceFloat$(data, reply);
                        case TRANSACTION_sendXpuGeoFencingConfig /* 1633 */:
                            return onTransact$sendXpuGeoFencingConfig$(data, reply);
                        case TRANSACTION_sendXpuCountryCodeInfo /* 1634 */:
                            return onTransact$sendXpuCountryCodeInfo$(data, reply);
                        case TRANSACTION_setVcuSsaSwitchStatus /* 1635 */:
                            return onTransact$setVcuSsaSwitchStatus$(data, reply);
                        case TRANSACTION_getVcuSsaSwitchStatus /* 1636 */:
                            return onTransact$getVcuSsaSwitchStatus$(data, reply);
                        case TRANSACTION_setVcuPGearLimOffSwitchStatus /* 1637 */:
                            return onTransact$setVcuPGearLimOffSwitchStatus$(data, reply);
                        case TRANSACTION_getVcuSuperChargeFlag /* 1638 */:
                            return onTransact$getVcuSuperChargeFlag$(data, reply);
                        case TRANSACTION_getBcmRearWiperMotorStatus /* 1639 */:
                            return onTransact$getBcmRearWiperMotorStatus$(data, reply);
                        case TRANSACTION_setBcmCustomerModeFlagSwitchStatus /* 1640 */:
                            return onTransact$setBcmCustomerModeFlagSwitchStatus$(data, reply);
                        case TRANSACTION_setMsmDriverSeatMassgProgMode /* 1641 */:
                            return onTransact$setMsmDriverSeatMassgProgMode$(data, reply);
                        case TRANSACTION_getMsmDriverSeatMassgProgMode /* 1642 */:
                            return onTransact$getMsmDriverSeatMassgProgMode$(data, reply);
                        case TRANSACTION_setMsmDriverSeatMassgIntensity /* 1643 */:
                            return onTransact$setMsmDriverSeatMassgIntensity$(data, reply);
                        case TRANSACTION_getMsmDriverSeatMassgIntensity /* 1644 */:
                            return onTransact$getMsmDriverSeatMassgIntensity$(data, reply);
                        case TRANSACTION_setMsmPassengerSeatMassgProgMode /* 1645 */:
                            return onTransact$setMsmPassengerSeatMassgProgMode$(data, reply);
                        case TRANSACTION_getMsmPassengerSeatMassgProgMode /* 1646 */:
                            return onTransact$getMsmPassengerSeatMassgProgMode$(data, reply);
                        case TRANSACTION_setMsmPassengerSeatMassgIntensity /* 1647 */:
                            return onTransact$setMsmPassengerSeatMassgIntensity$(data, reply);
                        case TRANSACTION_getMsmPassengerSeatMassgIntensity /* 1648 */:
                            return onTransact$getMsmPassengerSeatMassgIntensity$(data, reply);
                        case TRANSACTION_setMsmSecRowLeftSeatMassgProgMode /* 1649 */:
                            return onTransact$setMsmSecRowLeftSeatMassgProgMode$(data, reply);
                        case TRANSACTION_getMsmSecRowLeftSeatMassgProgMode /* 1650 */:
                            return onTransact$getMsmSecRowLeftSeatMassgProgMode$(data, reply);
                        case TRANSACTION_setMsmSecRowLeftSeatMassgIntensity /* 1651 */:
                            return onTransact$setMsmSecRowLeftSeatMassgIntensity$(data, reply);
                        case TRANSACTION_getMsmSecRowLeftSeatMassgIntensity /* 1652 */:
                            return onTransact$getMsmSecRowLeftSeatMassgIntensity$(data, reply);
                        case TRANSACTION_setMsmSecRowRightSeatMassgProgMode /* 1653 */:
                            return onTransact$setMsmSecRowRightSeatMassgProgMode$(data, reply);
                        case TRANSACTION_getMsmSecRowRightSeatMassgProgMode /* 1654 */:
                            return onTransact$getMsmSecRowRightSeatMassgProgMode$(data, reply);
                        case TRANSACTION_setMsmSecRowRightSeatMassgIntensity /* 1655 */:
                            return onTransact$setMsmSecRowRightSeatMassgIntensity$(data, reply);
                        case TRANSACTION_getMsmSecRowRightSeatMassgIntensity /* 1656 */:
                            return onTransact$getMsmSecRowRightSeatMassgIntensity$(data, reply);
                        case TRANSACTION_setAmpDolbyAtomsSwitchStatus /* 1658 */:
                            return onTransact$setAmpDolbyAtomsSwitchStatus$(data, reply);
                        case TRANSACTION_setAmpEffectStatus /* 1659 */:
                            return onTransact$setAmpEffectStatus$(data, reply);
                        case TRANSACTION_getAmpEffectStatus /* 1660 */:
                            return onTransact$getAmpEffectStatus$(data, reply);
                        case TRANSACTION_setAmpDynSdvcLevel /* 1661 */:
                            return onTransact$setAmpDynSdvcLevel$(data, reply);
                        case TRANSACTION_getAmpDynSdvcLevel /* 1662 */:
                            return onTransact$getAmpDynSdvcLevel$(data, reply);
                        case TRANSACTION_setAmpDyn3DEffectLevel /* 1663 */:
                            return onTransact$setAmpDyn3DEffectLevel$(data, reply);
                        case TRANSACTION_getAmpDyn3DEffectLevel /* 1664 */:
                            return onTransact$getAmpDyn3DEffectLevel$(data, reply);
                        case TRANSACTION_setXpuSlifSoundStatus /* 1665 */:
                            return onTransact$setXpuSlifSoundStatus$(data, reply);
                        case TRANSACTION_getXpuSlifSoundStatus /* 1666 */:
                            return onTransact$getXpuSlifSoundStatus$(data, reply);
                        case TRANSACTION_setXpuSlwfVoiceStatus /* 1667 */:
                            return onTransact$setXpuSlwfVoiceStatus$(data, reply);
                        case TRANSACTION_getXpuSlwfVoiceStatus /* 1668 */:
                            return onTransact$getXpuSlwfVoiceStatus$(data, reply);
                        case TRANSACTION_getXpuNgpSwitchTransitionStatus /* 1669 */:
                            return onTransact$getXpuNgpSwitchTransitionStatus$(data, reply);
                        case TRANSACTION_setScuNaviDangerAreaRDInfo /* 1670 */:
                            return onTransact$setScuNaviDangerAreaRDInfo$(data, reply);
                        case TRANSACTION_saveMsmPassengerAllPositionsToMcu /* 1671 */:
                            return onTransact$saveMsmPassengerAllPositionsToMcu$(data, reply);
                        case TRANSACTION_getXpuHeadPoseData /* 1672 */:
                            return onTransact$getXpuHeadPoseData$(data, reply);
                        case TRANSACTION_getXpuHmiDopRemind /* 1673 */:
                            return onTransact$getXpuHmiDopRemind$(data, reply);
                        case TRANSACTION_setMsmDriverSeatMassgElem /* 1674 */:
                            return onTransact$setMsmDriverSeatMassgElem$(data, reply);
                        case TRANSACTION_setMsmPassengerSeatMassgElem /* 1675 */:
                            return onTransact$setMsmPassengerSeatMassgElem$(data, reply);
                        case TRANSACTION_setMsmSecRowLeftSeatMassgElem /* 1676 */:
                            return onTransact$setMsmSecRowLeftSeatMassgElem$(data, reply);
                        case TRANSACTION_setMsmSecRowRightSeatMassgElem /* 1677 */:
                            return onTransact$setMsmSecRowRightSeatMassgElem$(data, reply);
                        case TRANSACTION_getScuDoorsLRadarDisplayLevel /* 1678 */:
                            return onTransact$getScuDoorsLRadarDisplayLevel$(data, reply);
                        case TRANSACTION_getScuDoorsRRadarDisplayLevel /* 1679 */:
                            return onTransact$getScuDoorsRRadarDisplayLevel$(data, reply);
                        case TRANSACTION_setXpuNgpULCSwMode /* 1680 */:
                            return onTransact$setXpuNgpULCSwMode$(data, reply);
                        case TRANSACTION_getXpuNgpULCSwMode /* 1681 */:
                            return onTransact$getXpuNgpULCSwMode$(data, reply);
                        case TRANSACTION_setXpuNgpOptimalLaneSw /* 1682 */:
                            return onTransact$setXpuNgpOptimalLaneSw$(data, reply);
                        case TRANSACTION_getXpuNgpOptimalLaneSw /* 1683 */:
                            return onTransact$getXpuNgpOptimalLaneSw$(data, reply);
                        case TRANSACTION_setXpuISLCDriverSet /* 1684 */:
                            return onTransact$setXpuISLCDriverSet$(data, reply);
                        case TRANSACTION_getXpuISLCDriverSet /* 1685 */:
                            return onTransact$getXpuISLCDriverSet$(data, reply);
                        case TRANSACTION_setMsmSecRowLeftSeatAllPos /* 1694 */:
                            return onTransact$setMsmSecRowLeftSeatAllPos$(data, reply);
                        case TRANSACTION_setMsmSecRowRightSeatAllPos /* 1695 */:
                            return onTransact$setMsmSecRowRightSeatAllPos$(data, reply);
                        case TRANSACTION_setIcmWiperRainDetectSensitivity /* 1696 */:
                            return onTransact$setIcmWiperRainDetectSensitivity$(data, reply);
                        case TRANSACTION_getMsmDriverSeatMassgElem /* 1697 */:
                            return onTransact$getMsmDriverSeatMassgElem$(data, reply);
                        case TRANSACTION_getMsmPassengerSeatMassgElem /* 1698 */:
                            return onTransact$getMsmPassengerSeatMassgElem$(data, reply);
                        case TRANSACTION_getMsmSecRowLeftSeatMassgElem /* 1699 */:
                            return onTransact$getMsmSecRowLeftSeatMassgElem$(data, reply);
                        case TRANSACTION_getMsmSecRowRightSeatMassgElem /* 1700 */:
                            return onTransact$getMsmSecRowRightSeatMassgElem$(data, reply);
                        case TRANSACTION_getBcmAsAutoLevelingResult /* 1701 */:
                            return onTransact$getBcmAsAutoLevelingResult$(data, reply);
                        case TRANSACTION_getBcmTtmDenormalizeStatus /* 1702 */:
                            return onTransact$getBcmTtmDenormalizeStatus$(data, reply);
                        case TRANSACTION_getBcmTtmSystemErrorStatus /* 1703 */:
                            return onTransact$getBcmTtmSystemErrorStatus$(data, reply);
                        case TRANSACTION_setBcmAsCampingModeSwitchStatus /* 1704 */:
                            return onTransact$setBcmAsCampingModeSwitchStatus$(data, reply);
                        case TRANSACTION_getBcmAsCampingModeSwitchStatus /* 1705 */:
                            return onTransact$getBcmAsCampingModeSwitchStatus$(data, reply);
                        case TRANSACTION_getBcmHoistModeSwitchStatus /* 1706 */:
                            return onTransact$getBcmHoistModeSwitchStatus$(data, reply);
                        case TRANSACTION_getBcmAsYellowLampRequest /* 1707 */:
                            return onTransact$getBcmAsYellowLampRequest$(data, reply);
                        case TRANSACTION_getBcmAsRedLampRequest /* 1708 */:
                            return onTransact$getBcmAsRedLampRequest$(data, reply);
                        case TRANSACTION_getEspTsmFaultStatus /* 1709 */:
                            return onTransact$getEspTsmFaultStatus$(data, reply);
                        case TRANSACTION_getEspDtcFaultStatus /* 1710 */:
                            return onTransact$getEspDtcFaultStatus$(data, reply);
                        case TRANSACTION_getEspIbtFailureLampRequest /* 1711 */:
                            return onTransact$getEspIbtFailureLampRequest$(data, reply);
                        case TRANSACTION_getXpuNgpModeIndexMode /* 1712 */:
                            return onTransact$getXpuNgpModeIndexMode$(data, reply);
                        case TRANSACTION_getXpuModeIndexDefine /* 1713 */:
                            return onTransact$getXpuModeIndexDefine$(data, reply);
                        case TRANSACTION_setBcmColumnPositionSaveToMcu /* 1714 */:
                            return onTransact$setBcmColumnPositionSaveToMcu$(data, reply);
                        case TRANSACTION_setBcmTrailerModeSwitchStatus /* 1715 */:
                            return onTransact$setBcmTrailerModeSwitchStatus$(data, reply);
                        case TRANSACTION_setVcuXpedalCtrlMode /* 1716 */:
                            return onTransact$setVcuXpedalCtrlMode$(data, reply);
                        case TRANSACTION_getVcuXpedalCtrlMode /* 1717 */:
                            return onTransact$getVcuXpedalCtrlMode$(data, reply);
                        case TRANSACTION_setVcuXPortIntellCalcCfg /* 1718 */:
                            return onTransact$setVcuXPortIntellCalcCfg$(data, reply);
                        case TRANSACTION_getVcuXPortIntellCalcCfg /* 1719 */:
                            return onTransact$getVcuXPortIntellCalcCfg$(data, reply);
                        case TRANSACTION_getVcuXPortIntellCalcCfg20Hz /* 1720 */:
                            return onTransact$getVcuXPortIntellCalcCfg20Hz$(data, reply);
                        case TRANSACTION_getVcuXPortIntellCalcCfg50Hz /* 1721 */:
                            return onTransact$getVcuXPortIntellCalcCfg50Hz$(data, reply);
                        case TRANSACTION_getScuDoorsLRadarDistance /* 1722 */:
                            return onTransact$getScuDoorsLRadarDistance$(data, reply);
                        case TRANSACTION_getScuDoorsRRadarDistance /* 1723 */:
                            return onTransact$getScuDoorsRRadarDistance$(data, reply);
                        case TRANSACTION_getBcmAsLockModeStatus /* 1724 */:
                            return onTransact$getBcmAsLockModeStatus$(data, reply);
                        case TRANSACTION_getVcuKeyBatteryStatus /* 1725 */:
                            return onTransact$getVcuKeyBatteryStatus$(data, reply);
                        case TRANSACTION_getXpuIntelligentChargePortTipsType /* 1726 */:
                            return onTransact$getXpuIntelligentChargePortTipsType$(data, reply);
                        case TRANSACTION_getXpuIntelligentChargePortTtsBroadcastType /* 1727 */:
                            return onTransact$getXpuIntelligentChargePortTtsBroadcastType$(data, reply);
                        case TRANSACTION_getXpuIntelligentChargePortSystemToneType /* 1728 */:
                            return onTransact$getXpuIntelligentChargePortSystemToneType$(data, reply);
                        case TRANSACTION_getXpuAutoParkingTipsType /* 1729 */:
                            return onTransact$getXpuAutoParkingTipsType$(data, reply);
                        case TRANSACTION_getXpuAsLockScenario /* 1730 */:
                            return onTransact$getXpuAsLockScenario$(data, reply);
                        case TRANSACTION_getXpuIntelligentChargePortSystemStatus /* 1731 */:
                            return onTransact$getXpuIntelligentChargePortSystemStatus$(data, reply);
                        case TRANSACTION_getXpuSlaSpeedWarningStatus /* 1732 */:
                            return onTransact$getXpuSlaSpeedWarningStatus$(data, reply);
                        case TRANSACTION_getXpuScpChargePortCommandStatus /* 1733 */:
                            return onTransact$getXpuScpChargePortCommandStatus$(data, reply);
                        case TRANSACTION_setScuEventInfoRD /* 1734 */:
                            return onTransact$setScuEventInfoRD$(data, reply);
                        case TRANSACTION_getVcuNedcAvalibleDrivingDistanceFloat /* 1735 */:
                            return onTransact$getVcuNedcAvalibleDrivingDistanceFloat$(data, reply);
                        case TRANSACTION_getTboxPigeonNotification /* 1736 */:
                            return onTransact$getTboxPigeonNotification$(data, reply);
                        case TRANSACTION_getXpuXmartPigeonMode /* 1737 */:
                            return onTransact$getXpuXmartPigeonMode$(data, reply);
                        case TRANSACTION_setBcmAsDrivingMode /* 1738 */:
                            return onTransact$setBcmAsDrivingMode$(data, reply);
                        case TRANSACTION_setBcmAsSpecialDrivingMode /* 1739 */:
                            return onTransact$setBcmAsSpecialDrivingMode$(data, reply);
                        case TRANSACTION_getBcmAsWelcomeModeStatus /* 1740 */:
                            return onTransact$getBcmAsWelcomeModeStatus$(data, reply);
                        case TRANSACTION_getBcmAsEspPataRequestStatus /* 1741 */:
                            return onTransact$getBcmAsEspPataRequestStatus$(data, reply);
                        case TRANSACTION_getBcmAsTargetHeight /* 1742 */:
                            return onTransact$getBcmAsTargetHeight$(data, reply);
                        case TRANSACTION_getTboxEcallMuteRequest /* 1743 */:
                            return onTransact$getTboxEcallMuteRequest$(data, reply);
                        case TRANSACTION_getTboxEcallState /* 1744 */:
                            return onTransact$getTboxEcallState$(data, reply);
                        case TRANSACTION_setXpuElectricEyeSpeedLimit /* 1745 */:
                            return onTransact$setXpuElectricEyeSpeedLimit$(data, reply);
                        case TRANSACTION_setXpuElectricEyeSpeedDistance /* 1746 */:
                            return onTransact$setXpuElectricEyeSpeedDistance$(data, reply);
                        case TRANSACTION_setXpuMetaCountryCode /* 1747 */:
                            return onTransact$setXpuMetaCountryCode$(data, reply);
                        case TRANSACTION_getXpuAsTargetMinimumHeightRequest /* 1748 */:
                            return onTransact$getXpuAsTargetMinimumHeightRequest$(data, reply);
                        case TRANSACTION_getXpuAsTargetMaximumHeightRequest /* 1749 */:
                            return onTransact$getXpuAsTargetMaximumHeightRequest$(data, reply);
                        case TRANSACTION_sendPigeonAndXPURemoteAPHeartBeat /* 1750 */:
                            return onTransact$sendPigeonAndXPURemoteAPHeartBeat$(data, reply);
                        case TRANSACTION_sendPhoneRemoteAPEvent /* 1751 */:
                            return onTransact$sendPhoneRemoteAPEvent$(data, reply);
                        case TRANSACTION_getPhoneRemoteAPInformation /* 1752 */:
                            return onTransact$getPhoneRemoteAPInformation$(data, reply);
                        case TRANSACTION_setBcmTrailerModeStatus /* 1753 */:
                            return onTransact$setBcmTrailerModeStatus$(data, reply);
                        case TRANSACTION_setXpuMetaSpeedUnits /* 1754 */:
                            return onTransact$setXpuMetaSpeedUnits$(data, reply);
                        case TRANSACTION_setXpuEffectiveSpeedLimitType /* 1755 */:
                            return onTransact$setXpuEffectiveSpeedLimitType$(data, reply);
                        case TRANSACTION_getEpsTorqControlStatus /* 1756 */:
                            return onTransact$getEpsTorqControlStatus$(data, reply);
                        case TRANSACTION_getBcmAsHeightChangingStatus /* 1757 */:
                            return onTransact$getBcmAsHeightChangingStatus$(data, reply);
                        case TRANSACTION_getMcuRemindWarningStatus /* 1758 */:
                            return onTransact$getMcuRemindWarningStatus$(data, reply);
                        case TRANSACTION_sendIcmLogCompressRequest /* 1759 */:
                            return onTransact$sendIcmLogCompressRequest$(data, reply);
                        case TRANSACTION_getIcmLogCompressInformation /* 1760 */:
                            return onTransact$getIcmLogCompressInformation$(data, reply);
                        case TRANSACTION_getBcmAsModeAllowedCampingStatus /* 1761 */:
                            return onTransact$getBcmAsModeAllowedCampingStatus$(data, reply);
                        case TRANSACTION_setIcmModeInfoArray /* 1762 */:
                            return onTransact$setIcmModeInfoArray$(data, reply);
                        case TRANSACTION_getMsmDriverSeatLumberSwitchMode /* 1763 */:
                            return onTransact$getMsmDriverSeatLumberSwitchMode$(data, reply);
                        case TRANSACTION_getMsmDriverSeatLumberSwitchCenterPressStatus /* 1764 */:
                            return onTransact$getMsmDriverSeatLumberSwitchCenterPressStatus$(data, reply);
                        case TRANSACTION_getMsmPassengerSeatLumberSwitchMode /* 1765 */:
                            return onTransact$getMsmPassengerSeatLumberSwitchMode$(data, reply);
                        case TRANSACTION_getMsmPassengerSeatLumberSwitchCenterPressStatus /* 1766 */:
                            return onTransact$getMsmPassengerSeatLumberSwitchCenterPressStatus$(data, reply);
                        case TRANSACTION_sendRoutingForTboxRequest /* 1767 */:
                            return onTransact$sendRoutingForTboxRequest$(data, reply);
                        case TRANSACTION_getRoutingForTboxResponse /* 1768 */:
                            return onTransact$getRoutingForTboxResponse$(data, reply);
                        case TRANSACTION_sendTboxModemCaptureRequest /* 1769 */:
                            return onTransact$sendTboxModemCaptureRequest$(data, reply);
                        case TRANSACTION_getTboxModemCaptureResponse /* 1770 */:
                            return onTransact$getTboxModemCaptureResponse$(data, reply);
                        case TRANSACTION_sendStartCopyTboxLogRequest /* 1771 */:
                            return onTransact$sendStartCopyTboxLogRequest$(data, reply);
                        case TRANSACTION_getStartCopyTboxLogResponse /* 1772 */:
                            return onTransact$getStartCopyTboxLogResponse$(data, reply);
                        case TRANSACTION_sendFinishCopyTboxLogRequest /* 1773 */:
                            return onTransact$sendFinishCopyTboxLogRequest$(data, reply);
                        case TRANSACTION_getFinishCopyTboxLogResponse /* 1774 */:
                            return onTransact$getFinishCopyTboxLogResponse$(data, reply);
                        case TRANSACTION_getMsmPassengerWelcomeSwitch /* 1775 */:
                            return onTransact$getMsmPassengerWelcomeSwitch$(data, reply);
                        case TRANSACTION_getBcmFWiperMotorErr /* 1776 */:
                            return onTransact$getBcmFWiperMotorErr$(data, reply);
                        case TRANSACTION_getScuHmiDopRemind /* 1777 */:
                            return onTransact$getScuHmiDopRemind$(data, reply);
                        case TRANSACTION_setBcmSdcBrakeCloseDoorCfg /* 1779 */:
                            return onTransact$setBcmSdcBrakeCloseDoorCfg$(data, reply);
                        case TRANSACTION_getBcmSdcBrakeCloseDoorCfg /* 1780 */:
                            return onTransact$getBcmSdcBrakeCloseDoorCfg$(data, reply);
                        case TRANSACTION_getXpuLongLatPeriodData /* 1781 */:
                            return onTransact$getXpuLongLatPeriodData$(data, reply);
                        case TRANSACTION_getBcmCoverPlateStatus /* 1782 */:
                            return onTransact$getBcmCoverPlateStatus$(data, reply);
                        case TRANSACTION_setBcmGroupLedControlStatus /* 1783 */:
                            return onTransact$setBcmGroupLedControlStatus$(data, reply);
                        case TRANSACTION_getBcmGroupLedControlStatus /* 1784 */:
                            return onTransact$getBcmGroupLedControlStatus$(data, reply);
                        case TRANSACTION_setBcmGroupLedColor /* 1785 */:
                            return onTransact$setBcmGroupLedColor$(data, reply);
                        case TRANSACTION_getBcmGroupLedColor /* 1786 */:
                            return onTransact$getBcmGroupLedColor$(data, reply);
                        case TRANSACTION_setBcmGroupLedFadeTime /* 1787 */:
                            return onTransact$setBcmGroupLedFadeTime$(data, reply);
                        case TRANSACTION_setBcmGroupLedTemperature /* 1788 */:
                            return onTransact$setBcmGroupLedTemperature$(data, reply);
                        case TRANSACTION_getBcmGroupLedTemperature /* 1789 */:
                            return onTransact$getBcmGroupLedTemperature$(data, reply);
                        case TRANSACTION_setBcmGroupLedBrigntness /* 1790 */:
                            return onTransact$setBcmGroupLedBrigntness$(data, reply);
                        case TRANSACTION_getBcmGroupLedBrigntness /* 1791 */:
                            return onTransact$getBcmGroupLedBrigntness$(data, reply);
                        case 1792:
                            return onTransact$setXpuAdasTopSpeedLimitedValue$(data, reply);
                        case 1793:
                            return onTransact$setAmpSdsscLevel$(data, reply);
                        case 1794:
                            return onTransact$getAmpSdsscLevel$(data, reply);
                        case 1795:
                            return onTransact$setAmpSoundSourceDolbyFormat$(data, reply);
                        case 1796:
                            return onTransact$setAmpSoundStyle$(data, reply);
                        case 1797:
                            return onTransact$getAmpSoundStyle$(data, reply);
                        case 1798:
                            return onTransact$setAmpFreqGainGroupControlValue$(data, reply);
                        case 1799:
                            return onTransact$getAmpFreqGainGroupControlValue$(data, reply);
                        case 1800:
                            return onTransact$setXpuLssSensitivitySwitchStatus$(data, reply);
                        case 1801:
                            return onTransact$getXpuLssSensitivitySwitchStatus$(data, reply);
                        case 1802:
                            return onTransact$getVcuBmsBatteryCurrent$(data, reply);
                        case 1803:
                            return onTransact$getVcuBmsBatteryVoltage$(data, reply);
                        case 1804:
                            return onTransact$getVcuBmsBatteryAverageTemperature$(data, reply);
                        case 1805:
                            return onTransact$getVcuBmsChargeStatus$(data, reply);
                        case 1806:
                            return onTransact$setVcuXsportMode$(data, reply);
                        case 1807:
                            return onTransact$getVcuXsportMode$(data, reply);
                        case 1808:
                            return onTransact$getEspAllWheelSpeed$(data, reply);
                        case 1809:
                            return onTransact$getEspAbsWorkStatus$(data, reply);
                        case 1810:
                            return onTransact$getEspTcsWorkStatus$(data, reply);
                        case 1811:
                            return onTransact$getEspVdcWorkStatus$(data, reply);
                        case TRANSACTION_getEspIpuFrontActualRotateSpeed /* 1812 */:
                            return onTransact$getEspIpuFrontActualRotateSpeed$(data, reply);
                        case TRANSACTION_getEspIpuRearActualRotateSpeed /* 1813 */:
                            return onTransact$getEspIpuRearActualRotateSpeed$(data, reply);
                        case TRANSACTION_getBcmXPortAsSystemAllStatus /* 1814 */:
                            return onTransact$getBcmXPortAsSystemAllStatus$(data, reply);
                        case TRANSACTION_getBcmAsWheelPositionHeightAll /* 1815 */:
                            return onTransact$getBcmAsWheelPositionHeightAll$(data, reply);
                        case TRANSACTION_getBcmAsAcceleratedSpeed /* 1816 */:
                            return onTransact$getBcmAsAcceleratedSpeed$(data, reply);
                        case TRANSACTION_setBcmAsLeopardModeSwitchStatus /* 1817 */:
                            return onTransact$setBcmAsLeopardModeSwitchStatus$(data, reply);
                        case TRANSACTION_getBcmAsLeopardModeSwitchStatus /* 1818 */:
                            return onTransact$getBcmAsLeopardModeSwitchStatus$(data, reply);
                        case TRANSACTION_setBcmAsVehicleMode /* 1819 */:
                            return onTransact$setBcmAsVehicleMode$(data, reply);
                        case TRANSACTION_sendXpuZgEventMessage /* 1820 */:
                            return onTransact$sendXpuZgEventMessage$(data, reply);
                        case TRANSACTION_sendXpuZgPeriodMessage /* 1821 */:
                            return onTransact$sendXpuZgPeriodMessage$(data, reply);
                        case TRANSACTION_getBcmTrunkActualPosition /* 1822 */:
                            return onTransact$getBcmTrunkActualPosition$(data, reply);
                        case TRANSACTION_setBcmSecRowSeatEasyEntrySwitchStatus /* 1823 */:
                            return onTransact$setBcmSecRowSeatEasyEntrySwitchStatus$(data, reply);
                        case TRANSACTION_setBcmMirrorAutoFoldSwitchStatus /* 1824 */:
                            return onTransact$setBcmMirrorAutoFoldSwitchStatus$(data, reply);
                        case TRANSACTION_getBcmMirrorAutoFoldSwitchStatus /* 1825 */:
                            return onTransact$getBcmMirrorAutoFoldSwitchStatus$(data, reply);
                        case TRANSACTION_getBcmAsAutoLevelingResultValue /* 1826 */:
                            return onTransact$getBcmAsAutoLevelingResultValue$(data, reply);
                        case TRANSACTION_getAllSrsCrashOutputStatus /* 1827 */:
                            return onTransact$getAllSrsCrashOutputStatus$(data, reply);
                        case TRANSACTION_setMsmDriverSeatPositionMemoryRequest /* 1830 */:
                            return onTransact$setMsmDriverSeatPositionMemoryRequest$(data, reply);
                        case TRANSACTION_getMsmDriverSeatMassgErrorStatus /* 1831 */:
                            return onTransact$getMsmDriverSeatMassgErrorStatus$(data, reply);
                        case TRANSACTION_getMsmPassengerSeatMassgErrorStatus /* 1832 */:
                            return onTransact$getMsmPassengerSeatMassgErrorStatus$(data, reply);
                        case TRANSACTION_getMsmSecRowLeftSeatMassgErrorStatus /* 1833 */:
                            return onTransact$getMsmSecRowLeftSeatMassgErrorStatus$(data, reply);
                        case TRANSACTION_getMsmSecRowRightSeatMassgErrorStatus /* 1834 */:
                            return onTransact$getMsmSecRowRightSeatMassgErrorStatus$(data, reply);
                        case TRANSACTION_getVcuBmsActualSocValue /* 1835 */:
                            return onTransact$getVcuBmsActualSocValue$(data, reply);
                        case TRANSACTION_getVcuBmsMaximumAvailChargePower /* 1836 */:
                            return onTransact$getVcuBmsMaximumAvailChargePower$(data, reply);
                        case TRANSACTION_getVcuBmsMaximumAvailDischargePower /* 1837 */:
                            return onTransact$getVcuBmsMaximumAvailDischargePower$(data, reply);
                        case TRANSACTION_getEspIpuFrontActualTorque /* 1838 */:
                            return onTransact$getEspIpuFrontActualTorque$(data, reply);
                        case TRANSACTION_getEspIpuFrontMotorActualTemperature /* 1839 */:
                            return onTransact$getEspIpuFrontMotorActualTemperature$(data, reply);
                        case TRANSACTION_getEspIpuRearActualTorque /* 1840 */:
                            return onTransact$getEspIpuRearActualTorque$(data, reply);
                        case TRANSACTION_getEspIpuRearMotorActualTemperature /* 1841 */:
                            return onTransact$getEspIpuRearMotorActualTemperature$(data, reply);
                        case TRANSACTION_getEspIbtBrakeTravelDistance /* 1842 */:
                            return onTransact$getEspIbtBrakeTravelDistance$(data, reply);
                        case TRANSACTION_getEspMasterCylinderPressure /* 1843 */:
                            return onTransact$getEspMasterCylinderPressure$(data, reply);
                        case TRANSACTION_getVcuDynamicAvailableDrivingDistance /* 1844 */:
                            return onTransact$getVcuDynamicAvailableDrivingDistance$(data, reply);
                        case TRANSACTION_getTboxIOTBusinessType /* 1845 */:
                            return onTransact$getTboxIOTBusinessType$(data, reply);
                        case TRANSACTION_getTboxACChargeUnlockST /* 1846 */:
                            return onTransact$getTboxACChargeUnlockST$(data, reply);
                        case TRANSACTION_setEspCstStatus /* 1847 */:
                            return onTransact$setEspCstStatus$(data, reply);
                        case TRANSACTION_setEspBpfStatus /* 1848 */:
                            return onTransact$setEspBpfStatus$(data, reply);
                        case TRANSACTION_getAmpA2BLinkStatus /* 1849 */:
                            return onTransact$getAmpA2BLinkStatus$(data, reply);
                        case TRANSACTION_setMcuSocRespDTCInfo /* 1850 */:
                            return onTransact$setMcuSocRespDTCInfo$(data, reply);
                        case TRANSACTION_setMsmDriverAllPositionsToLDCU /* 1851 */:
                            return onTransact$setMsmDriverAllPositionsToLDCU$(data, reply);
                        case TRANSACTION_getScuMrrRadarEmissStatus /* 1852 */:
                            return onTransact$getScuMrrRadarEmissStatus$(data, reply);
                        case TRANSACTION_getScuAllSrrRadarEmissStatus /* 1853 */:
                            return onTransact$getScuAllSrrRadarEmissStatus$(data, reply);
                        case TRANSACTION_getVcuBmsCurrentBatterySocDisp /* 1854 */:
                            return onTransact$getVcuBmsCurrentBatterySocDisp$(data, reply);
                        case TRANSACTION_getVcuChargeDischargePower /* 1855 */:
                            return onTransact$getVcuChargeDischargePower$(data, reply);
                        case TRANSACTION_sendMcuGeofenceStatus /* 1856 */:
                            return onTransact$sendMcuGeofenceStatus$(data, reply);
                        case TRANSACTION_setIcmSoundThemeType /* 1857 */:
                            return onTransact$setIcmSoundThemeType$(data, reply);
                        case TRANSACTION_getVcuChargeHighVoltageLoadPower /* 1858 */:
                            return onTransact$getVcuChargeHighVoltageLoadPower$(data, reply);
                        case TRANSACTION_setRearHvacAirDistributionMode /* 1859 */:
                            return onTransact$setRearHvacAirDistributionMode$(data, reply);
                        case TRANSACTION_setRearHvacFanPosition /* 1860 */:
                            return onTransact$setRearHvacFanPosition$(data, reply);
                        case TRANSACTION_getRearHvacFanPosition /* 1861 */:
                            return onTransact$getRearHvacFanPosition$(data, reply);
                        case TRANSACTION_getAmpSoundSourceDolbyFormat /* 1862 */:
                            return onTransact$getAmpSoundSourceDolbyFormat$(data, reply);
                        case TRANSACTION_setBcmXsleepModeStatus /* 1863 */:
                            return onTransact$setBcmXsleepModeStatus$(data, reply);
                        case TRANSACTION_setBcmXmovieModeStatus /* 1864 */:
                            return onTransact$setBcmXmovieModeStatus$(data, reply);
                        case TRANSACTION_setBcmX5dCinemaModeStatus /* 1865 */:
                            return onTransact$setBcmX5dCinemaModeStatus$(data, reply);
                        case TRANSACTION_setBcmXmeditationModeStatus /* 1866 */:
                            return onTransact$setBcmXmeditationModeStatus$(data, reply);
                        case TRANSACTION_setXpuRadarEmissionSwitchStatus /* 1867 */:
                            return onTransact$setXpuRadarEmissionSwitchStatus$(data, reply);
                        case TRANSACTION_sendXpuScpGeoInfo /* 1868 */:
                            return onTransact$sendXpuScpGeoInfo$(data, reply);
                        case TRANSACTION_setLCMSAutoBrightSw /* 1869 */:
                            return onTransact$setLCMSAutoBrightSw$(data, reply);
                        case TRANSACTION_getLCMSAutoBrightSwSt /* 1870 */:
                            return onTransact$getLCMSAutoBrightSwSt$(data, reply);
                        case TRANSACTION_setLCMSBright /* 1871 */:
                            return onTransact$setLCMSBright$(data, reply);
                        case TRANSACTION_getLCMSBright /* 1872 */:
                            return onTransact$getLCMSBright$(data, reply);
                        case TRANSACTION_setLCMSHighSpeedViewSw /* 1873 */:
                            return onTransact$setLCMSHighSpeedViewSw$(data, reply);
                        case TRANSACTION_getLCMSHighSpeedViewSwSt /* 1874 */:
                            return onTransact$getLCMSHighSpeedViewSwSt$(data, reply);
                        case TRANSACTION_setLCMSLowSpeedViewSw /* 1875 */:
                            return onTransact$setLCMSLowSpeedViewSw$(data, reply);
                        case TRANSACTION_getLCMSLowSpeedViewSwSt /* 1876 */:
                            return onTransact$getLCMSLowSpeedViewSwSt$(data, reply);
                        case TRANSACTION_setLCMSDanObjectRecSw /* 1877 */:
                            return onTransact$setLCMSDanObjectRecSw$(data, reply);
                        case TRANSACTION_getLCMSDanObjectRecSwSt /* 1878 */:
                            return onTransact$getLCMSDanObjectRecSwSt$(data, reply);
                        case TRANSACTION_setLCMSReverseAssitSw /* 1879 */:
                            return onTransact$setLCMSReverseAssitSw$(data, reply);
                        case TRANSACTION_getLCMSReverseAssitSwSt /* 1880 */:
                            return onTransact$getLCMSReverseAssitSwSt$(data, reply);
                        case TRANSACTION_setLCMSTurnExtSw /* 1881 */:
                            return onTransact$setLCMSTurnExtSw$(data, reply);
                        case TRANSACTION_getLCMSTurnExtSwSt /* 1882 */:
                            return onTransact$getLCMSTurnExtSwSt$(data, reply);
                        case TRANSACTION_setLCMSViewRecovery /* 1883 */:
                            return onTransact$setLCMSViewRecovery$(data, reply);
                        case TRANSACTION_getLCMSViewRecoverySt /* 1884 */:
                            return onTransact$getLCMSViewRecoverySt$(data, reply);
                        case TRANSACTION_setArsWorkingMode /* 1885 */:
                            return onTransact$setArsWorkingMode$(data, reply);
                        case TRANSACTION_getArsWorkingMode /* 1886 */:
                            return onTransact$getArsWorkingMode$(data, reply);
                        case TRANSACTION_getArsWorkingState /* 1887 */:
                            return onTransact$getArsWorkingState$(data, reply);
                        case TRANSACTION_getArsPosition /* 1888 */:
                            return onTransact$getArsPosition$(data, reply);
                        case TRANSACTION_getArsInitState /* 1889 */:
                            return onTransact$getArsInitState$(data, reply);
                        case TRANSACTION_setIcmUserScenarioInfo /* 1890 */:
                            return onTransact$setIcmUserScenarioInfo$(data, reply);
                        case TRANSACTION_setIcmUserScenarioExitDialog /* 1891 */:
                            return onTransact$setIcmUserScenarioExitDialog$(data, reply);
                        case TRANSACTION_setMsmDriverSeatLegHorzPosition /* 1892 */:
                            return onTransact$setMsmDriverSeatLegHorzPosition$(data, reply);
                        case TRANSACTION_setMsmPassengerSeatLegHorzPosition /* 1893 */:
                            return onTransact$setMsmPassengerSeatLegHorzPosition$(data, reply);
                        case TRANSACTION_getMsmDriverSeatLegHorzPosition /* 1894 */:
                            return onTransact$getMsmDriverSeatLegHorzPosition$(data, reply);
                        case TRANSACTION_getMsmPassengerSeatLegHorzPosition /* 1895 */:
                            return onTransact$getMsmPassengerSeatLegHorzPosition$(data, reply);
                        case TRANSACTION_setMsmSecRowLeftSeatLegHorzPosReq /* 1896 */:
                            return onTransact$setMsmSecRowLeftSeatLegHorzPosReq$(data, reply);
                        case TRANSACTION_setMsmSecRowRightSeatLegHorzPosReq /* 1897 */:
                            return onTransact$setMsmSecRowRightSeatLegHorzPosReq$(data, reply);
                        case TRANSACTION_setMsmSecRowLeftSeatLegHorzPosition /* 1898 */:
                            return onTransact$setMsmSecRowLeftSeatLegHorzPosition$(data, reply);
                        case TRANSACTION_getMsmSecRowLeftSeatLegHorzPosition /* 1899 */:
                            return onTransact$getMsmSecRowLeftSeatLegHorzPosition$(data, reply);
                        case TRANSACTION_setMsmSecRowRightSeatLegHorzPosition /* 1900 */:
                            return onTransact$setMsmSecRowRightSeatLegHorzPosition$(data, reply);
                        case TRANSACTION_getMsmSecRowRightSeatLegHorzPosition /* 1901 */:
                            return onTransact$getMsmSecRowRightSeatLegHorzPosition$(data, reply);
                        case TRANSACTION_getBcmTargetAsHeightLvlConfigValue /* 1902 */:
                            return onTransact$getBcmTargetAsHeightLvlConfigValue$(data, reply);
                        case TRANSACTION_getBcmActualAsHeightLvlConfigValue /* 1903 */:
                            return onTransact$getBcmActualAsHeightLvlConfigValue$(data, reply);
                        case TRANSACTION_setBcmTargetAsHeightLvlConfigValue /* 1904 */:
                            return onTransact$setBcmTargetAsHeightLvlConfigValue$(data, reply);
                        case TRANSACTION_getBcmAsDrivingMode /* 1905 */:
                            return onTransact$getBcmAsDrivingMode$(data, reply);
                        case TRANSACTION_setMsmDriverWelcomeActive /* 1906 */:
                            return onTransact$setMsmDriverWelcomeActive$(data, reply);
                        case TRANSACTION_setMsmPassengerWelcomeActive /* 1907 */:
                            return onTransact$setMsmPassengerWelcomeActive$(data, reply);
                        case TRANSACTION_getHvacAutoDefogWorkSt /* 1908 */:
                            return onTransact$getHvacAutoDefogWorkSt$(data, reply);
                        case TRANSACTION_getBcmTtmLampConnectStatus /* 1909 */:
                            return onTransact$getBcmTtmLampConnectStatus$(data, reply);
                        case TRANSACTION_getBcmTtmLampFaultStatus /* 1910 */:
                            return onTransact$getBcmTtmLampFaultStatus$(data, reply);
                        case TRANSACTION_getEspEpbDriverOffWarningMsg /* 1911 */:
                            return onTransact$getEspEpbDriverOffWarningMsg$(data, reply);
                        case TRANSACTION_getBcmTtmHookMotorStatus /* 1912 */:
                            return onTransact$getBcmTtmHookMotorStatus$(data, reply);
                        case TRANSACTION_setAvasSocSoundVolumeToMcu /* 1913 */:
                            return onTransact$setAvasSocSoundVolumeToMcu$(data, reply);
                        case TRANSACTION_getRearHvacPowerState /* 1914 */:
                            return onTransact$getRearHvacPowerState$(data, reply);
                        case TRANSACTION_setHvacSecRowLeftTempInc /* 1915 */:
                            return onTransact$setHvacSecRowLeftTempInc$(data, reply);
                        case TRANSACTION_setHvacSecRowLeftTempDec /* 1916 */:
                            return onTransact$setHvacSecRowLeftTempDec$(data, reply);
                        case TRANSACTION_setHvacSecRowRightTempInc /* 1917 */:
                            return onTransact$setHvacSecRowRightTempInc$(data, reply);
                        case TRANSACTION_setHvacSecRowRightTempDec /* 1918 */:
                            return onTransact$setHvacSecRowRightTempDec$(data, reply);
                        case TRANSACTION_setHvacTempSecRowLeftValue /* 1919 */:
                            return onTransact$setHvacTempSecRowLeftValue$(data, reply);
                        case TRANSACTION_getHvacTempSecRowLeftValue /* 1920 */:
                            return onTransact$getHvacTempSecRowLeftValue$(data, reply);
                        case TRANSACTION_setHvacTempSecRowRightValue /* 1921 */:
                            return onTransact$setHvacTempSecRowRightValue$(data, reply);
                        case TRANSACTION_getHvacTempSecRowRightValue /* 1922 */:
                            return onTransact$getHvacTempSecRowRightValue$(data, reply);
                        case TRANSACTION_setHvacRearAutoModeEnabled /* 1923 */:
                            return onTransact$setHvacRearAutoModeEnabled$(data, reply);
                        case TRANSACTION_getHvacRearAutoModeState /* 1924 */:
                            return onTransact$getHvacRearAutoModeState$(data, reply);
                        case TRANSACTION_getHvacRearWindSpeedAutoControlStatus /* 1925 */:
                            return onTransact$getHvacRearWindSpeedAutoControlStatus$(data, reply);
                        case TRANSACTION_getHvacRearAirDistributionAutoControlStatus /* 1926 */:
                            return onTransact$getHvacRearAirDistributionAutoControlStatus$(data, reply);
                        case TRANSACTION_setHvacRearFanSpeedInc /* 1927 */:
                            return onTransact$setHvacRearFanSpeedInc$(data, reply);
                        case TRANSACTION_setHvacRearFanSpeedDec /* 1928 */:
                            return onTransact$setHvacRearFanSpeedDec$(data, reply);
                        case TRANSACTION_setHvacRearFanSpeedLevel /* 1929 */:
                            return onTransact$setHvacRearFanSpeedLevel$(data, reply);
                        case TRANSACTION_getHvacRearFanSpeedLevel /* 1930 */:
                            return onTransact$getHvacRearFanSpeedLevel$(data, reply);
                        case TRANSACTION_setHvacThirdRowTempInc /* 1931 */:
                            return onTransact$setHvacThirdRowTempInc$(data, reply);
                        case TRANSACTION_setHvacThirdRowTempDec /* 1932 */:
                            return onTransact$setHvacThirdRowTempDec$(data, reply);
                        case TRANSACTION_setHvacTempThirdRowtValue /* 1933 */:
                            return onTransact$setHvacTempThirdRowtValue$(data, reply);
                        case TRANSACTION_getHvacTempThirdRowValue /* 1934 */:
                            return onTransact$getHvacTempThirdRowValue$(data, reply);
                        case TRANSACTION_setRearHvacPowerEnabled /* 1935 */:
                            return onTransact$setRearHvacPowerEnabled$(data, reply);
                        case TRANSACTION_setHvacThirdRowWindBlowMode /* 1936 */:
                            return onTransact$setHvacThirdRowWindBlowMode$(data, reply);
                        case TRANSACTION_getHvacThirdRowWindBlowMode /* 1937 */:
                            return onTransact$getHvacThirdRowWindBlowMode$(data, reply);
                        case TRANSACTION_getBcmFrontWiperActiveStatus /* 1938 */:
                            return onTransact$getBcmFrontWiperActiveStatus$(data, reply);
                        case TRANSACTION_getBcmAllWindowsActionFeedbackStatus /* 1939 */:
                            return onTransact$getBcmAllWindowsActionFeedbackStatus$(data, reply);
                        case TRANSACTION_sendLCMSLogCtrlReq /* 1940 */:
                            return onTransact$sendLCMSLogCtrlReq$(data, reply);
                        case TRANSACTION_sendRCMSLogCtrlReq /* 1941 */:
                            return onTransact$sendRCMSLogCtrlReq$(data, reply);
                        case TRANSACTION_getXpuDriverHeadFaceArea /* 1942 */:
                            return onTransact$getXpuDriverHeadFaceArea$(data, reply);
                        case TRANSACTION_sendTboxOtaWorkingStatus /* 1943 */:
                            return onTransact$sendTboxOtaWorkingStatus$(data, reply);
                        case TRANSACTION_setHvacNewFreshSwitchStatus /* 1944 */:
                            return onTransact$setHvacNewFreshSwitchStatus$(data, reply);
                        case TRANSACTION_getHvacNewFreshSwitchStatus /* 1945 */:
                            return onTransact$getHvacNewFreshSwitchStatus$(data, reply);
                        case TRANSACTION_setCmsAllExteriorMirrorsPositions /* 1946 */:
                            return onTransact$setCmsAllExteriorMirrorsPositions$(data, reply);
                        case TRANSACTION_setXpuLLCCDetourSw /* 1947 */:
                            return onTransact$setXpuLLCCDetourSw$(data, reply);
                        case TRANSACTION_getXpuLLCCDetourSw /* 1948 */:
                            return onTransact$getXpuLLCCDetourSw$(data, reply);
                        case TRANSACTION_sendCNGPCityMapCtrlReq /* 1949 */:
                            return onTransact$sendCNGPCityMapCtrlReq$(data, reply);
                        case TRANSACTION_getCNGPCityMapCtrlResp /* 1950 */:
                            return onTransact$getCNGPCityMapCtrlResp$(data, reply);
                        case TRANSACTION_getVcuSuperChargeDiffIncreaseRange /* 1951 */:
                            return onTransact$getVcuSuperChargeDiffIncreaseRange$(data, reply);
                        case TRANSACTION_setMsmDriverSeatLumbControlSwitchEnable /* 1952 */:
                            return onTransact$setMsmDriverSeatLumbControlSwitchEnable$(data, reply);
                        case TRANSACTION_setMsmPassengerSeatLumbControlSwitchEnable /* 1953 */:
                            return onTransact$setMsmPassengerSeatLumbControlSwitchEnable$(data, reply);
                        case TRANSACTION_getVcuChargerLowVolSt /* 1954 */:
                            return onTransact$getVcuChargerLowVolSt$(data, reply);
                        case TRANSACTION_setVcuChargerLowVolDiag /* 1955 */:
                            return onTransact$setVcuChargerLowVolDiag$(data, reply);
                        case TRANSACTION_setLRCMSAllExteriorMirrorsPositions /* 1956 */:
                            return onTransact$setLRCMSAllExteriorMirrorsPositions$(data, reply);
                        case TRANSACTION_getLRCMSAllExteriorMirrorsPositions /* 1957 */:
                            return onTransact$getLRCMSAllExteriorMirrorsPositions$(data, reply);
                        case TRANSACTION_setLRCMSViewAngle /* 1958 */:
                            return onTransact$setLRCMSViewAngle$(data, reply);
                        case TRANSACTION_getLRCMSViewAngle /* 1959 */:
                            return onTransact$getLRCMSViewAngle$(data, reply);
                        case TRANSACTION_setLCMSBrightWithStoreflag /* 1960 */:
                            return onTransact$setLCMSBrightWithStoreflag$(data, reply);
                        case TRANSACTION_getLRCMSStoreBrightSource /* 1961 */:
                            return onTransact$getLRCMSStoreBrightSource$(data, reply);
                        case TRANSACTION_setArsFoldOrUnfold /* 1962 */:
                            return onTransact$setArsFoldOrUnfold$(data, reply);
                        case TRANSACTION_getLCMSBrightWithSource /* 1963 */:
                            return onTransact$getLCMSBrightWithSource$(data, reply);
                        case TRANSACTION_getXpuVehLocationProto /* 1964 */:
                            return onTransact$getXpuVehLocationProto$(data, reply);
                        case TRANSACTION_setHvacRearWindLessSwitch /* 1965 */:
                            return onTransact$setHvacRearWindLessSwitch$(data, reply);
                        case TRANSACTION_getHvacRearWindLessSwitch /* 1966 */:
                            return onTransact$getHvacRearWindLessSwitch$(data, reply);
                        case TRANSACTION_getAvm3603dAngle /* 1968 */:
                            return onTransact$getAvm3603dAngle$(data, reply);
                        case TRANSACTION_getAvmTransBodySwitchStatus /* 1969 */:
                            return onTransact$getAvmTransBodySwitchStatus$(data, reply);
                        case TRANSACTION_sendMcuOtaUpdateFile /* 1970 */:
                            return onTransact$sendMcuOtaUpdateFile$(data, reply);
                        case TRANSACTION_setAvm3603dAngle /* 1971 */:
                            return onTransact$setAvm3603dAngle$(data, reply);
                        case TRANSACTION_setAvmTransBodySwitchStatus /* 1972 */:
                            return onTransact$setAvmTransBodySwitchStatus$(data, reply);
                        case TRANSACTION_getVcuAvalibleDrivingDistanceFloat /* 1973 */:
                            return onTransact$getVcuAvalibleDrivingDistanceFloat$(data, reply);
                        case TRANSACTION_getVcuLastTwoPointFiveKmAverageVehConsume /* 1974 */:
                            return onTransact$getVcuLastTwoPointFiveKmAverageVehConsume$(data, reply);
                        case TRANSACTION_getVcuLastTwentyKmAverageVehConsume /* 1975 */:
                            return onTransact$getVcuLastTwentyKmAverageVehConsume$(data, reply);
                        case TRANSACTION_getVcuLastHundredKmAverageVehConsume /* 1976 */:
                            return onTransact$getVcuLastHundredKmAverageVehConsume$(data, reply);
                        case TRANSACTION_setXpuLccLStraightSw /* 1977 */:
                            return onTransact$setXpuLccLStraightSw$(data, reply);
                        case TRANSACTION_getXpuLccLStraightSw /* 1978 */:
                            return onTransact$getXpuLccLStraightSw$(data, reply);
                        case TRANSACTION_setXpuNaviRemainingDistance /* 1979 */:
                            return onTransact$setXpuNaviRemainingDistance$(data, reply);
                        case TRANSACTION_getXpuNaviConfirmProto /* 1981 */:
                            return onTransact$getXpuNaviConfirmProto$(data, reply);
                        case TRANSACTION_setHvacMachineStateSwitch /* 1982 */:
                            return onTransact$setHvacMachineStateSwitch$(data, reply);
                        case TRANSACTION_getHvacMachineStateSwitch /* 1983 */:
                            return onTransact$getHvacMachineStateSwitch$(data, reply);
                        case TRANSACTION_sendTboxWakeOrderRTC /* 1984 */:
                            return onTransact$sendTboxWakeOrderRTC$(data, reply);
                        case TRANSACTION_setVcuAutoEasyLoadingSwitchStatus /* 1985 */:
                            return onTransact$setVcuAutoEasyLoadingSwitchStatus$(data, reply);
                        case TRANSACTION_getVcuAutoEasyLoadingSwitchStatus /* 1986 */:
                            return onTransact$getVcuAutoEasyLoadingSwitchStatus$(data, reply);
                        case TRANSACTION_getLeftSlideDoorMoode /* 1987 */:
                            return onTransact$getLeftSlideDoorMoode$(data, reply);
                        case TRANSACTION_getLeftSlideDoorStatus /* 1988 */:
                            return onTransact$getLeftSlideDoorStatus$(data, reply);
                        case TRANSACTION_setLeftSlideDoorCtrl /* 1989 */:
                            return onTransact$setLeftSlideDoorCtrl$(data, reply);
                        case TRANSACTION_getLeftSlideDoorLockSt /* 1990 */:
                            return onTransact$getLeftSlideDoorLockSt$(data, reply);
                        case TRANSACTION_getRightSlideDoorMoode /* 1991 */:
                            return onTransact$getRightSlideDoorMoode$(data, reply);
                        case TRANSACTION_getRightSlideDoorStatus /* 1992 */:
                            return onTransact$getRightSlideDoorStatus$(data, reply);
                        case TRANSACTION_setRightSlideDoorCtrl /* 1993 */:
                            return onTransact$setRightSlideDoorCtrl$(data, reply);
                        case TRANSACTION_getRightSlideDoorLockSt /* 1994 */:
                            return onTransact$getRightSlideDoorLockSt$(data, reply);
                        case TRANSACTION_getRearLogLight /* 1995 */:
                            return onTransact$getRearLogLight$(data, reply);
                        case TRANSACTION_setRearLogLight /* 1996 */:
                            return onTransact$setRearLogLight$(data, reply);
                        case TRANSACTION_sendTboxApnTrafficInfo /* 1997 */:
                            return onTransact$sendTboxApnTrafficInfo$(data, reply);
                        case TRANSACTION_getTboxNetmConfInfo /* 1998 */:
                            return onTransact$getTboxNetmConfInfo$(data, reply);
                        case 1999:
                            return onTransact$setLaneSupportSystemStateAndWarning$(data, reply);
                        case TRANSACTION_getLaneSupportSystemStateAndWarning /* 2000 */:
                            return onTransact$getLaneSupportSystemStateAndWarning$(data, reply);
                        case TRANSACTION_getBcmTrunkWorkModeStatus /* 2001 */:
                            return onTransact$getBcmTrunkWorkModeStatus$(data, reply);
                        case TRANSACTION_getBcmLowBeamOffConfirmSt /* 2002 */:
                            return onTransact$getBcmLowBeamOffConfirmSt$(data, reply);
                        case TRANSACTION_setBcmLowBeamOffConfirmSt /* 2003 */:
                            return onTransact$setBcmLowBeamOffConfirmSt$(data, reply);
                        case TRANSACTION_setArsInitState /* 2004 */:
                            return onTransact$setArsInitState$(data, reply);
                        case TRANSACTION_getArsFaultState /* 2005 */:
                            return onTransact$getArsFaultState$(data, reply);
                        case TRANSACTION_getBcmFRCwcSwitchState /* 2006 */:
                            return onTransact$getBcmFRCwcSwitchState$(data, reply);
                        case TRANSACTION_setBcmFRCwcSwitch /* 2007 */:
                            return onTransact$setBcmFRCwcSwitch$(data, reply);
                        case TRANSACTION_getFRCwcChargeSt /* 2008 */:
                            return onTransact$getFRCwcChargeSt$(data, reply);
                        case TRANSACTION_getFRCwcChargeErrorSt /* 2009 */:
                            return onTransact$getFRCwcChargeErrorSt$(data, reply);
                        case TRANSACTION_setCFPowerSwitch /* 2010 */:
                            return onTransact$setCFPowerSwitch$(data, reply);
                        case TRANSACTION_getCFPowerState /* 2011 */:
                            return onTransact$getCFPowerState$(data, reply);
                        case TRANSACTION_setCarFridgeDoorCtrl /* 2012 */:
                            return onTransact$setCarFridgeDoorCtrl$(data, reply);
                        case TRANSACTION_getCarFridgeDoorState /* 2013 */:
                            return onTransact$getCarFridgeDoorState$(data, reply);
                        case TRANSACTION_setCFTempInc /* 2014 */:
                            return onTransact$setCFTempInc$(data, reply);
                        case TRANSACTION_setFCTempDec /* 2015 */:
                            return onTransact$setFCTempDec$(data, reply);
                        case TRANSACTION_setCFTempValue /* 2016 */:
                            return onTransact$setCFTempValue$(data, reply);
                        case TRANSACTION_getCFTempValue /* 2017 */:
                            return onTransact$getCFTempValue$(data, reply);
                        case TRANSACTION_setCFWorkMode /* 2018 */:
                            return onTransact$setCFWorkMode$(data, reply);
                        case TRANSACTION_getCFWorkMode /* 2019 */:
                            return onTransact$getCFWorkMode$(data, reply);
                        case 2020:
                            return onTransact$setCFChildLock$(data, reply);
                        case TRANSACTION_getCFChildLockState /* 2021 */:
                            return onTransact$getCFChildLockState$(data, reply);
                        case TRANSACTION_setCFKeepTempSwitch /* 2022 */:
                            return onTransact$setCFKeepTempSwitch$(data, reply);
                        case TRANSACTION_getCFKeepTempState /* 2023 */:
                            return onTransact$getCFKeepTempState$(data, reply);
                        case TRANSACTION_setCFKeepTempTime /* 2024 */:
                            return onTransact$setCFKeepTempTime$(data, reply);
                        case TRANSACTION_getCFKeepTempTime /* 2025 */:
                            return onTransact$getCFKeepTempTime$(data, reply);
                        case TRANSACTION_getCFKeepTempRemainTime /* 2026 */:
                            return onTransact$getCFKeepTempRemainTime$(data, reply);
                        case TRANSACTION_setCFKeepTempTimeMemoryRequest /* 2027 */:
                            return onTransact$setCFKeepTempTimeMemoryRequest$(data, reply);
                        case TRANSACTION_getCFKeepTempWorkState /* 2028 */:
                            return onTransact$getCFKeepTempWorkState$(data, reply);
                        case TRANSACTION_sendSRHeartBeatInfoRequest /* 2029 */:
                            return onTransact$sendSRHeartBeatInfoRequest$(data, reply);
                        case TRANSACTION_getSRHeartBeatInfo /* 2030 */:
                            return onTransact$getSRHeartBeatInfo$(data, reply);
                        case TRANSACTION_sendSRLagLogHeartBeatFeedBackRequest /* 2031 */:
                            return onTransact$sendSRLagLogHeartBeatFeedBackRequest$(data, reply);
                        case TRANSACTION_setVCUAWDModeSw /* 2032 */:
                            return onTransact$setVCUAWDModeSw$(data, reply);
                        case TRANSACTION_getVCUAWDModeSw /* 2033 */:
                            return onTransact$getVCUAWDModeSw$(data, reply);
                        case TRANSACTION_setCarpetLightWelcomeSw /* 2034 */:
                            return onTransact$setCarpetLightWelcomeSw$(data, reply);
                        case TRANSACTION_getCarpetLightWelcomeState /* 2035 */:
                            return onTransact$getCarpetLightWelcomeState$(data, reply);
                        case TRANSACTION_setPollingWelcomeSW /* 2036 */:
                            return onTransact$setPollingWelcomeSW$(data, reply);
                        case TRANSACTION_getPollingWelcomeState /* 2037 */:
                            return onTransact$getPollingWelcomeState$(data, reply);
                        case TRANSACTION_SetFcwAebSensitivitySwitchStatus /* 2038 */:
                            return onTransact$SetFcwAebSensitivitySwitchStatus$(data, reply);
                        case TRANSACTION_getFcwAebSensitivitySwitchStatus /* 2039 */:
                            return onTransact$getFcwAebSensitivitySwitchStatus$(data, reply);
                        case TRANSACTION_setSfmCtrl /* 2040 */:
                            return onTransact$setSfmCtrl$(data, reply);
                        case TRANSACTION_getSfmCtrlState /* 2041 */:
                            return onTransact$getSfmCtrlState$(data, reply);
                        case TRANSACTION_setSfmAnglePos /* 2042 */:
                            return onTransact$setSfmAnglePos$(data, reply);
                        case TRANSACTION_getSfmAnglePos /* 2043 */:
                            return onTransact$getSfmAnglePos$(data, reply);
                        case TRANSACTION_setAtlLin1Data /* 2044 */:
                            return onTransact$setAtlLin1Data$(data, reply);
                        case TRANSACTION_setSecRowLeftBlowLevel /* 2045 */:
                            return onTransact$setSecRowLeftBlowLevel$(data, reply);
                        case TRANSACTION_getSecRowLeftBlowLevel /* 2046 */:
                            return onTransact$getSecRowLeftBlowLevel$(data, reply);
                        case TRANSACTION_setSecRowRightBlowLevel /* 2047 */:
                            return onTransact$setSecRowRightBlowLevel$(data, reply);
                        case 2048:
                            return onTransact$getSecRowRightBlowLevel$(data, reply);
                        case TRANSACTION_setSecRowLeftSeatPos /* 2049 */:
                            return onTransact$setSecRowLeftSeatPos$(data, reply);
                        case TRANSACTION_getSecRowLeftSeatPos /* 2050 */:
                            return onTransact$getSecRowLeftSeatPos$(data, reply);
                        case TRANSACTION_setSecRowRightSeatPos /* 2051 */:
                            return onTransact$setSecRowRightSeatPos$(data, reply);
                        case TRANSACTION_getSecRowRightSeatPos /* 2052 */:
                            return onTransact$getSecRowRightSeatPos$(data, reply);
                        case TRANSACTION_setTrdRowSeatAllPos /* 2053 */:
                            return onTransact$setTrdRowSeatAllPos$(data, reply);
                        case TRANSACTION_getTrdRowSeatAllPos /* 2054 */:
                            return onTransact$getTrdRowSeatAllPos$(data, reply);
                        case TRANSACTION_setSecRowLeftHorizMove /* 2055 */:
                            return onTransact$setSecRowLeftHorizMove$(data, reply);
                        case TRANSACTION_setSecRowLeftAngleMove /* 2056 */:
                            return onTransact$setSecRowLeftAngleMove$(data, reply);
                        case TRANSACTION_setSecRowLeftLegVertiMove /* 2057 */:
                            return onTransact$setSecRowLeftLegVertiMove$(data, reply);
                        case TRANSACTION_setSecRowLeftHeadVertiMove /* 2058 */:
                            return onTransact$setSecRowLeftHeadVertiMove$(data, reply);
                        case TRANSACTION_setSecRowLeftHeadHorizMove /* 2059 */:
                            return onTransact$setSecRowLeftHeadHorizMove$(data, reply);
                        case TRANSACTION_setSecRowRightHorizMove /* 2060 */:
                            return onTransact$setSecRowRightHorizMove$(data, reply);
                        case TRANSACTION_setSecRowRighttAngleMove /* 2061 */:
                            return onTransact$setSecRowRighttAngleMove$(data, reply);
                        case TRANSACTION_setSecRowRightLegVertiMove /* 2062 */:
                            return onTransact$setSecRowRightLegVertiMove$(data, reply);
                        case TRANSACTION_setSecRowRightHeadVertiMove /* 2063 */:
                            return onTransact$setSecRowRightHeadVertiMove$(data, reply);
                        case TRANSACTION_setSecRowRightHeadHorizMove /* 2064 */:
                            return onTransact$setSecRowRightHeadHorizMove$(data, reply);
                        case TRANSACTION_setTrdRowLeftSeatTiltMove /* 2065 */:
                            return onTransact$setTrdRowLeftSeatTiltMove$(data, reply);
                        case TRANSACTION_setTrdRowLeftHeadVertiMove /* 2066 */:
                            return onTransact$setTrdRowLeftHeadVertiMove$(data, reply);
                        case TRANSACTION_setTrdRowRightSeatTiltMove /* 2067 */:
                            return onTransact$setTrdRowRightSeatTiltMove$(data, reply);
                        case TRANSACTION_setTrdRowRightHeadVertiMove /* 2068 */:
                            return onTransact$setTrdRowRightHeadVertiMove$(data, reply);
                        case TRANSACTION_setTrdRowMiddleSeatTiltMove /* 2069 */:
                            return onTransact$setTrdRowMiddleSeatTiltMove$(data, reply);
                        case TRANSACTION_setSecRowLeftSeatLumbVertiMove /* 2070 */:
                            return onTransact$setSecRowLeftSeatLumbVertiMove$(data, reply);
                        case TRANSACTION_setSecRowLeftSeatLumbHorzMove /* 2071 */:
                            return onTransact$setSecRowLeftSeatLumbHorzMove$(data, reply);
                        case TRANSACTION_setSecRowRightSeatLumbVertiMove /* 2072 */:
                            return onTransact$setSecRowRightSeatLumbVertiMove$(data, reply);
                        case TRANSACTION_setSecRowRightSeatLumbHorzMove /* 2073 */:
                            return onTransact$setSecRowRightSeatLumbHorzMove$(data, reply);
                        case TRANSACTION_setSecRowLeftSeatZeroGravReq /* 2074 */:
                            return onTransact$setSecRowLeftSeatZeroGravReq$(data, reply);
                        case TRANSACTION_setSecRowRightSeatZeroGravReq /* 2075 */:
                            return onTransact$setSecRowRightSeatZeroGravReq$(data, reply);
                        case TRANSACTION_setSecRowLeftSeatEasyEntryReq /* 2076 */:
                            return onTransact$setSecRowLeftSeatEasyEntryReq$(data, reply);
                        case TRANSACTION_setSecRowRightSeatEasyEntryReq /* 2077 */:
                            return onTransact$setSecRowRightSeatEasyEntryReq$(data, reply);
                        case TRANSACTION_getSecRowLeftSeatFuncSt /* 2078 */:
                            return onTransact$getSecRowLeftSeatFuncSt$(data, reply);
                        case TRANSACTION_getSecRowRightSeatFuncSt /* 2079 */:
                            return onTransact$getSecRowRightSeatFuncSt$(data, reply);
                        case TRANSACTION_setMsmtLeftSeatFoldReq /* 2080 */:
                            return onTransact$setMsmtLeftSeatFoldReq$(data, reply);
                        case TRANSACTION_getMsmtLeftSeatFoldFunSt /* 2081 */:
                            return onTransact$getMsmtLeftSeatFoldFunSt$(data, reply);
                        case TRANSACTION_setMsmtRightSeatFoldReq /* 2082 */:
                            return onTransact$setMsmtRightSeatFoldReq$(data, reply);
                        case TRANSACTION_getMsmtRightSeatFoldFunSt /* 2083 */:
                            return onTransact$getMsmtRightSeatFoldFunSt$(data, reply);
                        case TRANSACTION_setMsmtSeatStowReq /* 2084 */:
                            return onTransact$setMsmtSeatStowReq$(data, reply);
                        case TRANSACTION_getMsmtSeatStowFunSt /* 2085 */:
                            return onTransact$getMsmtSeatStowFunSt$(data, reply);
                        case TRANSACTION_stopSecRowLeftSeatMoving /* 2086 */:
                            return onTransact$stopSecRowLeftSeatMoving$(data, reply);
                        case TRANSACTION_stopSecRowRightSeatMoving /* 2087 */:
                            return onTransact$stopSecRowRightSeatMoving$(data, reply);
                        case TRANSACTION_setVcuAcChargCurrentMaxLimitedValue /* 2088 */:
                            return onTransact$setVcuAcChargCurrentMaxLimitedValue$(data, reply);
                        case TRANSACTION_getVcuAcChargCurrentMaxLimitedValue /* 2089 */:
                            return onTransact$getVcuAcChargCurrentMaxLimitedValue$(data, reply);
                        case TRANSACTION_setSecRowLtSeatHorzPos /* 2090 */:
                            return onTransact$setSecRowLtSeatHorzPos$(data, reply);
                        case TRANSACTION_getSecRowLtSeatHorzPos /* 2091 */:
                            return onTransact$getSecRowLtSeatHorzPos$(data, reply);
                        case TRANSACTION_setSecRowLtSeatAnglePos /* 2092 */:
                            return onTransact$setSecRowLtSeatAnglePos$(data, reply);
                        case TRANSACTION_getSecRowLtSeatAnglePos /* 2093 */:
                            return onTransact$getSecRowLtSeatAnglePos$(data, reply);
                        case TRANSACTION_setSecRowLtSeatLegVerticalPos /* 2094 */:
                            return onTransact$setSecRowLtSeatLegVerticalPos$(data, reply);
                        case TRANSACTION_getSecRowLtSeatLegVerticalPos /* 2095 */:
                            return onTransact$getSecRowLtSeatLegVerticalPos$(data, reply);
                        case TRANSACTION_setSecRowLtSeatHeadVerticalPos /* 2096 */:
                            return onTransact$setSecRowLtSeatHeadVerticalPos$(data, reply);
                        case TRANSACTION_getSecRowLtSeatHeadVerticalPos /* 2097 */:
                            return onTransact$getSecRowLtSeatHeadVerticalPos$(data, reply);
                        case TRANSACTION_setSecRowLtSeatHeadHorzPos /* 2098 */:
                            return onTransact$setSecRowLtSeatHeadHorzPos$(data, reply);
                        case TRANSACTION_getSecRowLtSeatHeadHorzPos /* 2099 */:
                            return onTransact$getSecRowLtSeatHeadHorzPos$(data, reply);
                        case TRANSACTION_setSecRowRtSeatHorzPos /* 2100 */:
                            return onTransact$setSecRowRtSeatHorzPos$(data, reply);
                        case TRANSACTION_getSecRowRtSeatHorzPos /* 2101 */:
                            return onTransact$getSecRowRtSeatHorzPos$(data, reply);
                        case TRANSACTION_setSecRowRtSeatAnglePos /* 2102 */:
                            return onTransact$setSecRowRtSeatAnglePos$(data, reply);
                        case TRANSACTION_getSecRowRtSeatAnglePos /* 2103 */:
                            return onTransact$getSecRowRtSeatAnglePos$(data, reply);
                        case TRANSACTION_setSecRowRtSeatLegVerticalPos /* 2104 */:
                            return onTransact$setSecRowRtSeatLegVerticalPos$(data, reply);
                        case TRANSACTION_getSecRowRtSeatLegVerticalPos /* 2105 */:
                            return onTransact$getSecRowRtSeatLegVerticalPos$(data, reply);
                        case TRANSACTION_setSecRowRtSeatHeadVerticalPos /* 2106 */:
                            return onTransact$setSecRowRtSeatHeadVerticalPos$(data, reply);
                        case TRANSACTION_getSecRowRtSeatHeadVerticalPos /* 2107 */:
                            return onTransact$getSecRowRtSeatHeadVerticalPos$(data, reply);
                        case TRANSACTION_setSecRowRtSeatHeadHorzPos /* 2108 */:
                            return onTransact$setSecRowRtSeatHeadHorzPos$(data, reply);
                        case TRANSACTION_getSecRowRtSeatHeadHorzPos /* 2109 */:
                            return onTransact$getSecRowRtSeatHeadHorzPos$(data, reply);
                        case TRANSACTION_setTrdRowLtSeatTiltPos /* 2110 */:
                            return onTransact$setTrdRowLtSeatTiltPos$(data, reply);
                        case TRANSACTION_getTrdRowLtSeatTiltPos /* 2111 */:
                            return onTransact$getTrdRowLtSeatTiltPos$(data, reply);
                        case TRANSACTION_setTrdRowLtSeatHeadVerticalPos /* 2112 */:
                            return onTransact$setTrdRowLtSeatHeadVerticalPos$(data, reply);
                        case TRANSACTION_getTrdRowLtSeatHeadVerticalPos /* 2113 */:
                            return onTransact$getTrdRowLtSeatHeadVerticalPos$(data, reply);
                        case TRANSACTION_setTrdRowRtSeatTiltPos /* 2114 */:
                            return onTransact$setTrdRowRtSeatTiltPos$(data, reply);
                        case TRANSACTION_getTrdRowRtSeatTiltPos /* 2115 */:
                            return onTransact$getTrdRowRtSeatTiltPos$(data, reply);
                        case TRANSACTION_setTrdRowRtSeatHeadVerticalPos /* 2116 */:
                            return onTransact$setTrdRowRtSeatHeadVerticalPos$(data, reply);
                        case TRANSACTION_getTrdRowRtSeatHeadVerticalPos /* 2117 */:
                            return onTransact$getTrdRowRtSeatHeadVerticalPos$(data, reply);
                        case TRANSACTION_setTrdRowMidSeatHeadVerticalPos /* 2118 */:
                            return onTransact$setTrdRowMidSeatHeadVerticalPos$(data, reply);
                        case TRANSACTION_getTrdRowMidSeatHeadVerticalPos /* 2119 */:
                            return onTransact$getTrdRowMidSeatHeadVerticalPos$(data, reply);
                        case TRANSACTION_setVMCRwsSwitch /* 2120 */:
                            return onTransact$setVMCRwsSwitch$(data, reply);
                        case TRANSACTION_getVMCRwsSwitchState /* 2121 */:
                            return onTransact$getVMCRwsSwitchState$(data, reply);
                        case TRANSACTION_setVMCZWalkModeSwitch /* 2122 */:
                            return onTransact$setVMCZWalkModeSwitch$(data, reply);
                        case TRANSACTION_getVMCZWalkModeState /* 2123 */:
                            return onTransact$getVMCZWalkModeState$(data, reply);
                        case TRANSACTION_getVMCSystemState /* 2124 */:
                            return onTransact$getVMCSystemState$(data, reply);
                        case TRANSACTION_setLeftSlideDoorMode /* 2125 */:
                            return onTransact$setLeftSlideDoorMode$(data, reply);
                        case TRANSACTION_setRightSlideDoorMode /* 2126 */:
                            return onTransact$setRightSlideDoorMode$(data, reply);
                        case TRANSACTION_setTrdRowMidHeadVertiMove /* 2127 */:
                            return onTransact$setTrdRowMidHeadVertiMove$(data, reply);
                        case TRANSACTION_getTrdRowLeftSeatTiltState /* 2128 */:
                            return onTransact$getTrdRowLeftSeatTiltState$(data, reply);
                        case TRANSACTION_getTrdRowRightSeatTiltState /* 2129 */:
                            return onTransact$getTrdRowRightSeatTiltState$(data, reply);
                        case TRANSACTION_getTrdRowSeatStowState /* 2130 */:
                            return onTransact$getTrdRowSeatStowState$(data, reply);
                        case TRANSACTION_getV2LDischargeErrorReason /* 2131 */:
                            return onTransact$getV2LDischargeErrorReason$(data, reply);
                        case TRANSACTION_setImsModeReq /* 2132 */:
                            return onTransact$setImsModeReq$(data, reply);
                        case TRANSACTION_getImsModeState /* 2133 */:
                            return onTransact$getImsModeState$(data, reply);
                        case TRANSACTION_setImsAutoVisionSw /* 2134 */:
                            return onTransact$setImsAutoVisionSw$(data, reply);
                        case TRANSACTION_getImsAutoVisionSt /* 2135 */:
                            return onTransact$getImsAutoVisionSt$(data, reply);
                        case TRANSACTION_setImsBrightLevel /* 2136 */:
                            return onTransact$setImsBrightLevel$(data, reply);
                        case TRANSACTION_getImsBrightLevel /* 2137 */:
                            return onTransact$getImsBrightLevel$(data, reply);
                        case TRANSACTION_setImsVisionCtrl /* 2138 */:
                            return onTransact$setImsVisionCtrl$(data, reply);
                        case TRANSACTION_getImsVisionVerticalLevel /* 2139 */:
                            return onTransact$getImsVisionVerticalLevel$(data, reply);
                        case TRANSACTION_getImsVisionAngleLevl /* 2140 */:
                            return onTransact$getImsVisionAngleLevl$(data, reply);
                        case TRANSACTION_getImsSystemSt /* 2141 */:
                            return onTransact$getImsSystemSt$(data, reply);
                        case TRANSACTION_getBcmRLCwcSwitchState /* 2142 */:
                            return onTransact$getBcmRLCwcSwitchState$(data, reply);
                        case TRANSACTION_setBcmRLCwcSwitch /* 2143 */:
                            return onTransact$setBcmRLCwcSwitch$(data, reply);
                        case TRANSACTION_getRLCwcChargeSt /* 2144 */:
                            return onTransact$getRLCwcChargeSt$(data, reply);
                        case TRANSACTION_getRLCwcChargeErrorSt /* 2145 */:
                            return onTransact$getRLCwcChargeErrorSt$(data, reply);
                        case TRANSACTION_getBcmRRCwcSwitchState /* 2146 */:
                            return onTransact$getBcmRRCwcSwitchState$(data, reply);
                        case TRANSACTION_setBcmRRCwcSwitch /* 2147 */:
                            return onTransact$setBcmRRCwcSwitch$(data, reply);
                        case TRANSACTION_getRRCwcChargeSt /* 2148 */:
                            return onTransact$getRRCwcChargeSt$(data, reply);
                        case TRANSACTION_getRRCwcChargeErrorSt /* 2149 */:
                            return onTransact$getRRCwcChargeErrorSt$(data, reply);
                        case TRANSACTION_getBattOutWaterTempature /* 2150 */:
                            return onTransact$getBattOutWaterTempature$(data, reply);
                        case TRANSACTION_getChargeHighVoltageLockState /* 2151 */:
                            return onTransact$getChargeHighVoltageLockState$(data, reply);
                        case TRANSACTION_getDischargeHighVoltageLockState /* 2152 */:
                            return onTransact$getDischargeHighVoltageLockState$(data, reply);
                        case TRANSACTION_getInsulativeResistanceValue /* 2153 */:
                            return onTransact$getInsulativeResistanceValue$(data, reply);
                        case TRANSACTION_setTrdLeftDomeLightSwitchStatus /* 2154 */:
                            return onTransact$setTrdLeftDomeLightSwitchStatus$(data, reply);
                        case TRANSACTION_getTrdLeftDomeLightSwitchStatus /* 2155 */:
                            return onTransact$getTrdLeftDomeLightSwitchStatus$(data, reply);
                        case TRANSACTION_setTrdRightDomeLightSwitchStatus /* 2156 */:
                            return onTransact$setTrdRightDomeLightSwitchStatus$(data, reply);
                        case TRANSACTION_getTrdRightDomeLightSwitchStatus /* 2157 */:
                            return onTransact$getTrdRightDomeLightSwitchStatus$(data, reply);
                        case TRANSACTION_setXpuNgpCustomSpeedSwitchStatus /* 2158 */:
                            return onTransact$setXpuNgpCustomSpeedSwitchStatus$(data, reply);
                        case TRANSACTION_getXpuNgpCustomSpeedSwitchStatus /* 2159 */:
                            return onTransact$getXpuNgpCustomSpeedSwitchStatus$(data, reply);
                        case TRANSACTION_setXpuNgpCustomSpeedCountLever /* 2160 */:
                            return onTransact$setXpuNgpCustomSpeedCountLever$(data, reply);
                        case TRANSACTION_getXpuNgpCustomSpeedCountLever /* 2161 */:
                            return onTransact$getXpuNgpCustomSpeedCountLever$(data, reply);
                        case TRANSACTION_setXpuNgpCustomSpeedCountPercent /* 2162 */:
                            return onTransact$setXpuNgpCustomSpeedCountPercent$(data, reply);
                        case TRANSACTION_getXpuNgpCustomSpeedCountPercent /* 2163 */:
                            return onTransact$getXpuNgpCustomSpeedCountPercent$(data, reply);
                        case TRANSACTION_getBcmPowerOffSource /* 2164 */:
                            return onTransact$getBcmPowerOffSource$(data, reply);
                        case TRANSACTION_sendIcmRandisDisplayType /* 2165 */:
                            return onTransact$sendIcmRandisDisplayType$(data, reply);
                        case TRANSACTION_setWiperRainDetectSensitivityAndInactive /* 2166 */:
                            return onTransact$setWiperRainDetectSensitivityAndInactive$(data, reply);
                        case TRANSACTION_getSecRowLtSeatState /* 2167 */:
                            return onTransact$getSecRowLtSeatState$(data, reply);
                        case TRANSACTION_getSecRowRtSeatState /* 2168 */:
                            return onTransact$getSecRowRtSeatState$(data, reply);
                        case TRANSACTION_getTrdRowLtSeatHeadMoveState /* 2169 */:
                            return onTransact$getTrdRowLtSeatHeadMoveState$(data, reply);
                        case TRANSACTION_getTrdRowMidSeatHeadMoveState /* 2170 */:
                            return onTransact$getTrdRowMidSeatHeadMoveState$(data, reply);
                        case TRANSACTION_getTrdRowRtSeatHeadMoveState /* 2171 */:
                            return onTransact$getTrdRowRtSeatHeadMoveState$(data, reply);
                        case 1598968902:
                            reply.writeString(DESCRIPTOR);
                            return true;
                        default:
                            switch (code) {
                                case 36:
                                    data.enforceInterface(DESCRIPTOR);
                                    int[] _result188 = getGSensorOffset();
                                    reply.writeNoException();
                                    reply.writeIntArray(_result188);
                                    return true;
                                case 37:
                                    data.enforceInterface(DESCRIPTOR);
                                    int[] _result189 = getScreenTempValue();
                                    reply.writeNoException();
                                    reply.writeIntArray(_result189);
                                    return true;
                                case 38:
                                    data.enforceInterface(DESCRIPTOR);
                                    int _result190 = isBcmRearFogLampOn();
                                    reply.writeNoException();
                                    reply.writeInt(_result190);
                                    return true;
                                case 39:
                                    return onTransact$setBcmRearFogLampOn$(data, reply);
                                case 40:
                                    return onTransact$setBcmFrontLampMode$(data, reply);
                                case 41:
                                    data.enforceInterface(DESCRIPTOR);
                                    int _result191 = getBcmFrontLampMode();
                                    reply.writeNoException();
                                    reply.writeInt(_result191);
                                    return true;
                                case 42:
                                    data.enforceInterface(DESCRIPTOR);
                                    int _result192 = getBcmFarLampState();
                                    reply.writeNoException();
                                    reply.writeInt(_result192);
                                    return true;
                                case 43:
                                    data.enforceInterface(DESCRIPTOR);
                                    int _result193 = getBcmNearLampState();
                                    reply.writeNoException();
                                    reply.writeInt(_result193);
                                    return true;
                                case 44:
                                    data.enforceInterface(DESCRIPTOR);
                                    int _result194 = isBcmOutlineMarkerLampsOn();
                                    reply.writeNoException();
                                    reply.writeInt(_result194);
                                    return true;
                                case 45:
                                    return onTransact$setBcmRearViewMirrorPos$(data, reply);
                                case 46:
                                    return onTransact$setBcmInternalLightOn$(data, reply);
                                case 47:
                                    data.enforceInterface(DESCRIPTOR);
                                    int _result195 = isBcmInternalLightOn();
                                    reply.writeNoException();
                                    reply.writeInt(_result195);
                                    return true;
                                case 48:
                                    return onTransact$setBcmEmergencyBrakeWarning$(data, reply);
                                case 49:
                                    data.enforceInterface(DESCRIPTOR);
                                    int _result196 = isBcmEmergencyBrakeWarningEnabled();
                                    reply.writeNoException();
                                    reply.writeInt(_result196);
                                    return true;
                                default:
                                    switch (code) {
                                        case TRANSACTION_setBcmLightMeHomeMode /* 57 */:
                                            return onTransact$setBcmLightMeHomeMode$(data, reply);
                                        case 58:
                                            data.enforceInterface(DESCRIPTOR);
                                            int _result197 = getBcmLightMeHomeMode();
                                            reply.writeNoException();
                                            reply.writeInt(_result197);
                                            return true;
                                        case TRANSACTION_setBcmDrvAutoLockEnabled /* 59 */:
                                            return onTransact$setBcmDrvAutoLockEnabled$(data, reply);
                                        case 60:
                                            data.enforceInterface(DESCRIPTOR);
                                            int _result198 = isBcmDrvAutoLockEnabled();
                                            reply.writeNoException();
                                            reply.writeInt(_result198);
                                            return true;
                                        case 61:
                                            return onTransact$setBcmParkingAutoUnlockEnabled$(data, reply);
                                        case 62:
                                            data.enforceInterface(DESCRIPTOR);
                                            int _result199 = isBcmParkingAutoUnlockEnabled();
                                            reply.writeNoException();
                                            reply.writeInt(_result199);
                                            return true;
                                        case TRANSACTION_setBcmHazardLampsFlash /* 63 */:
                                            return onTransact$setBcmHazardLampsFlash$(data, reply);
                                        case 64:
                                            return onTransact$setBcmDoorLock$(data, reply);
                                        default:
                                            switch (code) {
                                                case 66:
                                                    data.enforceInterface(DESCRIPTOR);
                                                    int _result200 = getBcmDoorLockState();
                                                    reply.writeNoException();
                                                    reply.writeInt(_result200);
                                                    return true;
                                                case 67:
                                                    return onTransact$setBcmTrunkOpen$(data, reply);
                                                case 68:
                                                    data.enforceInterface(DESCRIPTOR);
                                                    int _result201 = getBcmTrunkStatus();
                                                    reply.writeNoException();
                                                    reply.writeInt(_result201);
                                                    return true;
                                                case 69:
                                                    return onTransact$setBcmWiperInterval$(data, reply);
                                                case 70:
                                                    return onTransact$setChairSlowlyAhead$(data, reply);
                                                case 71:
                                                    return onTransact$setChairSlowlyBack$(data, reply);
                                                case 72:
                                                    return onTransact$setChairSlowlyEnd$(data, reply);
                                                case 73:
                                                    data.enforceInterface(DESCRIPTOR);
                                                    int[] _result202 = getChairDirection();
                                                    reply.writeNoException();
                                                    reply.writeIntArray(_result202);
                                                    return true;
                                                case 74:
                                                    data.enforceInterface(DESCRIPTOR);
                                                    int[] _result203 = getChairLocationValue();
                                                    reply.writeNoException();
                                                    reply.writeIntArray(_result203);
                                                    return true;
                                                case 75:
                                                    return onTransact$setChairPositionStart$(data, reply);
                                                case 76:
                                                    data.enforceInterface(DESCRIPTOR);
                                                    setChairPositionEnd();
                                                    reply.writeNoException();
                                                    return true;
                                                case 77:
                                                    data.enforceInterface(DESCRIPTOR);
                                                    int _result204 = getBcmChairWelcomeMode();
                                                    reply.writeNoException();
                                                    reply.writeInt(_result204);
                                                    return true;
                                                case 78:
                                                    return onTransact$setBcmChairWelcomeMode$(data, reply);
                                                case 79:
                                                    return onTransact$setBcmElectricSeatBeltEnabled$(data, reply);
                                                case 80:
                                                    data.enforceInterface(DESCRIPTOR);
                                                    int _result205 = isBcmElectricSeatBeltEnabled();
                                                    reply.writeNoException();
                                                    reply.writeInt(_result205);
                                                    return true;
                                                case 81:
                                                    return onTransact$setBcmRearSeatBeltWarningEnabled$(data, reply);
                                                case 82:
                                                    data.enforceInterface(DESCRIPTOR);
                                                    int _result206 = isBcmRearSeatBeltWarningEnabled();
                                                    reply.writeNoException();
                                                    reply.writeInt(_result206);
                                                    return true;
                                                case 83:
                                                    return onTransact$setBcmUnlockResponseMode$(data, reply);
                                                case 84:
                                                    data.enforceInterface(DESCRIPTOR);
                                                    int _result207 = getBcmUnlockResponseMode();
                                                    reply.writeNoException();
                                                    reply.writeInt(_result207);
                                                    return true;
                                                default:
                                                    switch (code) {
                                                        case 87:
                                                            data.enforceInterface(DESCRIPTOR);
                                                            int[] _result208 = getBcmDoorsState();
                                                            reply.writeNoException();
                                                            reply.writeIntArray(_result208);
                                                            return true;
                                                        case TRANSACTION_setBcmBackDefrostMode_ /* 88 */:
                                                            data.enforceInterface(DESCRIPTOR);
                                                            setBcmBackDefrostMode_();
                                                            reply.writeNoException();
                                                            return true;
                                                        case TRANSACTION_setBcmBackDefrostMode /* 89 */:
                                                            return onTransact$setBcmBackDefrostMode$(data, reply);
                                                        case TRANSACTION_getBcmBackDefrostMode /* 90 */:
                                                            data.enforceInterface(DESCRIPTOR);
                                                            int _result209 = getBcmBackDefrostMode();
                                                            reply.writeNoException();
                                                            reply.writeInt(_result209);
                                                            return true;
                                                        case TRANSACTION_setBcmBackMirrorHeatMode_ /* 91 */:
                                                            data.enforceInterface(DESCRIPTOR);
                                                            setBcmBackMirrorHeatMode_();
                                                            reply.writeNoException();
                                                            return true;
                                                        case TRANSACTION_setBcmBackMirrorHeatMode /* 92 */:
                                                            return onTransact$setBcmBackMirrorHeatMode$(data, reply);
                                                        case TRANSACTION_getBcmBackMirrorHeatMode /* 93 */:
                                                            data.enforceInterface(DESCRIPTOR);
                                                            int _result210 = getBcmBackMirrorHeatMode();
                                                            reply.writeNoException();
                                                            reply.writeInt(_result210);
                                                            return true;
                                                        case TRANSACTION_setBcmSeatHeatLevel_ /* 94 */:
                                                            data.enforceInterface(DESCRIPTOR);
                                                            setBcmSeatHeatLevel_();
                                                            reply.writeNoException();
                                                            return true;
                                                        case TRANSACTION_setBcmSeatHeatLevel /* 95 */:
                                                            return onTransact$setBcmSeatHeatLevel$(data, reply);
                                                        case 96:
                                                            data.enforceInterface(DESCRIPTOR);
                                                            int _result211 = getBcmSeatHeatLevel();
                                                            reply.writeNoException();
                                                            reply.writeInt(_result211);
                                                            return true;
                                                        case 97:
                                                            data.enforceInterface(DESCRIPTOR);
                                                            setBcmSeatBlowLevel_();
                                                            reply.writeNoException();
                                                            return true;
                                                        case 98:
                                                            return onTransact$setBcmSeatBlowLevel$(data, reply);
                                                        case 99:
                                                            data.enforceInterface(DESCRIPTOR);
                                                            int _result212 = getBcmSeatBlowLevel();
                                                            reply.writeNoException();
                                                            reply.writeInt(_result212);
                                                            return true;
                                                        case 100:
                                                            data.enforceInterface(DESCRIPTOR);
                                                            int _result213 = getBcmIgStatus();
                                                            reply.writeNoException();
                                                            reply.writeInt(_result213);
                                                            return true;
                                                        default:
                                                            switch (code) {
                                                                case 102:
                                                                    data.enforceInterface(DESCRIPTOR);
                                                                    float _result214 = getBcmFrontLeftWinPos();
                                                                    reply.writeNoException();
                                                                    reply.writeFloat(_result214);
                                                                    return true;
                                                                case 103:
                                                                    data.enforceInterface(DESCRIPTOR);
                                                                    float _result215 = getBcmFrontRightWinPos();
                                                                    reply.writeNoException();
                                                                    reply.writeFloat(_result215);
                                                                    return true;
                                                                case 104:
                                                                    data.enforceInterface(DESCRIPTOR);
                                                                    float _result216 = getBcmRearLeftWinPos();
                                                                    reply.writeNoException();
                                                                    reply.writeFloat(_result216);
                                                                    return true;
                                                                case 105:
                                                                    data.enforceInterface(DESCRIPTOR);
                                                                    float _result217 = getBcmRearRightWinPos();
                                                                    reply.writeNoException();
                                                                    reply.writeFloat(_result217);
                                                                    return true;
                                                                case 106:
                                                                    data.enforceInterface(DESCRIPTOR);
                                                                    int _result218 = getDriverDoorState();
                                                                    reply.writeNoException();
                                                                    reply.writeInt(_result218);
                                                                    return true;
                                                                case 107:
                                                                    return onTransact$setFactoryOledData$(data, reply);
                                                                case 108:
                                                                    return onTransact$setFactoryOledDisplayMode$(data, reply);
                                                                case 109:
                                                                    return onTransact$setBcmChargePortUnlock$(data, reply);
                                                                case TRANSACTION_getSeatErrorState /* 110 */:
                                                                    data.enforceInterface(DESCRIPTOR);
                                                                    int _result219 = getSeatErrorState();
                                                                    reply.writeNoException();
                                                                    reply.writeInt(_result219);
                                                                    return true;
                                                                case TRANSACTION_setVentilate /* 111 */:
                                                                    data.enforceInterface(DESCRIPTOR);
                                                                    setVentilate();
                                                                    reply.writeNoException();
                                                                    return true;
                                                                case 112:
                                                                    data.enforceInterface(DESCRIPTOR);
                                                                    int _result220 = getWelcomeModeBackStatus();
                                                                    reply.writeNoException();
                                                                    reply.writeInt(_result220);
                                                                    return true;
                                                                case 113:
                                                                    data.enforceInterface(DESCRIPTOR);
                                                                    startCharge();
                                                                    reply.writeNoException();
                                                                    return true;
                                                                default:
                                                                    switch (code) {
                                                                        case TRANSACTION_setVcuChargeMode /* 119 */:
                                                                            return onTransact$setVcuChargeMode$(data, reply);
                                                                        case TRANSACTION_getVcuChargingPlugStatus /* 120 */:
                                                                            data.enforceInterface(DESCRIPTOR);
                                                                            int _result221 = getVcuChargingPlugStatus();
                                                                            reply.writeNoException();
                                                                            reply.writeInt(_result221);
                                                                            return true;
                                                                        case TRANSACTION_getVcuChargeStatus /* 121 */:
                                                                            data.enforceInterface(DESCRIPTOR);
                                                                            int _result222 = getVcuChargeStatus();
                                                                            reply.writeNoException();
                                                                            reply.writeInt(_result222);
                                                                            return true;
                                                                        case TRANSACTION_getVcuElectricQuantityPercent /* 122 */:
                                                                            data.enforceInterface(DESCRIPTOR);
                                                                            int _result223 = getVcuElectricQuantityPercent();
                                                                            reply.writeNoException();
                                                                            reply.writeInt(_result223);
                                                                            return true;
                                                                        case TRANSACTION_getVcuBatteryCoolingState /* 123 */:
                                                                            data.enforceInterface(DESCRIPTOR);
                                                                            int _result224 = getVcuBatteryCoolingState();
                                                                            reply.writeNoException();
                                                                            reply.writeInt(_result224);
                                                                            return true;
                                                                        case TRANSACTION_getVcuAcPowerConsume /* 124 */:
                                                                            data.enforceInterface(DESCRIPTOR);
                                                                            float _result225 = getVcuAcPowerConsume();
                                                                            reply.writeNoException();
                                                                            reply.writeFloat(_result225);
                                                                            return true;
                                                                        case 125:
                                                                            data.enforceInterface(DESCRIPTOR);
                                                                            int _result226 = getVcuBatteryWarmingStatus();
                                                                            reply.writeNoException();
                                                                            reply.writeInt(_result226);
                                                                            return true;
                                                                        case TRANSACTION_getVcuChargeRemainingTime /* 126 */:
                                                                            data.enforceInterface(DESCRIPTOR);
                                                                            int _result227 = getVcuChargeRemainingTime();
                                                                            reply.writeNoException();
                                                                            reply.writeInt(_result227);
                                                                            return true;
                                                                        case TRANSACTION_getVcuAvgVehiclePowerConsume /* 127 */:
                                                                            data.enforceInterface(DESCRIPTOR);
                                                                            float _result228 = getVcuAvgVehiclePowerConsume();
                                                                            reply.writeNoException();
                                                                            reply.writeFloat(_result228);
                                                                            return true;
                                                                        default:
                                                                            switch (code) {
                                                                                case TRANSACTION_getEspCarSpeed /* 133 */:
                                                                                    data.enforceInterface(DESCRIPTOR);
                                                                                    float _result229 = getEspCarSpeed();
                                                                                    reply.writeNoException();
                                                                                    reply.writeFloat(_result229);
                                                                                    return true;
                                                                                case TRANSACTION_getVcuChargeMode /* 134 */:
                                                                                    data.enforceInterface(DESCRIPTOR);
                                                                                    int _result230 = getVcuChargeMode();
                                                                                    reply.writeNoException();
                                                                                    reply.writeInt(_result230);
                                                                                    return true;
                                                                                case TRANSACTION_getVcuBatteryWastageStatus /* 135 */:
                                                                                    data.enforceInterface(DESCRIPTOR);
                                                                                    float _result231 = getVcuBatteryWastageStatus();
                                                                                    reply.writeNoException();
                                                                                    reply.writeFloat(_result231);
                                                                                    return true;
                                                                                default:
                                                                                    switch (code) {
                                                                                        case TRANSACTION_getVcuBatteryMinTemperature /* 137 */:
                                                                                            data.enforceInterface(DESCRIPTOR);
                                                                                            float _result232 = getVcuBatteryMinTemperature();
                                                                                            reply.writeNoException();
                                                                                            reply.writeFloat(_result232);
                                                                                            return true;
                                                                                        case TRANSACTION_getVcuDrivingMode /* 138 */:
                                                                                            data.enforceInterface(DESCRIPTOR);
                                                                                            int _result233 = getVcuDrivingMode();
                                                                                            reply.writeNoException();
                                                                                            reply.writeInt(_result233);
                                                                                            return true;
                                                                                        case TRANSACTION_setVcuEnergyRecycleLevel /* 139 */:
                                                                                            return onTransact$setVcuEnergyRecycleLevel$(data, reply);
                                                                                        case TRANSACTION_getVcuEnergyRecycleLevel /* 140 */:
                                                                                            data.enforceInterface(DESCRIPTOR);
                                                                                            int _result234 = getVcuEnergyRecycleLevel();
                                                                                            reply.writeNoException();
                                                                                            reply.writeInt(_result234);
                                                                                            return true;
                                                                                        case TRANSACTION_getVcuGearState /* 141 */:
                                                                                            data.enforceInterface(DESCRIPTOR);
                                                                                            int _result235 = getVcuGearState();
                                                                                            reply.writeNoException();
                                                                                            reply.writeInt(_result235);
                                                                                            return true;
                                                                                        case TRANSACTION_getVcuAvalibleDrivingDistance /* 142 */:
                                                                                            data.enforceInterface(DESCRIPTOR);
                                                                                            int _result236 = getVcuAvalibleDrivingDistance();
                                                                                            reply.writeNoException();
                                                                                            reply.writeInt(_result236);
                                                                                            return true;
                                                                                        default:
                                                                                            switch (code) {
                                                                                                case TRANSACTION_setHvacFanSpeedUp /* 148 */:
                                                                                                    return onTransact$setHvacFanSpeedUp$(data, reply);
                                                                                                case TRANSACTION_setHvacFanSpeedLevel /* 149 */:
                                                                                                    return onTransact$setHvacFanSpeedLevel$(data, reply);
                                                                                                case 150:
                                                                                                    return onTransact$setHvacFanSpeedDown$(data, reply);
                                                                                                case TRANSACTION_setHvacFanPosition /* 151 */:
                                                                                                    return onTransact$setHvacFanPosition$(data, reply);
                                                                                                case TRANSACTION_setHvacTempLeftSyncEnabled /* 152 */:
                                                                                                    return onTransact$setHvacTempLeftSyncEnabled$(data, reply);
                                                                                                case TRANSACTION_setHvacPsnSeatTempValue /* 153 */:
                                                                                                    return onTransact$setHvacPsnSeatTempValue$(data, reply);
                                                                                                case TRANSACTION_setHvacPsnSeatTempUp /* 154 */:
                                                                                                    return onTransact$setHvacPsnSeatTempUp$(data, reply);
                                                                                                case TRANSACTION_setHvacPsnSeatTempDown /* 155 */:
                                                                                                    return onTransact$setHvacPsnSeatTempDown$(data, reply);
                                                                                                case TRANSACTION_setHvacDrvSeatTempValue /* 156 */:
                                                                                                    return onTransact$setHvacDrvSeatTempValue$(data, reply);
                                                                                                case TRANSACTION_setHvacDrvSeatTempUp /* 157 */:
                                                                                                    return onTransact$setHvacDrvSeatTempUp$(data, reply);
                                                                                                case TRANSACTION_setHvacDrvSeatTempDown /* 158 */:
                                                                                                    return onTransact$setHvacDrvSeatTempDown$(data, reply);
                                                                                                case TRANSACTION_setHvacAcEnabled /* 159 */:
                                                                                                    return onTransact$setHvacAcEnabled$(data, reply);
                                                                                                case 160:
                                                                                                    return onTransact$setHvacAirPurgeEnabed$(data, reply);
                                                                                                case TRANSACTION_setHvacPowerEnabled /* 161 */:
                                                                                                    return onTransact$setHvacPowerEnabled$(data, reply);
                                                                                                case TRANSACTION_setHvacDefrostMode /* 162 */:
                                                                                                    return onTransact$setHvacDefrostMode$(data, reply);
                                                                                                case TRANSACTION_setHvacAirCycleMode /* 163 */:
                                                                                                    return onTransact$setHvacAirCycleMode$(data, reply);
                                                                                                case TRANSACTION_setHvacAutoModePreference /* 164 */:
                                                                                                    return onTransact$setHvacAutoModePreference$(data, reply);
                                                                                                case TRANSACTION_setHvacAutoModeEnabled /* 165 */:
                                                                                                    return onTransact$setHvacAutoModeEnabled$(data, reply);
                                                                                                case TRANSACTION_getHvacFanSpeedLevel /* 166 */:
                                                                                                    data.enforceInterface(DESCRIPTOR);
                                                                                                    int _result237 = getHvacFanSpeedLevel();
                                                                                                    reply.writeNoException();
                                                                                                    reply.writeInt(_result237);
                                                                                                    return true;
                                                                                                case TRANSACTION_getHvacFanPosition /* 167 */:
                                                                                                    data.enforceInterface(DESCRIPTOR);
                                                                                                    int _result238 = getHvacFanPosition();
                                                                                                    reply.writeNoException();
                                                                                                    reply.writeInt(_result238);
                                                                                                    return true;
                                                                                                case TRANSACTION_getHvacOutsideAirQualityStatus /* 168 */:
                                                                                                    data.enforceInterface(DESCRIPTOR);
                                                                                                    int _result239 = getHvacOutsideAirQualityStatus();
                                                                                                    reply.writeNoException();
                                                                                                    reply.writeInt(_result239);
                                                                                                    return true;
                                                                                                case TRANSACTION_getHvacOutsideAirQualityLevel /* 169 */:
                                                                                                    data.enforceInterface(DESCRIPTOR);
                                                                                                    int _result240 = getHvacOutsideAirQualityLevel();
                                                                                                    reply.writeNoException();
                                                                                                    reply.writeInt(_result240);
                                                                                                    return true;
                                                                                                default:
                                                                                                    return super.onTransact(code, data, reply, flags);
                                                                                            }
                                                                                    }
                                                                            }
                                                                    }
                                                            }
                                                    }
                                            }
                                    }
                            }
                    }
                }
                return onTransact$setMcuIsWakeUpByPhone$(data, reply);
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        /* loaded from: classes.dex */
        public static class Proxy implements IXpVehicle {
            public static IXpVehicle sDefaultImpl;
            private IBinder mRemote;

            Proxy(IBinder remote) {
                this.mRemote = remote;
            }

            @Override // android.os.IInterface
            public IBinder asBinder() {
                return this.mRemote;
            }

            public String getInterfaceDescriptor() {
                return Stub.DESCRIPTOR;
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMcuBurglarAlarmState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(1, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuBurglarAlarmState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMcuIgOn() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(2, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMcuIgOn();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMcuIgOff() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(3, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMcuIgOff();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIgHeartBeat() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(4, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIgHeartBeat();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTheftHeartBeatOn() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(5, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setTheftHeartBeatOn();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTheftHeartBeatOff() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(6, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setTheftHeartBeatOff();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMcuIsWakeUpByPhone(int isWakeUp) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(isWakeUp);
                    boolean _status = this.mRemote.transact(7, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMcuIsWakeUpByPhone(isWakeUp);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public String getMcuHardWareId() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(8, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuHardWareId();
                    }
                    _reply.readException();
                    String _result = _reply.readString();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMqttLogInfo(String clientId, String userName, String passWord, String sslAddr) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(clientId);
                    _data.writeString(userName);
                    _data.writeString(passWord);
                    _data.writeString(sslAddr);
                    boolean _status = this.mRemote.transact(9, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMqttLogInfo(clientId, userName, passWord, sslAddr);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getCpuTemperature() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(10, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCpuTemperature();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMcuHorn(int on) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(on);
                    boolean _status = this.mRemote.transact(11, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMcuHorn(on);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMcuFlash(int on) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(on);
                    boolean _status = this.mRemote.transact(12, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMcuFlash(on);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setDrivingMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(13, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setDrivingMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHardwareVersion() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(14, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHardwareVersion();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendTestMsgToMcu(int[] msg) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeIntArray(msg);
                    boolean _status = this.mRemote.transact(15, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendTestMsgToMcu(msg);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendPwrDebugMsgToMcu(int[] msg) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeIntArray(msg);
                    boolean _status = this.mRemote.transact(16, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendPwrDebugMsgToMcu(msg);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendDugReqMsgToMcu(int[] msg) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeIntArray(msg);
                    boolean _status = this.mRemote.transact(17, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendDugReqMsgToMcu(msg);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendDisplayTypeMsgToMcu(int msg) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(msg);
                    boolean _status = this.mRemote.transact(18, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendDisplayTypeMsgToMcu(msg);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendPmSilentMsgToMcu(int msg) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(msg);
                    boolean _status = this.mRemote.transact(19, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendPmSilentMsgToMcu(msg);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendMcuBmsMsgToMcu(int msg) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(msg);
                    boolean _status = this.mRemote.transact(20, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendMcuBmsMsgToMcu(msg);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendOta1MsgToMcu(int[] msg) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeIntArray(msg);
                    boolean _status = this.mRemote.transact(21, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendOta1MsgToMcu(msg);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendPsuOtaMsgToMcu(int[] msg) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeIntArray(msg);
                    boolean _status = this.mRemote.transact(22, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendPsuOtaMsgToMcu(msg);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendSecretKeyToMcu(byte[] msg) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeByteArray(msg);
                    boolean _status = this.mRemote.transact(23, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendSecretKeyToMcu(msg);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendRequestWakeToMcu(int event) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(event);
                    boolean _status = this.mRemote.transact(24, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendRequestWakeToMcu(event);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendDiagnoseMsgToMcu(int[] cmd) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeIntArray(cmd);
                    boolean _status = this.mRemote.transact(25, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendDiagnoseMsgToMcu(cmd);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendReset4gMsgToMcu(int[] msg) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeIntArray(msg);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendReset4gMsgToMcu, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendReset4gMsgToMcu(msg);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendResetModemMsgToMcu(int msg) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(msg);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendResetModemMsgToMcu, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendResetModemMsgToMcu(msg);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendGpsInfoMsgToMcu(int[] msg) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeIntArray(msg);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendGpsInfoMsgToMcu, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendGpsInfoMsgToMcu(msg);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void updateMcuBin(String path) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(path);
                    boolean _status = this.mRemote.transact(29, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().updateMcuBin(path);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMcuRtcTime(long rtcTime) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeLong(rtcTime);
                    boolean _status = this.mRemote.transact(30, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMcuRtcTime(rtcTime);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public long getMcuRtcTime() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(31, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuRtcTime();
                    }
                    _reply.readException();
                    long _result = _reply.readLong();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMcuTimeZone(int timeZoneValue) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(timeZoneValue);
                    boolean _status = this.mRemote.transact(32, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMcuTimeZone(timeZoneValue);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getPmStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(33, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getPmStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getGSensorOffset() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(36, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getGSensorOffset();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getScreenTempValue() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(37, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScreenTempValue();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int isBcmRearFogLampOn() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(38, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().isBcmRearFogLampOn();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmRearFogLampOn(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(39, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmRearFogLampOn(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmFrontLampMode(int groupid) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(groupid);
                    boolean _status = this.mRemote.transact(40, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmFrontLampMode(groupid);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmFrontLampMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(41, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmFrontLampMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmFarLampState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(42, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmFarLampState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmNearLampState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(43, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmNearLampState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int isBcmOutlineMarkerLampsOn() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(44, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().isBcmOutlineMarkerLampsOn();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmRearViewMirrorPos(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(45, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmRearViewMirrorPos(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmInternalLightOn(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(46, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmInternalLightOn(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int isBcmInternalLightOn() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(47, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().isBcmInternalLightOn();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmEmergencyBrakeWarning(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(48, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmEmergencyBrakeWarning(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int isBcmEmergencyBrakeWarningEnabled() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(49, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().isBcmEmergencyBrakeWarningEnabled();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmAtwsState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(51, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmAtwsState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float[] getBcmAllWindowsPos() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(54, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmAllWindowsPos();
                    }
                    _reply.readException();
                    float[] _result = _reply.createFloatArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmLightMeHomeMode(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmLightMeHomeMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmLightMeHomeMode(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmLightMeHomeMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(58, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmLightMeHomeMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmDrvAutoLockEnabled(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmDrvAutoLockEnabled, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmDrvAutoLockEnabled(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int isBcmDrvAutoLockEnabled() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(60, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().isBcmDrvAutoLockEnabled();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmParkingAutoUnlockEnabled(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(61, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmParkingAutoUnlockEnabled(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int isBcmParkingAutoUnlockEnabled() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(62, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().isBcmParkingAutoUnlockEnabled();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmHazardLampsFlash(int on) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(on);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmHazardLampsFlash, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmHazardLampsFlash(on);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmDoorLock(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(64, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmDoorLock(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmDoorLockState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(66, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmDoorLockState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmTrunkOpen(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(67, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmTrunkOpen(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmTrunkStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(68, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmTrunkStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmWiperInterval(int level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(level);
                    boolean _status = this.mRemote.transact(69, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmWiperInterval(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setChairSlowlyAhead(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(70, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setChairSlowlyAhead(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setChairSlowlyBack(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(71, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setChairSlowlyBack(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setChairSlowlyEnd(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(72, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setChairSlowlyEnd(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getChairDirection() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(73, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getChairDirection();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getChairLocationValue() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(74, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getChairLocationValue();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setChairPositionStart(int level, int height, int angle) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(level);
                    _data.writeInt(height);
                    _data.writeInt(angle);
                    boolean _status = this.mRemote.transact(75, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setChairPositionStart(level, height, angle);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setChairPositionEnd() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(76, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setChairPositionEnd();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmChairWelcomeMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(77, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmChairWelcomeMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmChairWelcomeMode(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(78, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmChairWelcomeMode(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmElectricSeatBeltEnabled(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(79, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmElectricSeatBeltEnabled(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int isBcmElectricSeatBeltEnabled() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(80, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().isBcmElectricSeatBeltEnabled();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmRearSeatBeltWarningEnabled(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(81, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmRearSeatBeltWarningEnabled(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int isBcmRearSeatBeltWarningEnabled() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(82, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().isBcmRearSeatBeltWarningEnabled();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmUnlockResponseMode(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(83, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmUnlockResponseMode(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmUnlockResponseMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(84, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmUnlockResponseMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getBcmDoorsState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(87, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmDoorsState();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmBackDefrostMode_() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmBackDefrostMode_, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmBackDefrostMode_();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmBackDefrostMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmBackDefrostMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmBackDefrostMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmBackDefrostMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmBackDefrostMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmBackDefrostMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmBackMirrorHeatMode_() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmBackMirrorHeatMode_, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmBackMirrorHeatMode_();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmBackMirrorHeatMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmBackMirrorHeatMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmBackMirrorHeatMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmBackMirrorHeatMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmBackMirrorHeatMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmBackMirrorHeatMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmSeatHeatLevel_() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmSeatHeatLevel_, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmSeatHeatLevel_();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmSeatHeatLevel(int level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(level);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmSeatHeatLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmSeatHeatLevel(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmSeatHeatLevel() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(96, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmSeatHeatLevel();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmSeatBlowLevel_() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(97, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmSeatBlowLevel_();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmSeatBlowLevel(int level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(level);
                    boolean _status = this.mRemote.transact(98, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmSeatBlowLevel(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmSeatBlowLevel() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(99, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmSeatBlowLevel();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmIgStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(100, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmIgStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getBcmFrontLeftWinPos() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(102, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmFrontLeftWinPos();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getBcmFrontRightWinPos() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(103, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmFrontRightWinPos();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getBcmRearLeftWinPos() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(104, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmRearLeftWinPos();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getBcmRearRightWinPos() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(105, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmRearRightWinPos();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getDriverDoorState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(106, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getDriverDoorState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setFactoryOledData(byte[] data) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeByteArray(data);
                    boolean _status = this.mRemote.transact(107, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setFactoryOledData(data);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setFactoryOledDisplayMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(108, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setFactoryOledDisplayMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmChargePortUnlock(int port, int unlock) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(port);
                    _data.writeInt(unlock);
                    boolean _status = this.mRemote.transact(109, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmChargePortUnlock(port, unlock);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getSeatErrorState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSeatErrorState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSeatErrorState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVentilate() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVentilate, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVentilate();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getWelcomeModeBackStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(112, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getWelcomeModeBackStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void startCharge() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(113, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().startCharge();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVcuChargeMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVcuChargeMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVcuChargeMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuChargingPlugStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuChargingPlugStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuChargingPlugStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuChargeStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuChargeStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuChargeStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuElectricQuantityPercent() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuElectricQuantityPercent, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuElectricQuantityPercent();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuBatteryCoolingState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuBatteryCoolingState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuBatteryCoolingState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getVcuAcPowerConsume() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuAcPowerConsume, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuAcPowerConsume();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuBatteryWarmingStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(125, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuBatteryWarmingStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuChargeRemainingTime() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuChargeRemainingTime, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuChargeRemainingTime();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getVcuAvgVehiclePowerConsume() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuAvgVehiclePowerConsume, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuAvgVehiclePowerConsume();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getEspCarSpeed() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getEspCarSpeed, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getEspCarSpeed();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuChargeMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuChargeMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuChargeMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getVcuBatteryWastageStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuBatteryWastageStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuBatteryWastageStatus();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getVcuBatteryMinTemperature() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuBatteryMinTemperature, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuBatteryMinTemperature();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuDrivingMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuDrivingMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuDrivingMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVcuEnergyRecycleLevel(int level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(level);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVcuEnergyRecycleLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVcuEnergyRecycleLevel(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuEnergyRecycleLevel() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuEnergyRecycleLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuEnergyRecycleLevel();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuGearState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuGearState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuGearState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuAvalibleDrivingDistance() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuAvalibleDrivingDistance, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuAvalibleDrivingDistance();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacFanSpeedUp(int value) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(value);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacFanSpeedUp, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacFanSpeedUp(value);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacFanSpeedLevel(int level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(level);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacFanSpeedLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacFanSpeedLevel(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacFanSpeedDown(int value) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(value);
                    boolean _status = this.mRemote.transact(150, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacFanSpeedDown(value);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacFanPosition(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacFanPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacFanPosition(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacTempLeftSyncEnabled(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacTempLeftSyncEnabled, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacTempLeftSyncEnabled(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacPsnSeatTempValue(float level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeFloat(level);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacPsnSeatTempValue, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacPsnSeatTempValue(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacPsnSeatTempUp(float value) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeFloat(value);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacPsnSeatTempUp, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacPsnSeatTempUp(value);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacPsnSeatTempDown(float value) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeFloat(value);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacPsnSeatTempDown, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacPsnSeatTempDown(value);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacDrvSeatTempValue(float level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeFloat(level);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacDrvSeatTempValue, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacDrvSeatTempValue(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacDrvSeatTempUp(float value) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeFloat(value);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacDrvSeatTempUp, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacDrvSeatTempUp(value);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacDrvSeatTempDown(float value) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeFloat(value);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacDrvSeatTempDown, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacDrvSeatTempDown(value);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacAcEnabled(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacAcEnabled, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacAcEnabled(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacAirPurgeEnabed(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(160, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacAirPurgeEnabed(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacPowerEnabled(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacPowerEnabled, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacPowerEnabled(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacDefrostMode(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacDefrostMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacDefrostMode(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacAirCycleMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacAirCycleMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacAirCycleMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacAutoModePreference(int level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(level);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacAutoModePreference, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacAutoModePreference(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacAutoModeEnabled(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacAutoModeEnabled, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacAutoModeEnabled(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacFanSpeedLevel() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacFanSpeedLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacFanSpeedLevel();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacFanPosition() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacFanPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacFanPosition();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacOutsideAirQualityStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacOutsideAirQualityStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacOutsideAirQualityStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacOutsideAirQualityLevel() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacOutsideAirQualityLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacOutsideAirQualityLevel();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacAirCycleMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacAirCycleMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacAirCycleMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacAutoModePreference() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacAutoModePreference, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacAutoModePreference();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getHvacPsnSeatTempValue() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacPsnSeatTempValue, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacPsnSeatTempValue();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getHvacDrvSeatTempValue() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacDrvSeatTempValue, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacDrvSeatTempValue();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getHvacInnerTemp() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacInnerTemp, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacInnerTemp();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacTempLeftSyncState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacTempLeftSyncState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacTempLeftSyncState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacAcState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(177, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacAcState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacAirPurgeSwitchState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(178, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacAirPurgeSwitchState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacPowerState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(179, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacPowerState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacDefrostMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacDefrostMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacDefrostMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacAutoModeState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacAutoModeState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacAutoModeState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void calibrateTpmsTirePressure() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_calibrateTpmsTirePressure, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().calibrateTpmsTirePressure();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTpmsTirePressureStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTpmsTirePressureStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTpmsTirePressureStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getTailRadarLevel() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTailRadarLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTailRadarLevel();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getTailRadarFaultSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTailRadarFaultSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTailRadarFaultSt();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getFrontRadarLevel() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getFrontRadarLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getFrontRadarLevel();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getFrontRadarFaultSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getFrontRadarFaultSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getFrontRadarFaultSt();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getNearestEnableRadar() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getNearestEnableRadar, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getNearestEnableRadar();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAutoParkErrorCode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAutoParkErrorCode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAutoParkErrorCode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float[] getMileageExtraParams() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMileageExtraParams, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMileageExtraParams();
                    }
                    _reply.readException();
                    float[] _result = _reply.createFloatArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getGpsSpeed() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getGpsSpeed, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getGpsSpeed();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSuperParkMode(int active) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(active);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSuperParkMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSuperParkMode(active);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSideReversingWarning(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(193, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSideReversingWarning(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuTest(int cmd) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(cmd);
                    boolean _status = this.mRemote.transact(194, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setScuTest(cmd);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setRadarWarningVoiceStatus(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(195, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setRadarWarningVoiceStatus(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setPhoneSMButton(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setPhoneSMButton, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setPhoneSMButton(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setPhoneAPButton(int action) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(action);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setPhoneAPButton, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setPhoneAPButton(action);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setParkLotRecvIndex2Scu(int index) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(index);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setParkLotRecvIndex2Scu, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setParkLotRecvIndex2Scu(index);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setParkLotChoseIndex2Scu(int index) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(index);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setParkLotChoseIndex2Scu, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setParkLotChoseIndex2Scu(index);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLocationInfo(float latitude, float longitude, float altitude, float bearing, float accuracy, long gpsTime) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                } catch (Throwable th) {
                    th = th;
                }
                try {
                    _data.writeFloat(latitude);
                } catch (Throwable th2) {
                    th = th2;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
                try {
                    _data.writeFloat(longitude);
                } catch (Throwable th3) {
                    th = th3;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
                try {
                    _data.writeFloat(altitude);
                } catch (Throwable th4) {
                    th = th4;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
                try {
                    _data.writeFloat(bearing);
                } catch (Throwable th5) {
                    th = th5;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
                try {
                    _data.writeFloat(accuracy);
                    _data.writeLong(gpsTime);
                    boolean _status = this.mRemote.transact(200, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLocationInfo(latitude, longitude, altitude, bearing, accuracy, gpsTime);
                        _reply.recycle();
                        _data.recycle();
                        return;
                    }
                    _reply.readException();
                    _reply.recycle();
                    _data.recycle();
                } catch (Throwable th6) {
                    th = th6;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLaneDepartureWarning(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLaneDepartureWarning, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLaneDepartureWarning(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLaneChangeAssist(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLaneChangeAssist, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLaneChangeAssist(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIntelligentSpeedLimit(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIntelligentSpeedLimit, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIntelligentSpeedLimit(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setFrontCollisionSecurity(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setFrontCollisionSecurity, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setFrontCollisionSecurity(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBlindAreaDetectionWarning(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBlindAreaDetectionWarning, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBlindAreaDetectionWarning(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAutoPilotLocationInfo(float latitude, float longitude, float altitude, float bearing, float accuracy, float gpsSpeed, long gpsTime) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                } catch (Throwable th) {
                    th = th;
                }
                try {
                    _data.writeFloat(latitude);
                    try {
                        _data.writeFloat(longitude);
                    } catch (Throwable th2) {
                        th = th2;
                        _reply.recycle();
                        _data.recycle();
                        throw th;
                    }
                    try {
                        _data.writeFloat(altitude);
                    } catch (Throwable th3) {
                        th = th3;
                        _reply.recycle();
                        _data.recycle();
                        throw th;
                    }
                    try {
                        _data.writeFloat(bearing);
                        _data.writeFloat(accuracy);
                        _data.writeFloat(gpsSpeed);
                        _data.writeLong(gpsTime);
                        boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAutoPilotLocationInfo, _data, _reply, 0);
                        if (!_status && Stub.getDefaultImpl() != null) {
                            Stub.getDefaultImpl().setAutoPilotLocationInfo(latitude, longitude, altitude, bearing, accuracy, gpsSpeed, gpsTime);
                            _reply.recycle();
                            _data.recycle();
                            return;
                        }
                        _reply.readException();
                        _reply.recycle();
                        _data.recycle();
                    } catch (Throwable th4) {
                        th = th4;
                        _reply.recycle();
                        _data.recycle();
                        throw th;
                    }
                } catch (Throwable th5) {
                    th = th5;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAutoParkOutState(int state) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(state);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAutoParkOutState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAutoParkOutState(state);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAutoParkInState(int state) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(state);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAutoParkInState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAutoParkInState(state);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getScu3FELogData() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScu3FELogData, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScu3FELogData();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getScu3FDLogData() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScu3FDLogData, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScu3FDLogData();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getScu322LogData() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScu322LogData, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScu322LogData();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getSideReversingWarning() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(212, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSideReversingWarning();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuOperationTips() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuOperationTips, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuOperationTips();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getParkingStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getParkingStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getParkingStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLaneDepartureWarning() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLaneDepartureWarning, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLaneDepartureWarning();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLaneChangeAssist() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLaneChangeAssist, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLaneChangeAssist();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getIntelligentSpeedLimit() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getIntelligentSpeedLimit, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getIntelligentSpeedLimit();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getFrontCollisionSecurity() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getFrontCollisionSecurity, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getFrontCollisionSecurity();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBlindAreaDetectionWarning() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBlindAreaDetectionWarning, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBlindAreaDetectionWarning();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getRadarWarningVoiceStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(220, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getRadarWarningVoiceStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAvmCameraAngle(int targetAngle) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(targetAngle);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAvmCameraAngle, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAvmCameraAngle(targetAngle);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAvmCameraAngle() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAvmCameraAngle, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAvmCameraAngle();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAvmRoofCameraRaise(int up) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(up);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAvmRoofCameraRaise, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAvmRoofCameraRaise(up);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAvmRoofCameraHeightStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(224, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAvmRoofCameraHeightStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAvmCameraDisplayMode(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAvmCameraDisplayMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAvmCameraDisplayMode(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAvmCameraDisplayMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAvmCameraDisplayMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAvmCameraDisplayMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int hasRoofCamera() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_hasRoofCamera, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().hasRoofCamera();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float[] getFrontRadarData() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getFrontRadarData, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getFrontRadarData();
                    }
                    _reply.readException();
                    float[] _result = _reply.createFloatArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float[] getTailRadarData() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTailRadarData, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTailRadarData();
                    }
                    _reply.readException();
                    float[] _result = _reply.createFloatArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getSteerWheelRotationAngle() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSteerWheelRotationAngle, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSteerWheelRotationAngle();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAvmRoofCameraState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAvmRoofCameraState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAvmRoofCameraState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAvmRoofCameraPosition() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAvmRoofCameraPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAvmRoofCameraPosition();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAvmCameraInitState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAvmCameraInitState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAvmCameraInitState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBmsBatteryCapacity() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBmsBatteryCapacity, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBmsBatteryCapacity();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBmsBatteryType() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBmsBatteryType, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBmsBatteryType();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCcsFaultInfo() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCcsFaultInfo, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCcsFaultInfo();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBmsBatteryChipSwVersion() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBmsBatteryChipSwVersion, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBmsBatteryChipSwVersion();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBmsFailureLvl() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(239, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBmsFailureLvl();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBmsVoltMaxNum() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBmsVoltMaxNum, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBmsVoltMaxNum();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBmsVoltMinNum() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBmsVoltMinNum, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBmsVoltMinNum();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBmsHottestCellNum() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBmsHottestCellNum, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBmsHottestCellNum();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBmsColdestCellNum() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBmsColdestCellNum, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBmsColdestCellNum();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBmsMaxTemp() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBmsMaxTemp, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBmsMaxTemp();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getBmsVoltMax() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBmsVoltMax, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBmsVoltMax();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getBmsVoltMin() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBmsVoltMin, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBmsVoltMin();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBmsInsulationResistance() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBmsInsulationResistance, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBmsInsulationResistance();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getBmsBatteryCurrent() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBmsBatteryCurrent, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBmsBatteryCurrent();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAdasMeta(byte[] metaValues) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeByteArray(metaValues);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAdasMeta, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAdasMeta(metaValues);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAdasPosition(byte[] positionValues) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeByteArray(positionValues);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAdasPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAdasPosition(positionValues);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAdasProfLong(byte[] profLongValues) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeByteArray(profLongValues);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAdasProfLong, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAdasProfLong(profLongValues);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAdasProfShort(byte[] profShortValues) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeByteArray(profShortValues);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAdasProfShort, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAdasProfShort(profShortValues);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAdasSegment(byte[] segmentValues) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeByteArray(segmentValues);
                    boolean _status = this.mRemote.transact(254, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAdasSegment(segmentValues);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAdasStub(byte[] stubValues) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeByteArray(stubValues);
                    boolean _status = this.mRemote.transact(255, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAdasStub(stubValues);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getDcdcFailStInfo() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(256, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getDcdcFailStInfo();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getDcdcStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(257, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getDcdcStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setEpsWorkMode(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setEpsWorkMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setEpsWorkMode(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getEpsWorkMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getEpsWorkMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getEpsWorkMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setEspHdcEnabled(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setEspHdcEnabled, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setEspHdcEnabled(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int isEspHdcEnabled() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_isEspHdcEnabled, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().isEspHdcEnabled();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setEspWorkMode(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setEspWorkMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setEspWorkMode(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getEspWorkMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getEspWorkMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getEspWorkMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setEspAvhEnabled(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setEspAvhEnabled, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setEspAvhEnabled(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int isEspAvhEnabled() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_isEspAvhEnabled, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().isEspAvhEnabled();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void resetIcmMeterMileageA() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_resetIcmMeterMileageA, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().resetIcmMeterMileageA();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void resetIcmMeterMileageB() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_resetIcmMeterMileageB, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().resetIcmMeterMileageB();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmAlarmVolume(int volumeType) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(volumeType);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmAlarmVolume, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmAlarmVolume(volumeType);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getIcmAlarmVolume() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getIcmAlarmVolume, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getIcmAlarmVolume();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmTimeFormat(int index) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(index);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmTimeFormat, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmTimeFormat(index);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmTemperature(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmTemperature, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmTemperature(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getIcmTemperature() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(272, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getIcmTemperature();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmWindPower(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmWindPower, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmWindPower(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getIcmWindPower() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getIcmWindPower, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getIcmWindPower();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmWindMode(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmWindMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmWindMode(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getIcmWindMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getIcmWindMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getIcmWindMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmMediaSource(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmMediaSource, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmMediaSource(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getIcmMediaSource() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getIcmMediaSource, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getIcmMediaSource();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmScreenLight(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmScreenLight, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmScreenLight(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getIcmScreenLight() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getIcmScreenLight, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getIcmScreenLight();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmNavigation(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmNavigation, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmNavigation(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getIcmNavigation() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getIcmNavigation, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getIcmNavigation();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmDayNightSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmDayNightSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmDayNightSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getIcmDayNightSwitch() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getIcmDayNightSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getIcmDayNightSwitch();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSpeedLimitWarningSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSpeedLimitWarningSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSpeedLimitWarningSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getSpeedLimitWarningSwitch() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSpeedLimitWarningSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSpeedLimitWarningSwitch();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSpeedLimitWarningValue(int value) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(value);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSpeedLimitWarningValue, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSpeedLimitWarningValue(value);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getSpeedLimitWarningValue() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSpeedLimitWarningValue, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSpeedLimitWarningValue();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmWindBlowMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmWindBlowMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmWindBlowMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getIcmWindBlowMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getIcmWindBlowMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getIcmWindBlowMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmWindLevel(int level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(level);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmWindLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmWindLevel(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getIcmWindLevel() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getIcmWindLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getIcmWindLevel();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmDriverTempValue(float value) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeFloat(value);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmDriverTempValue, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmDriverTempValue(value);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getIcmDriverTempValue() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getIcmDriverTempValue, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getIcmDriverTempValue();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMeterSoundState(int type, int volume, int mute) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    _data.writeInt(volume);
                    _data.writeInt(mute);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMeterSoundState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMeterSoundState(type, volume, mute);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendContacts(byte[] json) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeByteArray(json);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendContacts, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendContacts(json);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setWeatherInfo(byte[] json) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeByteArray(json);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setWeatherInfo, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setWeatherInfo(json);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setNavigationInfo(byte[] json) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeByteArray(json);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setNavigationInfo, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setNavigationInfo(json);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMusicInfo(byte[] json, byte[] image) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeByteArray(json);
                    _data.writeByteArray(image);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMusicInfo, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMusicInfo(json, image);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setNetRadioInfo(byte[] json, byte[] image) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeByteArray(json);
                    _data.writeByteArray(image);
                    boolean _status = this.mRemote.transact(300, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setNetRadioInfo(json, image);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setRadioInfo(byte[] json) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeByteArray(json);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setRadioInfo, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setRadioInfo(json);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBtMusicState(byte[] json) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeByteArray(json);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBtMusicState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBtMusicState(json);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmSystemTimeValue(int hour, int minutes) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(hour);
                    _data.writeInt(minutes);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmSystemTimeValue, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmSystemTimeValue(hour, minutes);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getMeterMileageA() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMeterMileageA, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMeterMileageA();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getMeterMileageB() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMeterMileageB, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMeterMileageB();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getDriveTotalMileage() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getDriveTotalMileage, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getDriveTotalMileage();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getLastChargeMileage() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLastChargeMileage, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLastChargeMileage();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getLastStartUpMileage() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLastStartUpMileage, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLastStartUpMileage();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMeterBackLightLevel(int level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(level);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMeterBackLightLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMeterBackLightLevel(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSpeechStateInfo(byte[] info) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeByteArray(info);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSpeechStateInfo, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSpeechStateInfo(info);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getIcmConnectionState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getIcmConnectionState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getIcmConnectionState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendRomBinMsg(int rpcNum, byte[] bjson, byte[] bin) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(rpcNum);
                    _data.writeByteArray(bjson);
                    _data.writeByteArray(bin);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendRomBinMsg, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendRomBinMsg(rpcNum, bjson, bin);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmAccount(String account) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(account);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmAccount, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmAccount(account);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setNotifyMessage(byte[] info) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeByteArray(info);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setNotifyMessage, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setNotifyMessage(info);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getIpuFailStInfo() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getIpuFailStInfo, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getIpuFailStInfo();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCtrlVolt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCtrlVolt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCtrlVolt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCtrlCurr() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCtrlCurr, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCtrlCurr();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCtrlTemp() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCtrlTemp, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCtrlTemp();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMotorTemp() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMotorTemp, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMotorTemp();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getTorque() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(320, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTorque();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getRollSpeed() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getRollSpeed, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getRollSpeed();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMotorStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMotorStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMotorStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setPowerOnTunner() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setPowerOnTunner, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setPowerOnTunner();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setPowerOffTunner() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setPowerOffTunner, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setPowerOffTunner();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setRadioSearchStationUp() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setRadioSearchStationUp, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setRadioSearchStationUp();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setRadioSearchStationDown() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setRadioSearchStationDown, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setRadioSearchStationDown();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setStartFullBandScan() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setStartFullBandScan, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setStartFullBandScan();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setStopFullBandScan() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setStopFullBandScan, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setStopFullBandScan();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setRadioBand(int band) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(band);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setRadioBand, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setRadioBand(band);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setRadioVolumePercent(int channel, int vol) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(channel);
                    _data.writeInt(vol);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setRadioVolumePercent, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setRadioVolumePercent(channel, vol);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setRadioVolumeAutoFocus(int percent) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(percent);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setRadioVolumeAutoFocus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setRadioVolumeAutoFocus(percent);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getRadioVolumeAutoFocus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getRadioVolumeAutoFocus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getRadioVolumeAutoFocus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setFmVolume(int channel, int volume) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(channel);
                    _data.writeInt(volume);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setFmVolume, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setFmVolume(channel, volume);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setCarExhibitionModeVol(int percent) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(percent);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setCarExhibitionModeVol, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setCarExhibitionModeVol(percent);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setRadioFrequency(int band, int frequency) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(band);
                    _data.writeInt(frequency);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setRadioFrequency, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setRadioFrequency(band, frequency);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getRadioFrequency() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getRadioFrequency, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getRadioFrequency();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAudioMode(int item, int value) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(item);
                    _data.writeInt(value);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAudioMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAudioMode(item, value);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getAudioMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAudioMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAudioMode();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public String getRadioStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getRadioStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getRadioStatus();
                    }
                    _reply.readException();
                    String _result = _reply.readString();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public String getAudioDspStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAudioDspStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAudioDspStatus();
                    }
                    _reply.readException();
                    String _result = _reply.readString();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAudioGEQParams(int band, int frequence, int liftCurve, int gain) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(band);
                    _data.writeInt(frequence);
                    _data.writeInt(liftCurve);
                    _data.writeInt(gain);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAudioGEQParams, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAudioGEQParams(band, frequence, liftCurve, gain);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAudioBalanceFader(int value1, int value2) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(value1);
                    _data.writeInt(value2);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAudioBalanceFader, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAudioBalanceFader(value1, value2);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAudioParameters() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAudioParameters, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAudioParameters();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getBmsChargeCompleteTime() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBmsChargeCompleteTime, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBmsChargeCompleteTime();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public long getTboxRtcTimeStamp() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTboxRtcTimeStamp, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTboxRtcTimeStamp();
                    }
                    _reply.readException();
                    long _result = _reply.readLong();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTboxWifiStatus(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setTboxWifiStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setTboxWifiStatus(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTboxWifiGatewayInfo(String info) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(info);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setTboxWifiGatewayInfo, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setTboxWifiGatewayInfo(info);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendTboxRemoteDiagInfo(String diagInfo) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(diagInfo);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendTboxRemoteDiagInfo, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendTboxRemoteDiagInfo(diagInfo);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getRemoteDiagCaptureRequest() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getRemoteDiagCaptureRequest, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getRemoteDiagCaptureRequest();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setRemoteDiagCaptureResponse(String response) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(response);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setRemoteDiagCaptureResponse, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setRemoteDiagCaptureResponse(response);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void getTboxVersionInfoAsync() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTboxVersionInfoAsync, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().getTboxVersionInfoAsync();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void beginTboxOTA() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_beginTboxOTA, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().beginTboxOTA();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void stopTboxOTA() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_stopTboxOTA, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().stopTboxOTA();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getOTAProgress() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getOTAProgress, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getOTAProgress();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public String getTBoxModemInfo() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTBoxModemInfo, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTBoxModemInfo();
                    }
                    _reply.readException();
                    String _result = _reply.readString();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTBoxConnectionStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTBoxConnectionStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTBoxConnectionStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAnalogSoundEffect(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAnalogSoundEffect, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAnalogSoundEffect(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAnalogSoundEnable(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAnalogSoundEnable, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAnalogSoundEnable(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void openBcmBonnet() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_openBcmBonnet, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().openBcmBonnet();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int isBcmBonnetOpened() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_isBcmBonnetOpened, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().isBcmBonnetOpened();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setEspIbsBrakeMode(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setEspIbsBrakeMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setEspIbsBrakeMode(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getEspIbsBrakeMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getEspIbsBrakeMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getEspIbsBrakeMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTBoxChargeLimitValue() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTBoxChargeLimitValue, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTBoxChargeLimitValue();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTBoxChargeLimitValue(int value) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(value);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setTBoxChargeLimitValue, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setTBoxChargeLimitValue(value);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void stopCharge() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_stopCharge, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().stopCharge();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAtlOpen(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAtlOpen, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAtlOpen(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAtlOpen() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAtlOpen, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAtlOpen();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAtlReady() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAtlReady, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAtlReady();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getDoubleThemeColor() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getDoubleThemeColor, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getDoubleThemeColor();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setDoubleThemeColor(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setDoubleThemeColor, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setDoubleThemeColor(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setThemeFirstColor(int color) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(color);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setThemeFirstColor, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setThemeFirstColor(color);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getThemeFirstColor() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getThemeFirstColor, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getThemeFirstColor();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setThemeSecondColor(int color) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(color);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setThemeSecondColor, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setThemeSecondColor(color);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getThemeSecondColor() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getThemeSecondColor, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getThemeSecondColor();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAutoBrightness(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAutoBrightness, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAutoBrightness(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAutoBrightness() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAutoBrightness, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAutoBrightness();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBrightnessLevel(int brightness) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(brightness);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBrightnessLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBrightnessLevel(brightness);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBrightnessLevel() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBrightnessLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBrightnessLevel();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTwoLightData(byte protocol, byte[] lightPosition, boolean hold, byte[] color, byte[] bright, byte[] time) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                } catch (Throwable th) {
                    th = th;
                }
                try {
                    _data.writeByte(protocol);
                } catch (Throwable th2) {
                    th = th2;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
                try {
                    _data.writeByteArray(lightPosition);
                    _data.writeInt(hold ? 1 : 0);
                } catch (Throwable th3) {
                    th = th3;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
                try {
                    _data.writeByteArray(color);
                    try {
                        _data.writeByteArray(bright);
                        try {
                            _data.writeByteArray(time);
                        } catch (Throwable th4) {
                            th = th4;
                        }
                    } catch (Throwable th5) {
                        th = th5;
                        _reply.recycle();
                        _data.recycle();
                        throw th;
                    }
                    try {
                        boolean _status = this.mRemote.transact(Stub.TRANSACTION_setTwoLightData, _data, _reply, 0);
                        if (!_status && Stub.getDefaultImpl() != null) {
                            Stub.getDefaultImpl().setTwoLightData(protocol, lightPosition, hold, color, bright, time);
                            _reply.recycle();
                            _data.recycle();
                            return;
                        }
                        _reply.readException();
                        _reply.recycle();
                        _data.recycle();
                    } catch (Throwable th6) {
                        th = th6;
                        _reply.recycle();
                        _data.recycle();
                        throw th;
                    }
                } catch (Throwable th7) {
                    th = th7;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setGroutLightData(byte groupNum, byte solution, int lightlist, boolean hold, byte color, byte bright, byte time) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                } catch (Throwable th) {
                    th = th;
                }
                try {
                    _data.writeByte(groupNum);
                } catch (Throwable th2) {
                    th = th2;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
                try {
                    _data.writeByte(solution);
                } catch (Throwable th3) {
                    th = th3;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
                try {
                    _data.writeInt(lightlist);
                    _data.writeInt(hold ? 1 : 0);
                    try {
                        _data.writeByte(color);
                    } catch (Throwable th4) {
                        th = th4;
                        _reply.recycle();
                        _data.recycle();
                        throw th;
                    }
                    try {
                        _data.writeByte(bright);
                        _data.writeByte(time);
                        boolean _status = this.mRemote.transact(Stub.TRANSACTION_setGroutLightData, _data, _reply, 0);
                        if (!_status && Stub.getDefaultImpl() != null) {
                            Stub.getDefaultImpl().setGroutLightData(groupNum, solution, lightlist, hold, color, bright, time);
                            _reply.recycle();
                            _data.recycle();
                            return;
                        }
                        _reply.readException();
                        _reply.recycle();
                        _data.recycle();
                    } catch (Throwable th5) {
                        th = th5;
                        _reply.recycle();
                        _data.recycle();
                        throw th;
                    }
                } catch (Throwable th6) {
                    th = th6;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAllLightData(boolean hold, byte[] color, byte[] bright, byte[] time) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(hold ? 1 : 0);
                    _data.writeByteArray(color);
                    _data.writeByteArray(bright);
                    _data.writeByteArray(time);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAllLightData, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAllLightData(hold, color, bright, time);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmWindowMovePosition(int window, float position) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(window);
                    _data.writeFloat(position);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmWindowMovePosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmWindowMovePosition(window, position);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacFanSpeedInc() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacFanSpeedInc, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacFanSpeedInc();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacFanSpeedDec() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacFanSpeedDec, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacFanSpeedDec();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacDrvSeatTempInc() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacDrvSeatTempInc, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacDrvSeatTempInc();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacDrvSeatTempDec() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacDrvSeatTempDec, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacDrvSeatTempDec();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacPsnSeatTempInc() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacPsnSeatTempInc, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacPsnSeatTempInc();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacPsnSeatTempDec() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacPsnSeatTempDec, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacPsnSeatTempDec();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMcuBatteryStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuBatteryStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuBatteryStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMcuIgState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuIgState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuIgState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMcuCameraStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuCameraStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuCameraStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMcuLampStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuLampStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuLampStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMcuChargeStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuChargeStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuChargeStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void requestTBoxModemStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_requestTBoxModemStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().requestTBoxModemStatus();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public String getTBoxLastApnMsg() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTBoxLastApnMsg, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTBoxLastApnMsg();
                    }
                    _reply.readException();
                    String _result = _reply.readString();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public String getTBoxLastModemMsg() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTBoxLastModemMsg, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTBoxLastModemMsg();
                    }
                    _reply.readException();
                    String _result = _reply.readString();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void requestTBoxBandModemStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_requestTBoxBandModemStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().requestTBoxBandModemStatus();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTBoxLastBandModemMsg() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTBoxLastBandModemMsg, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTBoxLastBandModemMsg();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTBoxBandModem(String value) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(value);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setTBoxBandModem, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setTBoxBandModem(value);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public String getTBoxBandModem() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTBoxBandModem, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTBoxBandModem();
                    }
                    _reply.readException();
                    String _result = _reply.readString();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAtlDowOpen(int on) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(on);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAtlDowOpen, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAtlDowOpen(on);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAtlDowOpen() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAtlDowOpen, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAtlDowOpen();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLluEnableStatus(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLluEnableStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLluEnableStatus(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLluEnableStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLluEnableStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLluEnableStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLluWakeWaitSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLluWakeWaitSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLluWakeWaitSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLluWakeWaitSwitch() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLluWakeWaitSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLluWakeWaitSwitch();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLluShowOffSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLluShowOffSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLluShowOffSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLluShowOffSwitch() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLluShowOffSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLluShowOffSwitch();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLluSleepSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLluSleepSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLluSleepSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLluSleepSwitch() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLluSleepSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLluSleepSwitch();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLluChargingSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLluChargingSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLluChargingSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLluChargingSwitch() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLluChargingSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLluChargingSwitch();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLluPhotoSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLluPhotoSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLluPhotoSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLluPhotoSwitch() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLluPhotoSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLluPhotoSwitch();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLluPrivateCtrl(boolean start, int ftype, int ftick, int rtype, int rtick, int personAngle, int personWalkDirection) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(start ? 1 : 0);
                } catch (Throwable th) {
                    th = th;
                }
                try {
                    _data.writeInt(ftype);
                } catch (Throwable th2) {
                    th = th2;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
                try {
                    _data.writeInt(ftick);
                } catch (Throwable th3) {
                    th = th3;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
                try {
                    _data.writeInt(rtype);
                    try {
                        _data.writeInt(rtick);
                    } catch (Throwable th4) {
                        th = th4;
                        _reply.recycle();
                        _data.recycle();
                        throw th;
                    }
                    try {
                        _data.writeInt(personAngle);
                        _data.writeInt(personWalkDirection);
                        boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLluPrivateCtrl, _data, _reply, 0);
                        if (!_status && Stub.getDefaultImpl() != null) {
                            Stub.getDefaultImpl().setLluPrivateCtrl(start, ftype, ftick, rtype, rtick, personAngle, personWalkDirection);
                            _reply.recycle();
                            _data.recycle();
                            return;
                        }
                        _reply.readException();
                        _reply.recycle();
                        _data.recycle();
                    } catch (Throwable th5) {
                        th = th5;
                        _reply.recycle();
                        _data.recycle();
                        throw th;
                    }
                } catch (Throwable th6) {
                    th = th6;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAvasWaitForWakeUpSoundSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAvasWaitForWakeUpSoundSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAvasWaitForWakeUpSoundSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAvasWaitForWakeUpSoundState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAvasWaitForWakeUpSoundState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAvasWaitForWakeUpSoundState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAvasFullChargeWaitForWakeUpSoundSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAvasFullChargeWaitForWakeUpSoundSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAvasFullChargeWaitForWakeUpSoundSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAvasFullChargeWaitForWakeUpSoundState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAvasFullChargeWaitForWakeUpSoundState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAvasFullChargeWaitForWakeUpSoundState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAvasSleepSoundSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAvasSleepSoundSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAvasSleepSoundSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAvasSleepSoundState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAvasSleepSoundState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAvasSleepSoundState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAvasAcChargingSoundSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAvasAcChargingSoundSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAvasAcChargingSoundSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAvasAcChargingSoundState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAvasAcChargingSoundState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAvasAcChargingSoundState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAvasDcChargingSoundSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAvasDcChargingSoundSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAvasDcChargingSoundSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAvasDcChargingSoundState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAvasDcChargingSoundState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAvasDcChargingSoundState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAvasDisconnectChargingSoundSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAvasDisconnectChargingSoundSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAvasDisconnectChargingSoundSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAvasDisconnectChargingSoundState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAvasDisconnectChargingSoundState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAvasDisconnectChargingSoundState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAvasLowSpeedSoundSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAvasLowSpeedSoundSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAvasLowSpeedSoundSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAvasLowSpeedSoundSwitch() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAvasLowSpeedSoundSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAvasLowSpeedSoundSwitch();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAvasLowSpeedSoundEffect(int sound) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sound);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAvasLowSpeedSoundEffect, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAvasLowSpeedSoundEffect(sound);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAvasLowSpeedSoundEffect() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAvasLowSpeedSoundEffect, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAvasLowSpeedSoundEffect();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAvasExternalSoundCmd(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAvasExternalSoundCmd, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAvasExternalSoundCmd(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAvasFriendlySayHiSound(int sound) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sound);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAvasFriendlySayHiSound, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAvasFriendlySayHiSound(sound);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAvasFriendlySayHiSound() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAvasFriendlySayHiSound, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAvasFriendlySayHiSound();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAvasExternalVolume(int vol) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(vol);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAvasExternalVolume, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAvasExternalVolume(vol);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAvasExternalVolume() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAvasExternalVolume, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAvasExternalVolume();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAvasLowSpeedVolume(int vol) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(vol);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAvasLowSpeedVolume, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAvasLowSpeedVolume(vol);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAvasLowSpeedVolume() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAvasLowSpeedVolume, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAvasLowSpeedVolume();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLluBreathMode(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLluBreathMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLluBreathMode(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLluBreathMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLluBreathMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLluBreathMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLluCurrentFunction() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLluCurrentFunction, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLluCurrentFunction();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAvasExternalSoundModeCmd(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAvasExternalSoundModeCmd, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAvasExternalSoundModeCmd(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmDrvSeatHorizMove(int control, int directio) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(directio);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmDrvSeatHorizMove, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmDrvSeatHorizMove(control, directio);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmDrvSeatBackMove(int control, int directio) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(directio);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmDrvSeatBackMove, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmDrvSeatBackMove(control, directio);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmDrvSeatVertiMove(int control, int directio) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(directio);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmDrvSeatVertiMove, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmDrvSeatVertiMove(control, directio);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmDrvLegVertiMove(int control, int directio) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(directio);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmDrvLegVertiMove, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmDrvLegVertiMove(control, directio);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmDrvLumbHorzMove(int control, int directio) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(directio);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmDrvLumbHorzMove, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmDrvLumbHorzMove(control, directio);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmDrvLumbVertiMove(int control, int directio) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(directio);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmDrvLumbVertiMove, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmDrvLumbVertiMove(control, directio);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmDrvSeatHorizPosition(int pos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(pos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmDrvSeatHorizPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmDrvSeatHorizPosition(pos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMsmDrvSeatHorizPosition() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmDrvSeatHorizPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmDrvSeatHorizPosition();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmDrvSeatVertiPosition(int pos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(pos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmDrvSeatVertiPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmDrvSeatVertiPosition(pos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMsmDrvSeatVertiPosition() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmDrvSeatVertiPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmDrvSeatVertiPosition();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmDrvSeatBackPosition(int pos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(pos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmDrvSeatBackPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmDrvSeatBackPosition(pos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMsmDrvSeatBackPosition() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmDrvSeatBackPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmDrvSeatBackPosition();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmDrvSeatLegPosition(int pos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(pos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmDrvSeatLegPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmDrvSeatLegPosition(pos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMsmDrvSeatLegPosition() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmDrvSeatLegPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmDrvSeatLegPosition();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmPsnSeatHorizMove(int control, int direction) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(direction);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmPsnSeatHorizMove, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmPsnSeatHorizMove(control, direction);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmPsnSeatBackMove(int control, int direction) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(direction);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmPsnSeatBackMove, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmPsnSeatBackMove(control, direction);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmPsnSeatVertiMove(int control, int direction) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(direction);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmPsnSeatVertiMove, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmPsnSeatVertiMove(control, direction);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getBcmWindowMovePosition(int window) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(window);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmWindowMovePosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmWindowMovePosition(window);
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmWindowMoveCmd(int window, int moveForward) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(window);
                    _data.writeInt(moveForward);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmWindowMoveCmd, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmWindowMoveCmd(window, moveForward);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmNfcCardEnabled(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmNfcCardEnabled, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmNfcCardEnabled(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmNfcCardSwitchState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmNfcCardSwitchState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmNfcCardSwitchState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmAutoWindowCmd(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmAutoWindowCmd, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmAutoWindowCmd(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmWindowRemoteCtrlCfg(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmWindowRemoteCtrlCfg, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmWindowRemoteCtrlCfg(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getWindowRemoteCtrlCfg() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getWindowRemoteCtrlCfg, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getWindowRemoteCtrlCfg();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmChildLockCfg(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmChildLockCfg, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmChildLockCfg(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmChildLockCfg() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmChildLockCfg, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmChildLockCfg();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmLeftMirrorCtrlCmd(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(480, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmLeftMirrorCtrlCmd(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmRightMirrorCtrlCmd(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmRightMirrorCtrlCmd, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmRightMirrorCtrlCmd(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmLeftMirrorHorizPos(int pos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(pos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmLeftMirrorHorizPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmLeftMirrorHorizPos(pos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmLeftMirrorHorizPos() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmLeftMirrorHorizPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmLeftMirrorHorizPos();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmRightMirrorHorizPos(int pos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(pos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmRightMirrorHorizPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmRightMirrorHorizPos(pos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmRightMirrorHorizPos() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmRightMirrorHorizPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmRightMirrorHorizPos();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmLeftMirrorVerticalPos(int pos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(pos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmLeftMirrorVerticalPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmLeftMirrorVerticalPos(pos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmLeftMirrorVerticalPos() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmLeftMirrorVerticalPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmLeftMirrorVerticalPos();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmRightMirrorVerticalPos(int pos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(pos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmRightMirrorVerticalPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmRightMirrorVerticalPos(pos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmRightMirrorVerticalPos() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmRightMirrorVerticalPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmRightMirrorVerticalPos();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmReverseMirrorCfgCmd(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmReverseMirrorCfgCmd, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmReverseMirrorCfgCmd(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmReverseMirrorCfgCmd() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmReverseMirrorCfgCmd, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmReverseMirrorCfgCmd();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmShcReq(int flag) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(flag);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmShcReq, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmShcReq(flag);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmFollowMeTime(int timeType) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(timeType);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmFollowMeTime, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmFollowMeTime(timeType);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmFollowMeTime() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmFollowMeTime, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmFollowMeTime();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmDayLightMode(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmDayLightMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmDayLightMode(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmDayLightMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmDayLightMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmDayLightMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmDomeLightCfg(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmDomeLightCfg, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmDomeLightCfg(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmDomeLightCfg() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(500, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmDomeLightCfg();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getTpmsTirePressureValue(int position) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(position);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTpmsTirePressureValue, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTpmsTirePressureValue(position);
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacTempRightSyncEnabled(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacTempRightSyncEnabled, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacTempRightSyncEnabled(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacTempRightSyncState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacTempRightSyncState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacTempRightSyncState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacDrvLeftFanHorPos(int position) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(position);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacDrvLeftFanHorPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacDrvLeftFanHorPos(position);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacDrvLeftFanHorPos() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacDrvLeftFanHorPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacDrvLeftFanHorPos();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacDrvLeftFanVerPos(int position) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(position);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacDrvLeftFanVerPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacDrvLeftFanVerPos(position);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacDrvLeftFanVerPos() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacDrvLeftFanVerPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacDrvLeftFanVerPos();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacDrvRightFanHorPos(int postion) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(postion);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacDrvRightFanHorPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacDrvRightFanHorPos(postion);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacDrvRightFanHorPos() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacDrvRightFanHorPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacDrvRightFanHorPos();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacDrvRightFanVerPos(int postion) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(postion);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacDrvRightFanVerPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacDrvRightFanVerPos(postion);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacDrvRightFanVerPos() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacDrvRightFanVerPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacDrvRightFanVerPos();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacPsnLeftFanHorPos(int position) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(position);
                    boolean _status = this.mRemote.transact(512, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacPsnLeftFanHorPos(position);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacPsnLeftFanHorPos() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(513, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacPsnLeftFanHorPos();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacPsnLeftFanVerPos(int position) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(position);
                    boolean _status = this.mRemote.transact(514, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacPsnLeftFanVerPos(position);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacPsnLeftFanVerPos() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(515, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacPsnLeftFanVerPos();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacPsnRightFanHorPos(int position) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(position);
                    boolean _status = this.mRemote.transact(516, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacPsnRightFanHorPos(position);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacPsnRightFanHorPos() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(517, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacPsnRightFanHorPos();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacPsnRightFanVerPos(int position) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(position);
                    boolean _status = this.mRemote.transact(518, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacPsnRightFanVerPos(position);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacPsnRightFanVerPos() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacPsnRightFanVerPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacPsnRightFanVerPos();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacAqsEnabled(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(520, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacAqsEnabled(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacAqsSwitchState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacAqsSwitchState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacAqsSwitchState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacAqsSensitivity(int level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(level);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacAqsSensitivity, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacAqsSensitivity(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacAqsSensitivity() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacAqsSensitivity, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacAqsSensitivity();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacSweepWindStatus(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacSweepWindStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacSweepWindStatus(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacSweepWindStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacSweepWindStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacSweepWindStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacEconEnabled(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacEconEnabled, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacEconEnabled(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacEconState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacEconState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacEconState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacEavDrvWindMode(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacEavDrvWindMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacEavDrvWindMode(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacEavDrvWindMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacEavDrvWindMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacEavDrvWindMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacEavPsnWindMode(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacEavPsnWindMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacEavPsnWindMode(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacEavPsnWindMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacEavPsnWindMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacEavPsnWindMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacAirCirculationPeriod(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacAirCirculationPeriod, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacAirCirculationPeriod(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacAirCirculationPeriod() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacAirCirculationPeriod, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacAirCirculationPeriod();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacTempColor() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacTempColor, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacTempColor();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacAirDistributionMode(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacAirDistributionMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacAirDistributionMode(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getHvacExternalTemp() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacExternalTemp, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacExternalTemp();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacPm25Value() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacPm25Value, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacPm25Value();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSocCoolingRequestTemp(float temp) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeFloat(temp);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSocCoolingRequestTemp, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSocCoolingRequestTemp(temp);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAmpCoolingRequestTemp(float temp) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeFloat(temp);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAmpCoolingRequestTemp, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAmpCoolingRequestTemp(temp);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAmpTempRiseSpeedState(int temp) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(temp);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAmpTempRiseSpeedState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAmpTempRiseSpeedState(temp);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacLonizerState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacLonizerState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacLonizerState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAvmCalibrationMode(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAvmCalibrationMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAvmCalibrationMode(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAvmCalibrationMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAvmCalibrationMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAvmCalibrationMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAvmOverlayWorkSt(int on) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(on);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAvmOverlayWorkSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAvmOverlayWorkSt(on);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAvmOverlayWorkSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAvmOverlayWorkSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAvmOverlayWorkSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAvmTransparentChassisState(int on) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(on);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAvmTransparentChassisState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAvmTransparentChassisState(on);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAvmTransparentChassisState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAvmTransparentChassisState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAvmTransparentChassisState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAvmFineTuneMode(int on) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(on);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAvmFineTuneMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAvmFineTuneMode(on);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAvmFineTuneMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAvmFineTuneMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAvmFineTuneMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAmpMusicStyle(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(550, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAmpMusicStyle(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAmpMusicStyle() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAmpMusicStyle, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAmpMusicStyle();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAmpMusicScene(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAmpMusicScene, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAmpMusicScene(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAmpMusicScene() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAmpMusicScene, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAmpMusicScene();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAmpStandByEnabled(int on) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(on);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAmpStandByEnabled, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAmpStandByEnabled(on);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int isAmpStandByEnabled() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_isAmpStandByEnabled, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().isAmpStandByEnabled();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAmpSoundFieldMode(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAmpSoundFieldMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAmpSoundFieldMode(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAmpSoundFieldMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAmpSoundFieldMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAmpSoundFieldMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setApmAudioEffect(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setApmAudioEffect, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setApmAudioEffect(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getApmAudioEffect() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getApmAudioEffect, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getApmAudioEffect();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAmpMute(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAmpMute, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAmpMute(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int isAmpMute() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_isAmpMute, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().isAmpMute();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAmpVolume(int level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(level);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAmpVolume, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAmpVolume(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAmpVolume() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAmpVolume, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAmpVolume();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAmpSoundTrackMode(int track) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(track);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAmpSoundTrackMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAmpSoundTrackMode(track);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAmpSoundTrackMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAmpSoundTrackMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAmpSoundTrackMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setFarLampAutoSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setFarLampAutoSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setFarLampAutoSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getFarLampAutoSwitch() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getFarLampAutoSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getFarLampAutoSwitch();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setCutLinePreventSw(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setCutLinePreventSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setCutLinePreventSw(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCutLinePreventSw() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCutLinePreventSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCutLinePreventSw();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setRearCrossEmergencyWarning(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setRearCrossEmergencyWarning, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setRearCrossEmergencyWarning(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getRearCrossEmergencyWarning() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getRearCrossEmergencyWarning, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getRearCrossEmergencyWarning();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setRearCollisionSecurity(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setRearCollisionSecurity, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setRearCollisionSecurity(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getRearCollisionSecurity() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getRearCollisionSecurity, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getRearCollisionSecurity();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setDoorOpenWarning(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setDoorOpenWarning, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setDoorOpenWarning(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getDoorOpenWarning() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getDoorOpenWarning, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getDoorOpenWarning();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setFatigueDetectionSw(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setFatigueDetectionSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setFatigueDetectionSw(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getFatigueDetectionSw() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getFatigueDetectionSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getFatigueDetectionSw();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTrafficSignRecognition(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setTrafficSignRecognition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setTrafficSignRecognition(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTrafficSignRecognition() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTrafficSignRecognition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTrafficSignRecognition();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSpdLimitWarnType(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSpdLimitWarnType, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSpdLimitWarnType(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getSpdLimitWarnType() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSpdLimitWarnType, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSpdLimitWarnType();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLaneAlignmentAssist(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLaneAlignmentAssist, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLaneAlignmentAssist(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLaneAlignmentAssist() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLaneAlignmentAssist, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLaneAlignmentAssist();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHighSpeedNavigation(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHighSpeedNavigation, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHighSpeedNavigation(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHighSpeedNavigation() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHighSpeedNavigation, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHighSpeedNavigation();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAutoParkReq(int cmd) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(cmd);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAutoParkReq, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAutoParkReq(cmd);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setKeyRemoteParkType(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setKeyRemoteParkType, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setKeyRemoteParkType(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getKeyRemoteType() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getKeyRemoteType, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getKeyRemoteType();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIntelligentCallButton(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIntelligentCallButton, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIntelligentCallButton(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getIntelligentCallButton() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getIntelligentCallButton, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getIntelligentCallButton();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getPhoneSMButton() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getPhoneSMButton, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getPhoneSMButton();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAutoParkSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAutoParkSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAutoParkSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAutoParkSwitch() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAutoParkSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAutoParkSwitch();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setPhoneParkType(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setPhoneParkType, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setPhoneParkType(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getPhoneParkType() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getPhoneParkType, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getPhoneParkType();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setKeyRemoteSMButton(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setKeyRemoteSMButton, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setKeyRemoteSMButton(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getKeyRemoteSMButton() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getKeyRemoteSMButton, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getKeyRemoteSMButton();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAdasMapInfo(byte[] info) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeByteArray(info);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAdasMapInfo, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAdasMapInfo(info);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float[] getParkSlotInfo() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getParkSlotInfo, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getParkSlotInfo();
                    }
                    _reply.readException();
                    float[] _result = _reply.createFloatArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float[] getEnvCharacterInfo() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(600, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getEnvCharacterInfo();
                    }
                    _reply.readException();
                    float[] _result = _reply.createFloatArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float[] getCarPositionInfo() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCarPositionInfo, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCarPositionInfo();
                    }
                    _reply.readException();
                    float[] _result = _reply.createFloatArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float[] getRadarDataInfo() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(602, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getRadarDataInfo();
                    }
                    _reply.readException();
                    float[] _result = _reply.createFloatArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getEpsSteeringAngle() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(603, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getEpsSteeringAngle();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getEpsSteeringAngleSpeed() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(604, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getEpsSteeringAngleSpeed();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setCdcFunctionMode(int style) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(style);
                    boolean _status = this.mRemote.transact(605, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setCdcFunctionMode(style);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsbEnabled(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(606, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsbEnabled(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int isMsbEnabled() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(607, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().isMsbEnabled();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setDhcDoorknobAutoOpenEnabled(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(608, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setDhcDoorknobAutoOpenEnabled(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int isDhcDoorknobAutoOpenEnabled() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(609, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().isDhcDoorknobAutoOpenEnabled();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCdcFunctionMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(610, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCdcFunctionMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSrsBackBeltWarningEnabled(int on) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(on);
                    boolean _status = this.mRemote.transact(611, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSrsBackBeltWarningEnabled(on);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int isSrsBackBeltWarningEnabled() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(612, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().isSrsBackBeltWarningEnabled();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int isSrsPsnOnSeat() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_isSrsPsnOnSeat, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().isSrsPsnOnSeat();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setChargeGunUnlock() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setChargeGunUnlock, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setChargeGunUnlock();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setChargeAppointTime(int[] data) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeIntArray(data);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setChargeAppointTime, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setChargeAppointTime(data);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuResHeatManaTime() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuResHeatManaTime, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuResHeatManaTime();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getVcuAcChargeVolt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuAcChargeVolt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuAcChargeVolt();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getVcuAcChargeCur() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuAcChargeCur, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuAcChargeCur();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getVcuDcChargeCur() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuDcChargeCur, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuDcChargeCur();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getVcuDcChargeVolt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuDcChargeVolt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuDcChargeVolt();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVcuDisChargeLimit(int percent) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(percent);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVcuDisChargeLimit, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVcuDisChargeLimit(percent);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuDisCargeLimit() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuDisCargeLimit, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuDisCargeLimit();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVcuDisChargeEnabled(int on) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(on);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVcuDisChargeEnabled, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVcuDisChargeEnabled(on);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuDischargeQuantity() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuDischargeQuantity, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuDischargeQuantity();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuChargeSocQuantity() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuChargeSocQuantity, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuChargeSocQuantity();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuEvsysReadyState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuEvsysReadyState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuEvsysReadyState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmWiperServiceMode(int on) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(on);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmWiperServiceMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmWiperServiceMode(on);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmWiperServiceMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmWiperServiceMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmWiperServiceMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmManualFrontLeftWinStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmManualFrontLeftWinStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmManualFrontLeftWinStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmManualFrontRightWinStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmManualFrontRightWinStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmManualFrontRightWinStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmManualRearLeftWinStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmManualRearLeftWinStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmManualRearLeftWinStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmManualRearRightWinStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmManualRearRightWinStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmManualRearRightWinStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getLeftFrontDoorOpened() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLeftFrontDoorOpened, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLeftFrontDoorOpened();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int isBcmDriverOnSeat() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_isBcmDriverOnSeat, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().isBcmDriverOnSeat();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmHighBeamMode(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmHighBeamMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmHighBeamMode(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuBatteryLevelPercent() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuBatteryLevelPercent, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuBatteryLevelPercent();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getVcuBatteryVolt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuBatteryVolt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuBatteryVolt();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getVcuBatteryCur() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuBatteryCur, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuBatteryCur();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuStopChargeReason() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuStopChargeReason, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuStopChargeReason();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVcuBrakeLightOn(int on) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(on);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVcuBrakeLightOn, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVcuBrakeLightOn(on);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getSrsDrvBeltFastenStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSrsDrvBeltFastenStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSrsDrvBeltFastenStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getSrsPsnBeltFastenStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSrsPsnBeltFastenStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSrsPsnBeltFastenStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getSrsBackLeftBeltFastenStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSrsBackLeftBeltFastenStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSrsBackLeftBeltFastenStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getSrsBackMiddleBeltFastenStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSrsBackMiddleBeltFastenStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSrsBackMiddleBeltFastenStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getSrsBackRightBeltFastenStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSrsBackRightBeltFastenStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSrsBackRightBeltFastenStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getSrsCrashOutputStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSrsCrashOutputStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSrsCrashOutputStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getSrsAirbagFaultStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSrsAirbagFaultStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSrsAirbagFaultStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getSrsSelfCheckStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSrsSelfCheckStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSrsSelfCheckStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getNetWorkType() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getNetWorkType, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getNetWorkType();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAmpChannelVolAndSource(int channelbit, int volume, int soundSource, int activebit) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(channelbit);
                    _data.writeInt(volume);
                    _data.writeInt(soundSource);
                    _data.writeInt(activebit);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAmpChannelVolAndSource, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAmpChannelVolAndSource(channelbit, volume, soundSource, activebit);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuBreakPedalStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuBreakPedalStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuBreakPedalStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuAccPedalStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuAccPedalStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuAccPedalStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmLeftTurnLampStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmLeftTurnLampStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmLeftTurnLampStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmRightTurnLampStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmRightTurnLampStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmRightTurnLampStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLluWakeWaitMode(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLluWakeWaitMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLluWakeWaitMode(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLluWakeWaitMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLluWakeWaitMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLluWakeWaitMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLluShowOffMode(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLluShowOffMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLluShowOffMode(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLluShowOffMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLluShowOffMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLluShowOffMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLluSleepMode(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLluSleepMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLluSleepMode(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLluSleepMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLluSleepMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLluSleepMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLluAcChargeMode(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLluAcChargeMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLluAcChargeMode(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLluAcChargeMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLluAcChargeMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLluAcChargeMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLluDcChargeMode(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLluDcChargeMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLluDcChargeMode(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLluDcChargeMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLluDcChargeMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLluDcChargeMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLluPhotoMode(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLluPhotoMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLluPhotoMode(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLluPhotoMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLluPhotoMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLluPhotoMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int isVcuParkingGearValid() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_isVcuParkingGearValid, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().isVcuParkingGearValid();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmChargePortStatus(int port) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(port);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmChargePortStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmChargePortStatus(port);
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVpmLdwLeftWarningStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVpmLdwLeftWarningStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVpmLdwLeftWarningStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVpmLdwRightWarningStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVpmLdwRightWarningStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVpmLdwRightWarningStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBlindAreaLeftWarning() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBlindAreaLeftWarning, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBlindAreaLeftWarning();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBlindAreaRightWarning() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBlindAreaRightWarning, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBlindAreaRightWarning();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getRearCrossLeftWarning() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getRearCrossLeftWarning, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getRearCrossLeftWarning();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getRearCrossRightWarning() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getRearCrossRightWarning, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getRearCrossRightWarning();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuLongCtrlRemind() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuLongCtrlRemind, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuLongCtrlRemind();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpilotStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpilotStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpilotStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuLatCtrlRemind() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuLatCtrlRemind, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuLatCtrlRemind();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getVcuVehLast100mConsume() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuVehLast100mConsume, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuVehLast100mConsume();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int isVcuBatteryCold() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_isVcuBatteryCold, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().isVcuBatteryCold();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int isVcuChargeSpeedSlow() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_isVcuChargeSpeedSlow, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().isVcuChargeSpeedSlow();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAccStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAccStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAccStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getChargeAppointTime() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getChargeAppointTime, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getChargeAppointTime();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacTempSyncMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacTempSyncMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacTempSyncMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void getSimStatusAsync() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSimStatusAsync, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().getSimStatusAsync();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getApmAllChannelVolume() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getApmAllChannelVolume, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getApmAllChannelVolume();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getApmAllChannelSoundSource() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getApmAllChannelSoundSource, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getApmAllChannelSoundSource();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setNetWorkType(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setNetWorkType, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setNetWorkType(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmWiperInterval() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmWiperInterval, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmWiperInterval();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMcuUpdateReqStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuUpdateReqStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuUpdateReqStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMcuUpdateReqStatus(int data) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(data);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMcuUpdateReqStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMcuUpdateReqStatus(data);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getOtaMcuReqUpdatefile() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getOtaMcuReqUpdatefile, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getOtaMcuReqUpdatefile();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setOtaMcuReqUpdatefile(int data) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(data);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setOtaMcuReqUpdatefile, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setOtaMcuReqUpdatefile(data);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setOtaMcuSendUpdatefile(String file) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(file);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setOtaMcuSendUpdatefile, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setOtaMcuSendUpdatefile(file);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getOtaMcuUpdateStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getOtaMcuUpdateStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getOtaMcuUpdateStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public String getTboxVersionInfoResponse() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTboxVersionInfoResponse, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTboxVersionInfoResponse();
                    }
                    _reply.readException();
                    String _result = _reply.readString();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTboxVersionInfoRequest() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setTboxVersionInfoRequest, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setTboxVersionInfoRequest();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void startTboxOTA(String file) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(file);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_startTboxOTA, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().startTboxOTA(file);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public String getStartTboxOTAResponse() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getStartTboxOTAResponse, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getStartTboxOTAResponse();
                    }
                    _reply.readException();
                    String _result = _reply.readString();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public String getStopTboxOTAResponse() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getStopTboxOTAResponse, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getStopTboxOTAResponse();
                    }
                    _reply.readException();
                    String _result = _reply.readString();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmSyncSignal(String data) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(data);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmSyncSignal, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmSyncSignal(data);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmOsdShow(String data) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(data);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmOsdShow, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmOsdShow(data);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmInfoCardAdd(String data) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(data);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmInfoCardAdd, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmInfoCardAdd(data);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmInfoCardUpdate(String data) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(data);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmInfoCardUpdate, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmInfoCardUpdate(data);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmInfoCardRemove(String data) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(data);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmInfoCardRemove, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmInfoCardRemove(data);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmAllCardsRefresh(String data) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(data);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmAllCardsRefresh, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmAllCardsRefresh(data);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmInfoFlowMsg(String data) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(data);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmInfoFlowMsg, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmInfoFlowMsg(data);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmCarSetting(String data) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(data);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmCarSetting, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmCarSetting(data);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmWeather(String data) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(data);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmWeather, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmWeather(data);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmWheelkey(int key) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(key);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmWheelkey, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmWheelkey(key);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmSyncTime(String data) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(data);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmSyncTime, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmSyncTime(data);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmNavigationBmp(int totalsize, int pagesize, int pageIndex, int totalPage, byte[] data) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(totalsize);
                    _data.writeInt(pagesize);
                    _data.writeInt(pageIndex);
                    _data.writeInt(totalPage);
                    _data.writeByteArray(data);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmNavigationBmp, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmNavigationBmp(totalsize, pagesize, pageIndex, totalPage, data);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmNavigationInfo(String data) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(data);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmNavigationInfo, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmNavigationInfo(data);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setGpsReset(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setGpsReset, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setGpsReset(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getGpsResetResp() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getGpsResetResp, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getGpsResetResp();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTboxPsuMsg(String msg) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(msg);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setTboxPsuMsg, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setTboxPsuMsg(msg);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public String getTboxPsuMsg() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTboxPsuMsg, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTboxPsuMsg();
                    }
                    _reply.readException();
                    String _result = _reply.readString();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmPowerMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmPowerMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmPowerMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmPsnSeatHeatLevel(int level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(level);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmPsnSeatHeatLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmPsnSeatHeatLevel(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmPsnSeatHeatLevel() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmPsnSeatHeatLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmPsnSeatHeatLevel();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmBrightness(int level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(level);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmBrightness, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmBrightness(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getIcmBrightness() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getIcmBrightness, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getIcmBrightness();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getIcmTimeFormat() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getIcmTimeFormat, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getIcmTimeFormat();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCwcChargeSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCwcChargeSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCwcChargeSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCwcChargeErrorSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCwcChargeErrorSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCwcChargeErrorSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAutoWindowLockSw(int active) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(active);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAutoWindowLockSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAutoWindowLockSw(active);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAutoWindowLockSw() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAutoWindowLockSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAutoWindowLockSw();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLeavePollingLockSw(int active) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(active);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLeavePollingLockSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLeavePollingLockSw(active);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLeavePollingLockSw() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLeavePollingLockSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLeavePollingLockSw();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setNearPollingUnLockSw(int active) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(active);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setNearPollingUnLockSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setNearPollingUnLockSw(active);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getNearePollingUnLockSw() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getNearePollingUnLockSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getNearePollingUnLockSw();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setStealthMode(int active) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(active);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setStealthMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setStealthMode(active);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void getStealthMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getStealthMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().getStealthMode();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVcuSnowMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVcuSnowMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVcuSnowMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuSnowMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuSnowMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuSnowMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int hasEspFault() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_hasEspFault, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().hasEspFault();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int hasEspHdcFault() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_hasEspHdcFault, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().hasEspHdcFault();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int hasEspAvhFault() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_hasEspAvhFault, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().hasEspAvhFault();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCiuDmsStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCiuDmsStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCiuDmsStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setCiuDmsStatus(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setCiuDmsStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setCiuDmsStatus(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setCiuFaceIdMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setCiuFaceIdMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setCiuFaceIdMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCiuUid() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCiuUid, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCiuUid();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setCiuUid(int uid) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(uid);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setCiuUid, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setCiuUid(uid);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCiuFaceIdStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCiuFaceIdStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCiuFaceIdStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCiuFaceIdPrimalStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCiuFaceIdPrimalStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCiuFaceIdPrimalStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCiuFaceShieldStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCiuFaceShieldStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCiuFaceShieldStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCiuErrorType() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCiuErrorType, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCiuErrorType();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCiuLightIntensity() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCiuLightIntensity, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCiuLightIntensity();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCiuFaceIDSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCiuFaceIDSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCiuFaceIDSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setCiuFaceIdSwitch(int value) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(value);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setCiuFaceIdSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setCiuFaceIdSwitch(value);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setCiuDeleteFaceId(int deleteFaceId) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(deleteFaceId);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setCiuDeleteFaceId, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setCiuDeleteFaceId(deleteFaceId);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCiuDeleteFaceIdResult() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCiuDeleteFaceIdResult, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCiuDeleteFaceIdResult();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setCiuRegHint(int hint) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(hint);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setCiuRegHint, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setCiuRegHint(hint);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setCiuStartRegFlow(int flow) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(flow);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setCiuStartRegFlow, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setCiuStartRegFlow(flow);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setCiuStartRegFlag(int flag) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(flag);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setCiuStartRegFlag, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setCiuStartRegFlag(flag);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCiuFaceAction() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCiuFaceAction, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCiuFaceAction();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setCiuFaceActionRequest(int action) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(action);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setCiuFaceActionRequest, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setCiuFaceActionRequest(action);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setCiuFirmFaceCancel(int value) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(value);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setCiuFirmFaceCancel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setCiuFirmFaceCancel(value);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setCiuRegisterRequestMulti(int uid, int faceActionRequest, int faceIdMode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(uid);
                    _data.writeInt(faceActionRequest);
                    _data.writeInt(faceIdMode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setCiuRegisterRequestMulti, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setCiuRegisterRequestMulti(uid, faceActionRequest, faceIdMode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setCiuDeleteMulti(int uid, int deleteFaceId) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(uid);
                    _data.writeInt(deleteFaceId);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setCiuDeleteMulti, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setCiuDeleteMulti(uid, deleteFaceId);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCiuValid() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCiuValid, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCiuValid();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCiuAutoLockSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCiuAutoLockSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCiuAutoLockSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCiuDvrMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCiuDvrMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCiuDvrMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setCiuDvrMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setCiuDvrMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setCiuDvrMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setCiuPhotoProcess() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setCiuPhotoProcess, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setCiuPhotoProcess();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setCiuDvrLockMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setCiuDvrLockMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setCiuDvrLockMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setCiuVideoOutputMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(768, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setCiuVideoOutputMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCiuSdStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(769, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCiuSdStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCiuDvrStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(770, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCiuDvrStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setCiuFormatMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(771, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setCiuFormatMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCiuDvrFormatStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(772, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCiuDvrFormatStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCiuDvrLockFb() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(773, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCiuDvrLockFb();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuPhoneSmMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(774, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setScuPhoneSmMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuPhoneSmMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(775, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuPhoneSmMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuKeyPark(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuKeyPark, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setScuKeyPark(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuKeyPark() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuKeyPark, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuKeyPark();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float[] getScuAltimeter() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuAltimeter, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuAltimeter();
                    }
                    _reply.readException();
                    float[] _result = _reply.createFloatArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getScuSlotTheta() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuSlotTheta, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuSlotTheta();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getScuTargetParkingPosition() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuTargetParkingPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuTargetParkingPosition();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuFrontMinDistance() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuFrontMinDistance, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuFrontMinDistance();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuRearMinDistance() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuRearMinDistance, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuRearMinDistance();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuModeIndex() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuModeIndex, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuModeIndex();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuLocalWeather(int network, int temperature, int humidity, int weather) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(network);
                    _data.writeInt(temperature);
                    _data.writeInt(humidity);
                    _data.writeInt(weather);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuLocalWeather, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setScuLocalWeather(network, temperature, humidity, weather);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getVcuRawCarSpeed() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuRawCarSpeed, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuRawCarSpeed();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuPureDriveModeFeedback() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuPureDriveModeFeedback, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuPureDriveModeFeedback();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuEbsBatterySoc() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuEbsBatterySoc, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuEbsBatterySoc();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuSupDebugInfo() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuSupDebugInfo, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuSupDebugInfo();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuErhDebugInfo() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuErhDebugInfo, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuErhDebugInfo();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuChargeError() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuChargeError, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuChargeError();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuAcInputStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuAcInputStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuAcInputStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void startVcuCharge(int chargeSoc) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(chargeSoc);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_startVcuCharge, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().startVcuCharge(chargeSoc);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void stopVcuAcCharge(int chargeSoc) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(chargeSoc);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_stopVcuAcCharge, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().stopVcuAcCharge(chargeSoc);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void stopVcuDcCharge() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_stopVcuDcCharge, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().stopVcuDcCharge();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVcuBestCharge() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVcuBestCharge, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVcuBestCharge();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVcuFullyCharge() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVcuFullyCharge, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVcuFullyCharge();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVcuChargeLimit(int limit) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(limit);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVcuChargeLimit, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVcuChargeLimit(limit);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getMcuDtcReportEv() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuDtcReportEv, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuDtcReportEv();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public String getMcuFactoryDisplayTypeMsgToMcu() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuFactoryDisplayTypeMsgToMcu, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuFactoryDisplayTypeMsgToMcu();
                    }
                    _reply.readException();
                    String _result = _reply.readString();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public byte[] getMcuFaultInfo() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuFaultInfo, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuFaultInfo();
                    }
                    _reply.readException();
                    byte[] _result = _reply.createByteArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTboxCanControlMsg(String msg) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(msg);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setTboxCanControlMsg, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setTboxCanControlMsg(msg);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public String getTboxCanControlMsg() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTboxCanControlMsg, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTboxCanControlMsg();
                    }
                    _reply.readException();
                    String _result = _reply.readString();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setCiuRainSw(int level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(level);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setCiuRainSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setCiuRainSw(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCiuRainSw() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCiuRainSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCiuRainSw();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCiuCarWash() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCiuCarWash, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCiuCarWash();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setCiuCarWash(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setCiuCarWash, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setCiuCarWash(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCiuDistractionStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCiuDistractionStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCiuDistractionStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setCiuDistractionStatus(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setCiuDistractionStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setCiuDistractionStatus(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCiuFatigueStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCiuFatigueStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCiuFatigueStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setCiuFatigueStatus(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setCiuFatigueStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setCiuFatigueStatus(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setCiuDmsMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setCiuDmsMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setCiuDmsMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCiuFatigueLevel() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCiuFatigueLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCiuFatigueLevel();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCiuDistractionLevel() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCiuDistractionLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCiuDistractionLevel();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuRoadAttr(int attr) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(attr);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuRoadAttr, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setScuRoadAttr(attr);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuAssLineChanged(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuAssLineChanged, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setScuAssLineChanged(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuAssLineChanged() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuAssLineChanged, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuAssLineChanged();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuDmsMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuDmsMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setScuDmsMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuSeatBeltReq(int req) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(req);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuSeatBeltReq, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setScuSeatBeltReq(req);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacTempPtcStatus(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacTempPtcStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacTempPtcStatus(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmPollingOpenCfg() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmPollingOpenCfg, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmPollingOpenCfg();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmPollingOpenCfg(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmPollingOpenCfg, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmPollingOpenCfg(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmDriverBeltWarning() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmDriverBeltWarning, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmDriverBeltWarning();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmRearViewAutoDownCfg() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmRearViewAutoDownCfg, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmRearViewAutoDownCfg();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmRearViewAutoDownCfg(int cfg) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(cfg);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmRearViewAutoDownCfg, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmRearViewAutoDownCfg(cfg);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmChargeGunLockSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmChargeGunLockSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmChargeGunLockSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuRadarDisplayActive() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuRadarDisplayActive, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuRadarDisplayActive();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuErrorTips() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuErrorTips, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuErrorTips();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmDmsMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmDmsMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmDmsMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmFatigueLevel(int level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(level);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmFatigueLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmFatigueLevel(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmDistractionLevel(int level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(level);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmDistractionLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmDistractionLevel(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTboxAvpStartStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTboxAvpStartStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTboxAvpStartStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getBmsAcMaxCurrent() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBmsAcMaxCurrent, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBmsAcMaxCurrent();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBmsDtcErrorStopCurrent() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBmsDtcErrorStopCurrent, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBmsDtcErrorStopCurrent();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBmsDtcChargeCurrentOver() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBmsDtcChargeCurrentOver, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBmsDtcChargeCurrentOver();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBmsDcChargeStopReason() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBmsDcChargeStopReason, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBmsDcChargeStopReason();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getBmsBatteryTotalVolt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBmsBatteryTotalVolt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBmsBatteryTotalVolt();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getBmsDcCurrent() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBmsDcCurrent, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBmsDcCurrent();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getBmsDcVolt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBmsDcVolt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBmsDcVolt();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void startTboxCertInstall() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_startTboxCertInstall, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().startTboxCertInstall();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void startTboxCertVerify() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_startTboxCertVerify, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().startTboxCertVerify();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public String getTboxDvBattMsg() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTboxDvBattMsg, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTboxDvBattMsg();
                    }
                    _reply.readException();
                    String _result = _reply.readString();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMcuRepairMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMcuRepairMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMcuRepairMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLluSelfActive(int active) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(active);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLluSelfActive, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLluSelfActive(active);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTboxChargeGunLock() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setTboxChargeGunLock, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setTboxChargeGunLock();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMultipleDmsStatus(int dmsStatus, int faceIdStatus, int fatigueStatus, int distractionStatus) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(dmsStatus);
                    _data.writeInt(faceIdStatus);
                    _data.writeInt(fatigueStatus);
                    _data.writeInt(distractionStatus);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMultipleDmsStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMultipleDmsStatus(dmsStatus, faceIdStatus, fatigueStatus, distractionStatus);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getEspEpbWarningLampStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getEspEpbWarningLampStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getEspEpbWarningLampStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getEspEpsWarninglampStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getEspEpsWarninglampStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getEspEpsWarninglampStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuEvErrLampDsp() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuEvErrLampDsp, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuEvErrLampDsp();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuEvErrMsgDsp() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuEvErrMsgDsp, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuEvErrMsgDsp();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuSuperParkMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuSuperParkMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuSuperParkMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float[] getScuLocatData() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuLocatData, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuLocatData();
                    }
                    _reply.readException();
                    float[] _result = _reply.createFloatArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float[] getScuParkingProgress() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuParkingProgress, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuParkingProgress();
                    }
                    _reply.readException();
                    float[] _result = _reply.createFloatArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float[] getScuSensorData() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuSensorData, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuSensorData();
                    }
                    _reply.readException();
                    float[] _result = _reply.createFloatArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float[] getScuLAvmData() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuLAvmData, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuLAvmData();
                    }
                    _reply.readException();
                    float[] _result = _reply.createFloatArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float[] getScuRAvmData() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuRAvmData, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuRAvmData();
                    }
                    _reply.readException();
                    float[] _result = _reply.createFloatArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float[] getScuSlotForPark() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuSlotForPark, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuSlotForPark();
                    }
                    _reply.readException();
                    float[] _result = _reply.createFloatArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuRadarVoiceActive() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuRadarVoiceActive, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuRadarVoiceActive();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuRadarVoiceTone() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuRadarVoiceTone, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuRadarVoiceTone();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmLeftMirrorMove(int control, int direction) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(direction);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmLeftMirrorMove, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmLeftMirrorMove(control, direction);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmRightMirrorMove(int control, int direction) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(direction);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmRightMirrorMove, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmRightMirrorMove(control, direction);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmDriverAllPositions(int seatHorizonPos, int seatVerticalPos, int seatTiltingPos, int legHeightPos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(seatHorizonPos);
                    _data.writeInt(seatVerticalPos);
                    _data.writeInt(seatTiltingPos);
                    _data.writeInt(legHeightPos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmDriverAllPositions, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmDriverAllPositions(seatHorizonPos, seatVerticalPos, seatTiltingPos, legHeightPos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmAllExteriorMirrorsPositions(int lMirrorHorizonPos, int lMirrorVerticalPos, int rMirrorHorizonPos, int rMirrorVerticalPos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(lMirrorHorizonPos);
                    _data.writeInt(lMirrorVerticalPos);
                    _data.writeInt(rMirrorHorizonPos);
                    _data.writeInt(rMirrorVerticalPos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmAllExteriorMirrorsPositions, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmAllExteriorMirrorsPositions(lMirrorHorizonPos, lMirrorVerticalPos, rMirrorHorizonPos, rMirrorVerticalPos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float[] getScuSlotData() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuSlotData, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuSlotData();
                    }
                    _reply.readException();
                    float[] _result = _reply.createFloatArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLluCurrentFunction(int function) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(function);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLluCurrentFunction, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLluCurrentFunction(function);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTboxDvTestReq(int req) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(req);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setTboxDvTestReq, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setTboxDvTestReq(req);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTboxDvTempSamplingPeriod(int second) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(second);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setTboxDvTempSamplingPeriod, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setTboxDvTempSamplingPeriod(second);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public String getTboxDvTempMsg() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTboxDvTempMsg, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTboxDvTempMsg();
                    }
                    _reply.readException();
                    String _result = _reply.readString();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMcuPsuTestReq(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMcuPsuTestReq, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMcuPsuTestReq(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMcuPsuTestResult() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuPsuTestResult, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuPsuTestResult();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getDvTestMcuTemp() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getDvTestMcuTemp, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getDvTestMcuTemp();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public byte[] getMcuDvBattMsg() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuDvBattMsg, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuDvBattMsg();
                    }
                    _reply.readException();
                    byte[] _result = _reply.createByteArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getDvTestBatTemp() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getDvTestBatTemp, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getDvTestBatTemp();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getDvTestPcbTemp() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getDvTestPcbTemp, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getDvTestPcbTemp();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMcuDvTestReq(int req) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(req);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMcuDvTestReq, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMcuDvTestReq(req);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMcuDvTempSamplingPeriod(int second) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(second);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMcuDvTempSamplingPeriod, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMcuDvTempSamplingPeriod(second);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacSelfDrySwStatus(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacSelfDrySwStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacSelfDrySwStatus(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacSelfDrySwStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacSelfDrySwStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacSelfDrySwStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLluLockSocDspSwitch(int active) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(active);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLluLockSocDspSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLluLockSocDspSwitch(active);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLluLockSocDspSwitch() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLluLockSocDspSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLluLockSocDspSwitch();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLluUnLockSocDspSwitch(int active) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(active);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLluUnLockSocDspSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLluUnLockSocDspSwitch(active);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLluUnLockSocDspSwitch() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLluUnLockSocDspSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLluUnLockSocDspSwitch();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAvasPhotoSoundSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAvasPhotoSoundSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAvasPhotoSoundSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAvasPhotoSoundSwitch() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAvasPhotoSoundSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAvasPhotoSoundSwitch();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void saveMsmDriverAllPositionsToMcu(int seatHorizonPos, int seatVerticalPos, int seatTiltingPos, int legHeightPos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(seatHorizonPos);
                    _data.writeInt(seatVerticalPos);
                    _data.writeInt(seatTiltingPos);
                    _data.writeInt(legHeightPos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_saveMsmDriverAllPositionsToMcu, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().saveMsmDriverAllPositionsToMcu(seatHorizonPos, seatVerticalPos, seatTiltingPos, legHeightPos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMcuChairWelcomeMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuChairWelcomeMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuChairWelcomeMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMcuChairWelcomeMode(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMcuChairWelcomeMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMcuChairWelcomeMode(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBtPhoneCall(String info) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(info);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBtPhoneCall, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBtPhoneCall(info);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void startTboxUpgradingTmcu() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_startTboxUpgradingTmcu, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().startTboxUpgradingTmcu();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTboxTmcuUpgradingProgress() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTboxTmcuUpgradingProgress, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTboxTmcuUpgradingProgress();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void startTboxUpgrading4G() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_startTboxUpgrading4G, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().startTboxUpgrading4G();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTbox4GUpgradingProgress() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTbox4GUpgradingProgress, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTbox4GUpgradingProgress();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTpmsSystemFaultWarnLampStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTpmsSystemFaultWarnLampStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTpmsSystemFaultWarnLampStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTpmsAbnormalTirePressureWarnLampStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTpmsAbnormalTirePressureWarnLampStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTpmsAbnormalTirePressureWarnLampStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTpmsTirePressureWarningInfo(int position) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(position);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTpmsTirePressureWarningInfo, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTpmsTirePressureWarningInfo(position);
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMcuRemoteControlFeedback(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMcuRemoteControlFeedback, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMcuRemoteControlFeedback(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTboxCameraRemoteControlFeedback(String msg) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(msg);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setTboxCameraRemoteControlFeedback, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setTboxCameraRemoteControlFeedback(msg);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void registerScuListener(IScuEventListener listener) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeStrongBinder(listener != null ? listener.asBinder() : null);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_registerScuListener, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().registerScuListener(listener);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void unregisterScuListener(IScuEventListener listener) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeStrongBinder(listener != null ? listener.asBinder() : null);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_unregisterScuListener, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().unregisterScuListener(listener);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmMusicInfo(String musicInfo) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(musicInfo);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmMusicInfo, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmMusicInfo(musicInfo);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmMusicPlaybackTimeInfo(String timeInfo) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(timeInfo);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmMusicPlaybackTimeInfo, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmMusicPlaybackTimeInfo(timeInfo);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendUpgradingTboxByUdiskReq(String msg) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(msg);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendUpgradingTboxByUdiskReq, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendUpgradingTboxByUdiskReq(msg);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public String getUpgradingTboxByUdiskResponse() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getUpgradingTboxByUdiskResponse, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getUpgradingTboxByUdiskResponse();
                    }
                    _reply.readException();
                    String _result = _reply.readString();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public byte[] getPmStatusWithParameter() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getPmStatusWithParameter, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getPmStatusWithParameter();
                    }
                    _reply.readException();
                    byte[] _result = _reply.createByteArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMcuOcuState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuOcuState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuOcuState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMcuCiuState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuCiuState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuCiuState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public String getNaviBmpInfoRequiredByIcm() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getNaviBmpInfoRequiredByIcm, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getNaviBmpInfoRequiredByIcm();
                    }
                    _reply.readException();
                    String _result = _reply.readString();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float[] getImuSystemState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getImuSystemState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getImuSystemState();
                    }
                    _reply.readException();
                    float[] _result = _reply.createFloatArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float[] getImuQuatData() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getImuQuatData, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getImuQuatData();
                    }
                    _reply.readException();
                    float[] _result = _reply.createFloatArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float[] getImuUbxPvtData1() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getImuUbxPvtData1, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getImuUbxPvtData1();
                    }
                    _reply.readException();
                    float[] _result = _reply.createFloatArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float[] getImuUbxPvtData2() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getImuUbxPvtData2, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getImuUbxPvtData2();
                    }
                    _reply.readException();
                    float[] _result = _reply.createFloatArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float[] getImuUbxRawXData() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getImuUbxRawXData, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getImuUbxRawXData();
                    }
                    _reply.readException();
                    float[] _result = _reply.createFloatArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getImuTboxPackGgaData() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getImuTboxPackGgaData, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getImuTboxPackGgaData();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public long[] getImuAddData() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getImuAddData, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getImuAddData();
                    }
                    _reply.readException();
                    long[] _result = _reply.createLongArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getImuDiagMessage() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getImuDiagMessage, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getImuDiagMessage();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float[] getImuNavigationData() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getImuNavigationData, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getImuNavigationData();
                    }
                    _reply.readException();
                    float[] _result = _reply.createFloatArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float[] getImuUbxSfrbxData() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getImuUbxSfrbxData, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getImuUbxSfrbxData();
                    }
                    _reply.readException();
                    float[] _result = _reply.createFloatArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMcuAtlsState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuAtlsState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuAtlsState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void startTboxSlowCharge() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_startTboxSlowCharge, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().startTboxSlowCharge();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void stopTboxSlowCharge() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_stopTboxSlowCharge, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().stopTboxSlowCharge();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTboxAutoPowerOffConfig(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setTboxAutoPowerOffConfig, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setTboxAutoPowerOffConfig(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTboxAutoPowerOffSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTboxAutoPowerOffSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTboxAutoPowerOffSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTboxCancelPowerOffConfig(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setTboxCancelPowerOffConfig, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setTboxCancelPowerOffConfig(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTboxCancelPowerOffSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTboxCancelPowerOffSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTboxCancelPowerOffSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getTboxPowerOffCountdown() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTboxPowerOffCountdown, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTboxPowerOffCountdown();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuSlotsNumber() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuSlotsNumber, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuSlotsNumber();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacMinWindSpeedLevel() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacMinWindSpeedLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacMinWindSpeedLevel();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacMaxWindSpeedLevel() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacMaxWindSpeedLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacMaxWindSpeedLevel();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMinHavcTemperature() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMinHavcTemperature, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMinHavcTemperature();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMaxHavcTemperature() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMaxHavcTemperature, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMaxHavcTemperature();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTboxSoldierSw(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setTboxSoldierSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setTboxSoldierSw(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTboxSoldierSwState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTboxSoldierSwState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTboxSoldierSwState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTboxSoldierWorkState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTboxSoldierWorkState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTboxSoldierWorkState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getTboxSoldierGsensorData() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTboxSoldierGsensorData, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTboxSoldierGsensorData();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendTboxSoldierTick() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendTboxSoldierTick, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendTboxSoldierTick();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getTpmsAllTirePressureWarnings() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTpmsAllTirePressureWarnings, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTpmsAllTirePressureWarnings();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getTpmsAllTireTemperatureWarnings() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTpmsAllTireTemperatureWarnings, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTpmsAllTireTemperatureWarnings();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getTpmsllTirePerssureSensorStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTpmsllTirePerssureSensorStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTpmsllTirePerssureSensorStatus();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVcuExtremeFastChargingMode(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVcuExtremeFastChargingMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVcuExtremeFastChargingMode(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuExtremeFastChargingSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuExtremeFastChargingSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuExtremeFastChargingSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuRoadAttributes(int parking, int road) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(parking);
                    _data.writeInt(road);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuRoadAttributes, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setScuRoadAttributes(parking, road);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuDetailRoadClass(int roadClass) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(roadClass);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuDetailRoadClass, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setScuDetailRoadClass(roadClass);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getTpmsAllTireTemperature() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTpmsAllTireTemperature, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTpmsAllTireTemperature();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getMcuPsuOtaFeedbackMsg() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuPsuOtaFeedbackMsg, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuPsuOtaFeedbackMsg();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMcuFaceIdSw(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMcuFaceIdSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMcuFaceIdSw(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMcuFaceIdSwState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuFaceIdSwState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuFaceIdSwState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setFaceIdModeState(int state) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(state);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setFaceIdModeState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setFaceIdModeState(state);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMcuFaceIdMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuFaceIdMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuFaceIdMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLluScriptStRequest(int request) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(request);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLluScriptStRequest, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLluScriptStRequest(request);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLluScriptStResponse() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLluScriptStResponse, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLluScriptStResponse();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLluScriptParameter(int[] parameter) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeIntArray(parameter);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLluScriptParameter, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLluScriptParameter(parameter);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLluScriptData(int index, int pos, int length, int[] data) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(index);
                    _data.writeInt(pos);
                    _data.writeInt(length);
                    _data.writeIntArray(data);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLluScriptData, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLluScriptData(index, pos, length, data);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setDvrEnable(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setDvrEnable, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setDvrEnable(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getDvrEnableState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getDvrEnableState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getDvrEnableState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setNotifyCiuAutoLightStatus(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setNotifyCiuAutoLightStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setNotifyCiuAutoLightStatus(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setCiuConfigurationActive(int version) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(version);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setCiuConfigurationActive, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setCiuConfigurationActive(version);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCiuConfigurationActive() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCiuConfigurationActive, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCiuConfigurationActive();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setCiuDelayOff(int value) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(value);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setCiuDelayOff, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setCiuDelayOff(value);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCiuDelayOff() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCiuDelayOff, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCiuDelayOff();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setCiuDeliveryUploadMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setCiuDeliveryUploadMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setCiuDeliveryUploadMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCiuDeliveryUploadMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCiuDeliveryUploadMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCiuDeliveryUploadMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmWindowsMovePositions(float flPosition, float frPosition, float rlPosition, float rrPosition) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeFloat(flPosition);
                    _data.writeFloat(frPosition);
                    _data.writeFloat(rlPosition);
                    _data.writeFloat(rrPosition);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmWindowsMovePositions, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmWindowsMovePositions(flPosition, frPosition, rlPosition, rrPosition);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmSdcMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmSdcMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmSdcMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmTwcMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmTwcMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmTwcMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmTwcUpdownSwitch(int state) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(state);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmTwcUpdownSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmTwcUpdownSwitch(state);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmLeftSdcSwitch(int state) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(state);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmLeftSdcSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmLeftSdcSwitch(state);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmRightSdcSwitch(int state) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(state);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmRightSdcSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmRightSdcSwitch(state);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendTboxGpsAntPowerControlReq(int req) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(req);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendTboxGpsAntPowerControlReq, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendTboxGpsAntPowerControlReq(req);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getGpsAntPowerControlResponse() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getGpsAntPowerControlResponse, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getGpsAntPowerControlResponse();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMcuAndroidOtaStatus(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMcuAndroidOtaStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMcuAndroidOtaStatus(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLluFindCarSwitch(int active) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(active);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLluFindCarSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLluFindCarSwitch(active);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLluFindCarSwitchState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLluFindCarSwitchState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLluFindCarSwitchState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLluLockUnlockSocDspSwitch(int active) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(active);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLluLockUnlockSocDspSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLluLockUnlockSocDspSwitch(active);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLluLockUnlockSocDspSwitchState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLluLockUnlockSocDspSwitchState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLluLockUnlockSocDspSwitchState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLluAcChargingCfg() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLluAcChargingCfg, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLluAcChargingCfg();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLluDcChargingCfg() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLluDcChargingCfg, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLluDcChargingCfg();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLluSpeedLimitCfg(int speed) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(speed);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLluSpeedLimitCfg, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLluSpeedLimitCfg(speed);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLluSpeedLimitCfg() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLluSpeedLimitCfg, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLluSpeedLimitCfg();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLluPersonAngle(int angle) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(angle);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLluPersonAngle, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLluPersonAngle(angle);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLluPersonWalkDirection(int direction) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(direction);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLluPersonWalkDirection, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLluPersonWalkDirection(direction);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMcuLluEnableStatus(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMcuLluEnableStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMcuLluEnableStatus(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMcuLluEnableStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuLluEnableStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuLluEnableStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMcuLluWakeWaitSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMcuLluWakeWaitSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMcuLluWakeWaitSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMcuLluWakeWaitSwitch() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuLluWakeWaitSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuLluWakeWaitSwitch();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMcuLluShowOffSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMcuLluShowOffSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMcuLluShowOffSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMcuLluShowOffSwitch() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuLluShowOffSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuLluShowOffSwitch();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMcuLluSleepSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMcuLluSleepSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMcuLluSleepSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMcuLluSleepSwitch() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuLluSleepSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuLluSleepSwitch();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMcuLluChargingSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMcuLluChargingSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMcuLluChargingSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMcuLluChargingSwitch() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuLluChargingSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuLluChargingSwitch();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMcuLluPhotoSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMcuLluPhotoSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMcuLluPhotoSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMcuLluPhotoSwitch() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuLluPhotoSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuLluPhotoSwitch();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuRealGearLevel() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuRealGearLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuRealGearLevel();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVcuNGearWarningSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVcuNGearWarningSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVcuNGearWarningSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuNGearWarningSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuNGearWarningSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuNGearWarningSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMcuAutoPowerOffSw(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(1000, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMcuAutoPowerOffSw(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMcuAutoPowerOffSwitchState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(1001, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuAutoPowerOffSwitchState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMcuPowerOffCountdownAction(int action) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(action);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMcuPowerOffCountdownAction, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMcuPowerOffCountdownAction(action);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMcuPowerOffCountdownNotice() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuPowerOffCountdownNotice, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuPowerOffCountdownNotice();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getSwsButtonsRawData() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSwsButtonsRawData, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSwsButtonsRawData();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendTboxGpsHwResetRequest() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendTboxGpsHwResetRequest, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendTboxGpsHwResetRequest();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setGpsPollingType(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setGpsPollingType, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setGpsPollingType(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTboxGpsDebugSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setTboxGpsDebugSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setTboxGpsDebugSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendTboxGpsMgaRequest() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendTboxGpsMgaRequest, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendTboxGpsMgaRequest();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTboxGpsMgaResponse() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTboxGpsMgaResponse, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTboxGpsMgaResponse();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmRadioType(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmRadioType, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmRadioType(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmFaceInfo(String faceInfo) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(faceInfo);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmFaceInfo, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmFaceInfo(faceInfo);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmLeftChargePortLockState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmLeftChargePortLockState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmLeftChargePortLockState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmRightChargePortLockState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmRightChargePortLockState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmRightChargePortLockState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAlsInitializationStudyState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAlsInitializationStudyState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAlsInitializationStudyState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public String getMcuVersion() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuVersion, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuVersion();
                    }
                    _reply.readException();
                    String _result = _reply.readString();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getAlsInitializationStudyAndErrorState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAlsInitializationStudyAndErrorState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAlsInitializationStudyAndErrorState();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMcuHornsStates(int lfHornSt, int lrHornSt, int rfHornSt, int rrHornSt) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(lfHornSt);
                    _data.writeInt(lrHornSt);
                    _data.writeInt(rfHornSt);
                    _data.writeInt(rrHornSt);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMcuHornsStates, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMcuHornsStates(lfHornSt, lrHornSt, rfHornSt, rrHornSt);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendChargeCompleteTimeToMcu(int min) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(min);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendChargeCompleteTimeToMcu, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendChargeCompleteTimeToMcu(min);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMcuRequestedMessage() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuRequestedMessage, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuRequestedMessage();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAvmMultipleDisplayProperties(int displayMode, int calibration, int overlayWorkSt, int transparentChasisWorkSt, int fineTuneMode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(displayMode);
                    _data.writeInt(calibration);
                    _data.writeInt(overlayWorkSt);
                    _data.writeInt(transparentChasisWorkSt);
                    _data.writeInt(fineTuneMode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAvmMultipleDisplayProperties, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAvmMultipleDisplayProperties(displayMode, calibration, overlayWorkSt, transparentChasisWorkSt, fineTuneMode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void resetTbox() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_resetTbox, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().resetTbox();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getScuMrrAssistSystemStates() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuMrrAssistSystemStates, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuMrrAssistSystemStates();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmWiperRainDetectSensitivity(int level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(level);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmWiperRainDetectSensitivity, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmWiperRainDetectSensitivity(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmWiperRainDetectSensitivity() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(1024, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmWiperRainDetectSensitivity();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmWindowLockState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(1025, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmWindowLockState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAvmWorkState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(1026, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAvmWorkState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getBcmLeftAndRightTurnLampStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(1027, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmLeftAndRightTurnLampStatus();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendXpuUpdateRequest(String req) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(req);
                    boolean _status = this.mRemote.transact(1028, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendXpuUpdateRequest(req);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public String getXpuUpdateResponse() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(1029, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuUpdateResponse();
                    }
                    _reply.readException();
                    String _result = _reply.readString();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setXpuUpdateFileTransferStatus(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setXpuUpdateFileTransferStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setXpuUpdateFileTransferStatus(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuUpdateResult() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuUpdateResult, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuUpdateResult();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuUpdateProgress() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuUpdateProgress, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuUpdateProgress();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuConnectionStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuConnectionStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuConnectionStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmParkLightRelatedFMBLightConfig(int cfg) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(cfg);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmParkLightRelatedFMBLightConfig, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmParkLightRelatedFMBLightConfig(cfg);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmParkLightRelatedFMBLightConfigState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmParkLightRelatedFMBLightConfigState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmParkLightRelatedFMBLightConfigState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuRearCollisionWarning() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuRearCollisionWarning, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuRearCollisionWarning();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getAvmCamerasFaultStates() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAvmCamerasFaultStates, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAvmCamerasFaultStates();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMcuMonitorSwitch(int mode, int timeInMinutes) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    _data.writeInt(timeInMinutes);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMcuMonitorSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMcuMonitorSwitch(mode, timeInMinutes);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMcuMonitorState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuMonitorState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuMonitorState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getBcmParkingLampsStates() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmParkingLampsStates, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmParkingLampsStates();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmDoorUnlockRequestSource() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmDoorUnlockRequestSource, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmDoorUnlockRequestSource();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuCommonHomeSlotID(int id) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(id);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuCommonHomeSlotID, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setScuCommonHomeSlotID(id);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuFreeParking1Data(float rx, float ry, float rtheta, int state, int attr, float ds, float r) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                } catch (Throwable th) {
                    th = th;
                }
                try {
                    _data.writeFloat(rx);
                } catch (Throwable th2) {
                    th = th2;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
                try {
                    _data.writeFloat(ry);
                    try {
                        _data.writeFloat(rtheta);
                    } catch (Throwable th3) {
                        th = th3;
                        _reply.recycle();
                        _data.recycle();
                        throw th;
                    }
                    try {
                        _data.writeInt(state);
                    } catch (Throwable th4) {
                        th = th4;
                        _reply.recycle();
                        _data.recycle();
                        throw th;
                    }
                    try {
                        _data.writeInt(attr);
                        _data.writeFloat(ds);
                        _data.writeFloat(r);
                        boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuFreeParking1Data, _data, _reply, 0);
                        if (!_status && Stub.getDefaultImpl() != null) {
                            Stub.getDefaultImpl().setScuFreeParking1Data(rx, ry, rtheta, state, attr, ds, r);
                            _reply.recycle();
                            _data.recycle();
                            return;
                        }
                        _reply.readException();
                        _reply.recycle();
                        _data.recycle();
                    } catch (Throwable th5) {
                        th = th5;
                        _reply.recycle();
                        _data.recycle();
                        throw th;
                    }
                } catch (Throwable th6) {
                    th = th6;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuFreeParking2Data(float rx, float ry, float rtheta, int state, int attr, float ds, float r) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                } catch (Throwable th) {
                    th = th;
                }
                try {
                    _data.writeFloat(rx);
                } catch (Throwable th2) {
                    th = th2;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
                try {
                    _data.writeFloat(ry);
                    try {
                        _data.writeFloat(rtheta);
                    } catch (Throwable th3) {
                        th = th3;
                        _reply.recycle();
                        _data.recycle();
                        throw th;
                    }
                    try {
                        _data.writeInt(state);
                    } catch (Throwable th4) {
                        th = th4;
                        _reply.recycle();
                        _data.recycle();
                        throw th;
                    }
                    try {
                        _data.writeInt(attr);
                        _data.writeFloat(ds);
                        _data.writeFloat(r);
                        boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuFreeParking2Data, _data, _reply, 0);
                        if (!_status && Stub.getDefaultImpl() != null) {
                            Stub.getDefaultImpl().setScuFreeParking2Data(rx, ry, rtheta, state, attr, ds, r);
                            _reply.recycle();
                            _data.recycle();
                            return;
                        }
                        _reply.readException();
                        _reply.recycle();
                        _data.recycle();
                    } catch (Throwable th5) {
                        th = th5;
                        _reply.recycle();
                        _data.recycle();
                        throw th;
                    }
                } catch (Throwable th6) {
                    th = th6;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuLeftDoorOpenWarning() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuLeftDoorOpenWarning, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuLeftDoorOpenWarning();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuRightDoorOpenWarning() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuRightDoorOpenWarning, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuRightDoorOpenWarning();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTboxRepairMode(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setTboxRepairMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setTboxRepairMode(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTboxRepairModeState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTboxRepairModeState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTboxRepairModeState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmLeftSdcPsdMotorState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmLeftSdcPsdMotorState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmLeftSdcPsdMotorState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmRightSdcPsdMotorState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmRightSdcPsdMotorState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmRightSdcPsdMotorState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setXpuNedcSwitch(int onOff) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(onOff);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setXpuNedcSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setXpuNedcSwitch(onOff);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setXpuLightChange(int onOff) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(onOff);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setXpuLightChange, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setXpuLightChange(onOff);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void registerVcuListener(IVcuEventListener listener) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeStrongBinder(listener != null ? listener.asBinder() : null);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_registerVcuListener, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().registerVcuListener(listener);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void unregisterVcuListener(IVcuEventListener listener) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeStrongBinder(listener != null ? listener.asBinder() : null);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_unregisterVcuListener, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().unregisterVcuListener(listener);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void registerEpsListener(IEpsEventListener listener) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeStrongBinder(listener != null ? listener.asBinder() : null);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_registerEpsListener, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().registerEpsListener(listener);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void unregisterEpsListener(IEpsEventListener listener) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeStrongBinder(listener != null ? listener.asBinder() : null);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_unregisterEpsListener, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().unregisterEpsListener(listener);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmKeyAuthState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmKeyAuthState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmKeyAuthState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTboxSoliderCameraSwitch(int onOff) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(onOff);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setTboxSoliderCameraSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setTboxSoliderCameraSwitch(onOff);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTboxSoliderCameraState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTboxSoliderCameraState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTboxSoliderCameraState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTboxThresholdSwitch(int highLevel, int middleLevel, int lowLevel) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(highLevel);
                    _data.writeInt(middleLevel);
                    _data.writeInt(lowLevel);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setTboxThresholdSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setTboxThresholdSwitch(highLevel, middleLevel, lowLevel);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuRearMirrorControlState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuRearMirrorControlState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuRearMirrorControlState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void activateAndroidLluControl() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_activateAndroidLluControl, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().activateAndroidLluControl();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMcuLluWorkStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuLluWorkStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuLluWorkStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTboxSoliderEnableState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTboxSoliderEnableState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTboxSoliderEnableState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getEspApbSystemDisplayMessage() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getEspApbSystemDisplayMessage, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getEspApbSystemDisplayMessage();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getEspApbSystemStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getEspApbSystemStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getEspApbSystemStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getEspHbcRequestStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getEspHbcRequestStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getEspHbcRequestStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getIcmBrakeFluidLevelWarningMessage() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getIcmBrakeFluidLevelWarningMessage, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getIcmBrakeFluidLevelWarningMessage();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getVcuAcChargeCurAfterVoltBoosted() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuAcChargeCurAfterVoltBoosted, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuAcChargeCurAfterVoltBoosted();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getVcuAcChargeVoltAfterVoltBoosted() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuAcChargeVoltAfterVoltBoosted, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuAcChargeVoltAfterVoltBoosted();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuCruiseControlStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuCruiseControlStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuCruiseControlStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendIcmUpdateRequest(String req) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(req);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendIcmUpdateRequest, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendIcmUpdateRequest(req);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public String getIcmUpdateResponse() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getIcmUpdateResponse, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getIcmUpdateResponse();
                    }
                    _reply.readException();
                    String _result = _reply.readString();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmUpdateFileTransferStatus(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmUpdateFileTransferStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmUpdateFileTransferStatus(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getIcmUpdateResult() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getIcmUpdateResult, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getIcmUpdateResult();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getIcmUpdateProgress() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getIcmUpdateProgress, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getIcmUpdateProgress();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmWiperSpeedSwitchState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmWiperSpeedSwitchState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmWiperSpeedSwitchState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendTboxRenewalPartsRequest(String req) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(req);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendTboxRenewalPartsRequest, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendTboxRenewalPartsRequest(req);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public String getTboxRenewalPartsResponse() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTboxRenewalPartsResponse, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTboxRenewalPartsResponse();
                    }
                    _reply.readException();
                    String _result = _reply.readString();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTboxRemoteLluMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTboxRemoteLluMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTboxRemoteLluMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendBcmSeatBeltRequest(int req) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(req);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendBcmSeatBeltRequest, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendBcmSeatBeltRequest(req);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendCduVolumeToAmp(int volume) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(volume);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendCduVolumeToAmp, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendCduVolumeToAmp(volume);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public byte[] getBcmNfcCardIdInfo() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmNfcCardIdInfo, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmNfcCardIdInfo();
                    }
                    _reply.readException();
                    byte[] _result = _reply.createByteArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmAutoLightState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmAutoLightState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmAutoLightState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setXpuCduBrightness(int brightness) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(brightness);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setXpuCduBrightness, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setXpuCduBrightness(brightness);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuBrightness() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuBrightness, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuBrightness();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMcuDelaySleep(int heartBeat, int value) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(heartBeat);
                    _data.writeInt(value);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMcuDelaySleep, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMcuDelaySleep(heartBeat, value);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendTboxBleAccountLoginFeedback(int feedback) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(feedback);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendTboxBleAccountLoginFeedback, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendTboxBleAccountLoginFeedback(feedback);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendMcuBleAccountDataFeedback(int feedback) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(feedback);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendMcuBleAccountDataFeedback, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendMcuBleAccountDataFeedback(feedback);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public byte[] getMcuBleAccountData() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuBleAccountData, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuBleAccountData();
                    }
                    _reply.readException();
                    byte[] _result = _reply.createByteArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuExtraLatCtrlRemindInfo() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuExtraLatCtrlRemindInfo, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuExtraLatCtrlRemindInfo();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAvasFaultStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAvasFaultStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAvasFaultStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCiuStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCiuStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCiuStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getBmsCellTempMaxNum() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBmsCellTempMaxNum, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBmsCellTempMaxNum();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getBmsCellTempMinNum() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBmsCellTempMinNum, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBmsCellTempMinNum();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getWasherFluidWarning() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getWasherFluidWarning, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getWasherFluidWarning();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getBcmPassengerSeatBeltSbrWarningStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmPassengerSeatBeltSbrWarningStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmPassengerSeatBeltSbrWarningStatus();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmSeatHeatErrStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmSeatHeatErrStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmSeatHeatErrStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getIcmCabinAiFeedback() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getIcmCabinAiFeedback, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getIcmCabinAiFeedback();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuAlarmFaultStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuAlarmFaultStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuAlarmFaultStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getScu322LogDataD20() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScu322LogDataD20, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScu322LogDataD20();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuSlaStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuSlaStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuSlaStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuLdwStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuLdwStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuLdwStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuBsdStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuBsdStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuBsdStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuRctaStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuRctaStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuRctaStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacErrorStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacErrorStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacErrorStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBmsScoIsLowStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBmsScoIsLowStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBmsScoIsLowStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBmsIsErrorStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBmsIsErrorStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBmsIsErrorStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getIsHvCutOffStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getIsHvCutOffStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getIsHvCutOffStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBatteryKeepTempSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBatteryKeepTempSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBatteryKeepTempSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBatteryKeepTempMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBatteryKeepTempMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBatteryKeepTempMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSpeedUpChargeSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSpeedUpChargeSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSpeedUpChargeSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getSpeedUpChargeMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSpeedUpChargeMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSpeedUpChargeMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAutoLightSwitch(int onOff) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(onOff);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAutoLightSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAutoLightSwitch(onOff);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendTboxLocationInfo(String data) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(data);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendTboxLocationInfo, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendTboxLocationInfo(data);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmRearLeftSeatHeatSw(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmRearLeftSeatHeatSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmRearLeftSeatHeatSw(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmRearLeftSeatHeatState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmRearLeftSeatHeatState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmRearLeftSeatHeatState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmRearRightSeatHeatSw(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmRearRightSeatHeatSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmRearRightSeatHeatSw(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmRearRightSeatHeatState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmRearRightSeatHeatState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmRearRightSeatHeatState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmRearLeftHeaterErrorState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmRearLeftHeaterErrorState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmRearLeftHeaterErrorState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmRearRightHeaterErrorState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmRearRightHeaterErrorState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmRearRightHeaterErrorState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVcuDriveMileIncreaseSwitch(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVcuDriveMileIncreaseSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVcuDriveMileIncreaseSwitch(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuDriveMileIncreaseStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuDriveMileIncreaseStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuDriveMileIncreaseStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuDistractionSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuDistractionSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setScuDistractionSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuCutInPreventionWarning() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuCutInPreventionWarning, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuCutInPreventionWarning();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuAccLkaWarning() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuAccLkaWarning, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuAccLkaWarning();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuRoadVoiceTips() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuRoadVoiceTips, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuRoadVoiceTips();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacAirInTakeAutoControlStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacAirInTakeAutoControlStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacAirInTakeAutoControlStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacWindSpeedAutoControlStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacWindSpeedAutoControlStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacWindSpeedAutoControlStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacAirDistributionAutoControlStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacAirDistributionAutoControlStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacAirDistributionAutoControlStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmSdcKeyOpenCtrlCfg(int cfg) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(cfg);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmSdcKeyOpenCtrlCfg, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmSdcKeyOpenCtrlCfg(cfg);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmSdcKeyOpenCtrlCfg() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmSdcKeyOpenCtrlCfg, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmSdcKeyOpenCtrlCfg();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmSdcKeyCloseCtrlCfg(int cfg) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(cfg);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmSdcKeyCloseCtrlCfg, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmSdcKeyCloseCtrlCfg(cfg);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmSdcKeyCloseCtrlCfg() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmSdcKeyCloseCtrlCfg, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmSdcKeyCloseCtrlCfg();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmSdcMaxAutoDoorOpeningAngle(int maxAngle) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(maxAngle);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmSdcMaxAutoDoorOpeningAngle, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmSdcMaxAutoDoorOpeningAngle(maxAngle);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmSdcMaxAutoDoorOpeningAngle() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmSdcMaxAutoDoorOpeningAngle, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmSdcMaxAutoDoorOpeningAngle();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmLeftSdcHazzardRequest() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmLeftSdcHazzardRequest, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmLeftSdcHazzardRequest();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmRightSdcHazzardRequest() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmRightSdcHazzardRequest, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmRightSdcHazzardRequest();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmLeftSdcSystemErrorState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmLeftSdcSystemErrorState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmLeftSdcSystemErrorState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmRightSdcSystemErrorState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmRightSdcSystemErrorState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmRightSdcSystemErrorState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmLeftSdcDenormalizeState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmLeftSdcDenormalizeState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmLeftSdcDenormalizeState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmRightSdcDenormalizeState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmRightSdcDenormalizeState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmRightSdcDenormalizeState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmLeftSdcWindowsAutoDownSwitch(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmLeftSdcWindowsAutoDownSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmLeftSdcWindowsAutoDownSwitch(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmLeftSdcWindowsAutoDownSwitchState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmLeftSdcWindowsAutoDownSwitchState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmLeftSdcWindowsAutoDownSwitchState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmRightSdcWindowsAutoDownSwitch(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmRightSdcWindowsAutoDownSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmRightSdcWindowsAutoDownSwitch(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmRightSdcWindowsAutoDownSwitchState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmRightSdcWindowsAutoDownSwitchState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmRightSdcWindowsAutoDownSwitchState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmLeftSdcAutoOrManualControl(int cmd, int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(cmd);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmLeftSdcAutoOrManualControl, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmLeftSdcAutoOrManualControl(cmd, sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmRightSdcAutoOrManualControl(int cmd, int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(cmd);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmRightSdcAutoOrManualControl, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmRightSdcAutoOrManualControl(cmd, sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmReadyEnableState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmReadyEnableState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmReadyEnableState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuNedcSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuNedcSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuNedcSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVcuEnduranceMileageMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVcuEnduranceMileageMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVcuEnduranceMileageMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuEnduranceMileageMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuEnduranceMileageMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuEnduranceMileageMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuWltpAvailableDrivingDistance() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuWltpAvailableDrivingDistance, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuWltpAvailableDrivingDistance();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmBreakPedalStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmBreakPedalStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmBreakPedalStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmLeftSdcDoorPosition(int position) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(position);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmLeftSdcDoorPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmLeftSdcDoorPosition(position);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmRightSdcDoorPosition(int position) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(position);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmRightSdcDoorPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmRightSdcDoorPosition(position);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuSlaAlarmSwitch(int state) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(state);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuSlaAlarmSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setScuSlaAlarmSwitch(state);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuSlaAlarmSwitchState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuSlaAlarmSwitchState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuSlaAlarmSwitchState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float[] getScuLocatDataWithZ() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuLocatDataWithZ, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuLocatDataWithZ();
                    }
                    _reply.readException();
                    float[] _result = _reply.createFloatArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMcuCidState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuCidState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuCidState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMcuRvcState(int state) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(state);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMcuRvcState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMcuRvcState(state);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuFsdSwitch(int onOff) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(onOff);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuFsdSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setScuFsdSwitch(onOff);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuFsdSwitchState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuFsdSwitchState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuFsdSwitchState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMcuBacklightTemperature() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuBacklightTemperature, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuBacklightTemperature();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMcuBacklightIcDriverState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuBacklightIcDriverState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuBacklightIcDriverState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmDayNightMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmDayNightMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmDayNightMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTboxBatteryKeepTempSwitch(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setTboxBatteryKeepTempSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setTboxBatteryKeepTempSwitch(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTboxRemoteBatteryKeepTempReq() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTboxRemoteBatteryKeepTempReq, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTboxRemoteBatteryKeepTempReq();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTboxBatteryKeepTempAppointTime(int appointFlag, int appointHour, int appointMin) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(appointFlag);
                    _data.writeInt(appointHour);
                    _data.writeInt(appointMin);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setTboxBatteryKeepTempAppointTime, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setTboxBatteryKeepTempAppointTime(appointFlag, appointHour, appointMin);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getTboxBatteryKeepTempAppointTime() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTboxBatteryKeepTempAppointTime, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTboxBatteryKeepTempAppointTime();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacAcCtrlType() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacAcCtrlType, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacAcCtrlType();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacBlowerCtrlType() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacBlowerCtrlType, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacBlowerCtrlType();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacAirCirculationType() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacAirCirculationType, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacAirCirculationType();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuLkaState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuLkaState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuLkaState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmNfcCardAuthStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmNfcCardAuthStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmNfcCardAuthStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public String getIcmUpdatingPartitionAndProgress() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getIcmUpdatingPartitionAndProgress, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getIcmUpdatingPartitionAndProgress();
                    }
                    _reply.readException();
                    String _result = _reply.readString();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getLeftAndRightTurnLampsActiveStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLeftAndRightTurnLampsActiveStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLeftAndRightTurnLampsActiveStatus();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmAutoWindowsControl(int cmd, int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(cmd);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmAutoWindowsControl, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmAutoWindowsControl(cmd, type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getBcmDaytimeRunningLightsOutputStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmDaytimeRunningLightsOutputStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmDaytimeRunningLightsOutputStatus();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmEnvironmentMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmEnvironmentMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmEnvironmentMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void notifyScuRearViewMirrorAdjustmentPageState(int state) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(state);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_notifyScuRearViewMirrorAdjustmentPageState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().notifyScuRearViewMirrorAdjustmentPageState(state);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmTrunkDoorHeight() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmTrunkDoorHeight, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmTrunkDoorHeight();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuMrrFailureSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuMrrFailureSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuMrrFailureSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuFishEyeCamFailureSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuFishEyeCamFailureSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuFishEyeCamFailureSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuMainCamFailureSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuMainCamFailureSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuMainCamFailureSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuNarrowCamFailureSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuNarrowCamFailureSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuNarrowCamFailureSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getScuSideCamsFailureSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuSideCamsFailureSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuSideCamsFailureSt();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuDisplayCruiseSpeed() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuDisplayCruiseSpeed, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuDisplayCruiseSpeed();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getQuitNgpOddSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getQuitNgpOddSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getQuitNgpOddSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuNgpOperationButton(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuNgpOperationButton, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setScuNgpOperationButton(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuNgpOperationButtonSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuNgpOperationButtonSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuNgpOperationButtonSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuNgpLcTips1() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuNgpLcTips1, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuNgpLcTips1();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuNgpInfoTips1() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuNgpInfoTips1, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuNgpInfoTips1();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuNgpTipsWindowsSw(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuNgpTipsWindowsSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setScuNgpTipsWindowsSw(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getScuDoorsObstacleDetectionSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuDoorsObstacleDetectionSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuDoorsObstacleDetectionSt();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getScuDoorsRadarDistance() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuDoorsRadarDistance, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuDoorsRadarDistance();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getScuDoorsRadarDisplayLevel() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuDoorsRadarDisplayLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuDoorsRadarDisplayLevel();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmFollowMeHomeCfg(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmFollowMeHomeCfg, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmFollowMeHomeCfg(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmFollowMeHomeCfg() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmFollowMeHomeCfg, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmFollowMeHomeCfg();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAtlConfiguration(byte[] data) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeByteArray(data);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAtlConfiguration, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAtlConfiguration(data);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public String getIcmEcuUpdateResult() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getIcmEcuUpdateResult, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getIcmEcuUpdateResult();
                    }
                    _reply.readException();
                    String _result = _reply.readString();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTboxGpsLogSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setTboxGpsLogSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setTboxGpsLogSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTboxToggleGpsLogSwitchResult() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTboxToggleGpsLogSwitchResult, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTboxToggleGpsLogSwitchResult();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmCwcSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmCwcSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmCwcSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmCwcSwitchState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmCwcSwitchState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmCwcSwitchState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public String getIcmCrashInfo() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getIcmCrashInfo, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getIcmCrashInfo();
                    }
                    _reply.readException();
                    String _result = _reply.readString();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmLeftSdcMoveCommand() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmLeftSdcMoveCommand, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmLeftSdcMoveCommand();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmRightSdcMoveCommand() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmRightSdcMoveCommand, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmRightSdcMoveCommand();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getEpsTorsionBarTorque() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getEpsTorsionBarTorque, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getEpsTorsionBarTorque();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuXpilot3Status() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuXpilot3Status, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuXpilot3Status();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuNgpPreferFastLaneSw(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuNgpPreferFastLaneSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setScuNgpPreferFastLaneSw(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuNgpAvoidTruckSw(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuNgpAvoidTruckSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setScuNgpAvoidTruckSw(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuNgpDriverConfirmLaneChangeSw(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuNgpDriverConfirmLaneChangeSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setScuNgpDriverConfirmLaneChangeSw(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuNgpLaneChangeMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuNgpLaneChangeMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setScuNgpLaneChangeMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuNgpRemindMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuNgpRemindMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setScuNgpRemindMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMcuLluModeCtrl(int mhlActiveMode, int lhlActiveMode, int rhlActiveMode, int mrlActiveMode, int lrlActiveMode, int rrlActiveMode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                } catch (Throwable th) {
                    th = th;
                }
                try {
                    _data.writeInt(mhlActiveMode);
                } catch (Throwable th2) {
                    th = th2;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
                try {
                    _data.writeInt(lhlActiveMode);
                } catch (Throwable th3) {
                    th = th3;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
                try {
                    _data.writeInt(rhlActiveMode);
                } catch (Throwable th4) {
                    th = th4;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
                try {
                    _data.writeInt(mrlActiveMode);
                } catch (Throwable th5) {
                    th = th5;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
                try {
                    _data.writeInt(lrlActiveMode);
                } catch (Throwable th6) {
                    th = th6;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
                try {
                    _data.writeInt(rrlActiveMode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMcuLluModeCtrl, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMcuLluModeCtrl(mhlActiveMode, lhlActiveMode, rhlActiveMode, mrlActiveMode, lrlActiveMode, rrlActiveMode);
                        _reply.recycle();
                        _data.recycle();
                        return;
                    }
                    _reply.readException();
                    _reply.recycle();
                    _data.recycle();
                } catch (Throwable th7) {
                    th = th7;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMcuLLuSelfControlData(byte[] data) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeByteArray(data);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMcuLLuSelfControlData, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMcuLLuSelfControlData(data);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMcuTrunkPowerSw(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMcuTrunkPowerSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMcuTrunkPowerSw(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMcuTrunkPowerStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuTrunkPowerStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuTrunkPowerStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMcuTrunkPowerOffDelay(int delay) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(delay);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMcuTrunkPowerOffDelay, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMcuTrunkPowerOffDelay(delay);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMcuTrunkPowerOffDelay() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuTrunkPowerOffDelay, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuTrunkPowerOffDelay();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public String getIcmDiagnosisInfo() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getIcmDiagnosisInfo, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getIcmDiagnosisInfo();
                    }
                    _reply.readException();
                    String _result = _reply.readString();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuNgpTipsWindowsSwSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuNgpTipsWindowsSwSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuNgpTipsWindowsSwSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuNgpPreferFastLaneSwSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuNgpPreferFastLaneSwSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuNgpPreferFastLaneSwSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuNgpAvoidTruckSwSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuNgpAvoidTruckSwSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuNgpAvoidTruckSwSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuNgpDriverConfirmLaneChangeSwSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuNgpDriverConfirmLaneChangeSwSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuNgpDriverConfirmLaneChangeSwSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuNgpLaneChangeMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuNgpLaneChangeMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuNgpLaneChangeMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuNgpRemindMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuNgpRemindMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuNgpRemindMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getSrsRearLeftSeatOccupancyStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSrsRearLeftSeatOccupancyStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSrsRearLeftSeatOccupancyStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getSrsRearMiddleSeatOccupancyStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSrsRearMiddleSeatOccupancyStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSrsRearMiddleSeatOccupancyStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getSrsRearRightSeatOccupancyStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSrsRearRightSeatOccupancyStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSrsRearRightSeatOccupancyStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmShadeControllerComfortCommand(int command) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(command);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmShadeControllerComfortCommand, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmShadeControllerComfortCommand(command);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmShadeControllerPosition(int position) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(position);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmShadeControllerPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmShadeControllerPosition(position);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmShadeControllerPosition() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmShadeControllerPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmShadeControllerPosition();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmShadeControllerInitialization(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmShadeControllerInitialization, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmShadeControllerInitialization(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmShadeControllerInitializationSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmShadeControllerInitializationSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmShadeControllerInitializationSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getBcmWiperSpeedSwitchesStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmWiperSpeedSwitchesStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmWiperSpeedSwitchesStatus();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getVcuObcAcVoltage() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuObcAcVoltage, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuObcAcVoltage();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getVcuObcAcCurrent() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuObcAcCurrent, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuObcAcCurrent();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuObcAcVoltageStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuObcAcVoltageStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuObcAcVoltageStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmLeftSdcSystemRunningState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmLeftSdcSystemRunningState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmLeftSdcSystemRunningState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmRightSdcSystemRunningState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmRightSdcSystemRunningState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmRightSdcSystemRunningState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuSsLeftSystemStatus(byte[] data) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeByteArray(data);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuSsLeftSystemStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setScuSsLeftSystemStatus(data);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuSsRightSystemStatus(byte[] data) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeByteArray(data);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuSsRightSystemStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setScuSsRightSystemStatus(data);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuSdcUltrasonicRadarVoiceTone() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuSdcUltrasonicRadarVoiceTone, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuSdcUltrasonicRadarVoiceTone();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmLeftSdcDoorPosition() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmLeftSdcDoorPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmLeftSdcDoorPosition();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmRightSdcDoorPosition() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmRightSdcDoorPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmRightSdcDoorPosition();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuOtaTagStatus(int tag) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(tag);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuOtaTagStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setScuOtaTagStatus(tag);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuSdcTips() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuSdcTips, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuSdcTips();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuSdcTts() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuSdcTts, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuSdcTts();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuCurrentRoadSpeedLimit(int speedLimit) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(speedLimit);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuCurrentRoadSpeedLimit, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setScuCurrentRoadSpeedLimit(speedLimit);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuLccExitReason() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuLccExitReason, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuLccExitReason();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuAccExitReason() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuAccExitReason, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuAccExitReason();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuElkSwitch(int off) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(off);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuElkSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setScuElkSwitch(off);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuElkSwitchState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuElkSwitchState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuElkSwitchState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getBcmRearViewMirrorsAdjustStates() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmRearViewMirrorsAdjustStates, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmRearViewMirrorsAdjustStates();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacSfsSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacSfsSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacSfsSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacSfsSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacSfsSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacSfsSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getHvacSfsTypeInChannels() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacSfsTypeInChannels, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacSfsTypeInChannels();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHavacSfsChannel(int channel) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(channel);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHavacSfsChannel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHavacSfsChannel(channel);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacSfsChannel() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacSfsChannel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacSfsChannel();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacDeodorizeSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacDeodorizeSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacDeodorizeSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacDeodorizeSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacDeodorizeSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacDeodorizeSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacWarpSpeedWarmingSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacWarpSpeedWarmingSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacWarpSpeedWarmingSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacWarpSpeedWarmingSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacWarpSpeedWarmingSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacWarpSpeedWarmingSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacWarpSpeedCoolingSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacWarpSpeedCoolingSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacWarpSpeedCoolingSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacWarpSpeedCoolingSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacWarpSpeedCoolingSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacWarpSpeedCoolingSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacAutoDefogSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacAutoDefogSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacAutoDefogSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacAutoDefogSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacAutoDefogSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacAutoDefogSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmPassengerSeatHorizontalPosition(int pos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(pos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmPassengerSeatHorizontalPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmPassengerSeatHorizontalPosition(pos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMsmPassengerSeatHorizontalPosition() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmPassengerSeatHorizontalPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmPassengerSeatHorizontalPosition();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmPassengerSeatVerticalPosition(int pos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(pos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmPassengerSeatVerticalPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmPassengerSeatVerticalPosition(pos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMsmPassengerSeatVerticalPosition() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmPassengerSeatVerticalPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmPassengerSeatVerticalPosition();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmPassengerSeatBackPosition(int pos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(pos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmPassengerSeatBackPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmPassengerSeatBackPosition(pos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMsmPassengerSeatBackPosition() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(1280, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmPassengerSeatBackPosition();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMsmDriverHeadrestStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(1281, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmDriverHeadrestStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMsmPassengerHeadrestStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(1282, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmPassengerHeadrestStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getImuSatellitesNumber() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(1283, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getImuSatellitesNumber();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getImuNavigationSatellitesRssi() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getImuNavigationSatellitesRssi, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getImuNavigationSatellitesRssi();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void deactivateAndroidLluControl() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_deactivateAndroidLluControl, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().deactivateAndroidLluControl();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmShadeControllerMotorStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmShadeControllerMotorStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmShadeControllerMotorStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmPassengerAllPositions(int seatHorizonPos, int seatVerticalPos, int seatTiltingPos, int legHeightPos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(seatHorizonPos);
                    _data.writeInt(seatVerticalPos);
                    _data.writeInt(seatTiltingPos);
                    _data.writeInt(legHeightPos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmPassengerAllPositions, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmPassengerAllPositions(seatHorizonPos, seatVerticalPos, seatTiltingPos, legHeightPos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmPassengerAllPositionsToLDCU(int memoryReq, int seatHorizonPos, int seatVerticalPos, int seatTiltingPos, int legHeightPos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(memoryReq);
                    _data.writeInt(seatHorizonPos);
                    _data.writeInt(seatVerticalPos);
                    _data.writeInt(seatTiltingPos);
                    _data.writeInt(legHeightPos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmPassengerAllPositionsToLDCU, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmPassengerAllPositionsToLDCU(memoryReq, seatHorizonPos, seatVerticalPos, seatTiltingPos, legHeightPos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuRightSdcRadarStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuRightSdcRadarStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuRightSdcRadarStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuLeftSdcRadarStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuLeftSdcRadarStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuLeftSdcRadarStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuLeftSdcBlindStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuLeftSdcBlindStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuLeftSdcBlindStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuLeftSdcSceneStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuLeftSdcSceneStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuLeftSdcSceneStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuRightSdcBlindStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuRightSdcBlindStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuRightSdcBlindStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuRightSdcSceneStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuRightSdcSceneStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuRightSdcSceneStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuSdcAutoModeStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuSdcAutoModeStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuSdcAutoModeStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuSdcCtrlIndex1() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuSdcCtrlIndex1, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuSdcCtrlIndex1();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuSdcCtrlIndex2() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuSdcCtrlIndex2, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuSdcCtrlIndex2();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuLeftSdcURadarDistance() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuLeftSdcURadarDistance, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuLeftSdcURadarDistance();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuRightSdcURadarDistance() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuRightSdcURadarDistance, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuRightSdcURadarDistance();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuParkingGroundState(int state) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(state);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuParkingGroundState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setScuParkingGroundState(state);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuRightSdcRadarDistance() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuRightSdcRadarDistance, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuRightSdcRadarDistance();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuRightSdcRadarTof() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuRightSdcRadarTof, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuRightSdcRadarTof();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuRightSdcRadarPeakLevel() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuRightSdcRadarPeakLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuRightSdcRadarPeakLevel();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuRightSdcRadarStatusCcp() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuRightSdcRadarStatusCcp, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuRightSdcRadarStatusCcp();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuRightSdcRadarErrorStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuRightSdcRadarErrorStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuRightSdcRadarErrorStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuLeftSdcRadarDistance() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuLeftSdcRadarDistance, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuLeftSdcRadarDistance();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuLeftSdcRadarTof() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuLeftSdcRadarTof, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuLeftSdcRadarTof();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuLeftSdcRadarPeakLevel() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuLeftSdcRadarPeakLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuLeftSdcRadarPeakLevel();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuLeftSdcRadarStatusCcp() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuLeftSdcRadarStatusCcp, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuLeftSdcRadarStatusCcp();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuLeftSdcRadarErrorStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuLeftSdcRadarErrorStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuLeftSdcRadarErrorStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuRightSdcRadarRt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuRightSdcRadarRt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuRightSdcRadarRt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuRightSdcRadarWaveWidth() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuRightSdcRadarWaveWidth, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuRightSdcRadarWaveWidth();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuLeftSdcRadarRt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuLeftSdcRadarRt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuLeftSdcRadarRt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuLeftSdcRadarWaveWidth() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuLeftSdcRadarWaveWidth, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuLeftSdcRadarWaveWidth();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getRightRightSdcIndexN() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getRightRightSdcIndexN, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getRightRightSdcIndexN();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLeftSdcIndexN() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLeftSdcIndexN, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLeftSdcIndexN();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getScuSdcRadarFusion() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuSdcRadarFusion, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuSdcRadarFusion();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuLeftSdcRadarHallCounter() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuLeftSdcRadarHallCounter, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuLeftSdcRadarHallCounter();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuRightSdcRadarHallCounter() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuRightSdcRadarHallCounter, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuRightSdcRadarHallCounter();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMcuFactoryModeSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMcuFactoryModeSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMcuFactoryModeSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuCarStationaryStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuCarStationaryStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuCarStationaryStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMcuFactoryModeSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuFactoryModeSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuFactoryModeSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMcuTemporaryFactoryStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuTemporaryFactoryStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuTemporaryFactoryStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuAebAlarmSwitchState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuAebAlarmSwitchState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuAebAlarmSwitchState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacSfsConcentration(int value) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(value);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacSfsConcentration, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacSfsConcentration(value);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacSfsConcentrationStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacSfsConcentrationStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacSfsConcentrationStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuSteeringWheelEps() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuSteeringWheelEps, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuSteeringWheelEps();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuVoiceLaneChangeCommand(int cmd) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(cmd);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuVoiceLaneChangeCommand, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setScuVoiceLaneChangeCommand(cmd);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuNgpModeStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuNgpModeStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuNgpModeStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuParkByMemorySwSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuParkByMemorySwSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuParkByMemorySwSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuParkByMemorySw(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuParkByMemorySw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setScuParkByMemorySw(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void stopMsmDriverSeatMoving(int cmd) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(cmd);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_stopMsmDriverSeatMoving, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().stopMsmDriverSeatMoving(cmd);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void stopMsmPassengerSeatMoving(int cmd) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(cmd);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_stopMsmPassengerSeatMoving, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().stopMsmPassengerSeatMoving(cmd);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuDsmPrompt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuDsmPrompt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuDsmPrompt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float[] getImuSystemStateAndSpeed() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getImuSystemStateAndSpeed, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getImuSystemStateAndSpeed();
                    }
                    _reply.readException();
                    float[] _result = _reply.createFloatArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuLdwLkaSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuLdwLkaSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuLdwLkaSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuLdwLkaSwitchStatus(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuLdwLkaSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setScuLdwLkaSwitchStatus(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuLkaSwitchState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuLkaSwitchState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuLkaSwitchState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuCurrentElectronicEyeSpeedLimitAndDistance(int speedLimit, int distance) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(speedLimit);
                    _data.writeInt(distance);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuCurrentElectronicEyeSpeedLimitAndDistance, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setScuCurrentElectronicEyeSpeedLimitAndDistance(speedLimit, distance);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTboxUpgradePrepareRequest(String req) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(req);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setTboxUpgradePrepareRequest, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setTboxUpgradePrepareRequest(req);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public String getTboxUpgradePrepareResponse() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTboxUpgradePrepareResponse, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTboxUpgradePrepareResponse();
                    }
                    _reply.readException();
                    String _result = _reply.readString();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMcuWifiHotspotRequest() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuWifiHotspotRequest, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuWifiHotspotRequest();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float[] getScuURadarDataInfo() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuURadarDataInfo, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuURadarDataInfo();
                    }
                    _reply.readException();
                    float[] _result = _reply.createFloatArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuAlcCtrlRemindInfo() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuAlcCtrlRemindInfo, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuAlcCtrlRemindInfo();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacCoConcentrationStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacCoConcentrationStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacCoConcentrationStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendTboxEmergencyWifiBleMessage(String msg) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(msg);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendTboxEmergencyWifiBleMessage, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendTboxEmergencyWifiBleMessage(msg);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVpmRdpLeftWarningStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVpmRdpLeftWarningStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVpmRdpLeftWarningStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVpmRdpRightWarningStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVpmRdpRightWarningStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVpmRdpRightWarningStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getSrsPassengerCrashOccurSwSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSrsPassengerCrashOccurSwSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSrsPassengerCrashOccurSwSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSrsPassengerCrashOccurSw(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSrsPassengerCrashOccurSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSrsPassengerCrashOccurSw(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendMcuOpenWifiHotspotResponse(int response) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(response);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendMcuOpenWifiHotspotResponse, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendMcuOpenWifiHotspotResponse(response);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void requestIcmDashboardLightsStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_requestIcmDashboardLightsStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().requestIcmDashboardLightsStatus();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public String getIcmDashboardLightsStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getIcmDashboardLightsStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getIcmDashboardLightsStatus();
                    }
                    _reply.readException();
                    String _result = _reply.readString();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmLeftCard(int index) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(index);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmLeftCard, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmLeftCard(index);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmRightCard(int index) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(index);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmRightCard, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmRightCard(index);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMcuKeyStartStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuKeyStartStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuKeyStartStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmSaberLightSw(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmSaberLightSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmSaberLightSw(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getSpcSolarWorkSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSpcSolarWorkSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSpcSolarWorkSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getSpcGrossEnergyGeneration() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSpcGrossEnergyGeneration, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSpcGrossEnergyGeneration();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getSpcRecentEnergyGeneration() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSpcRecentEnergyGeneration, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSpcRecentEnergyGeneration();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuRemoteFlag() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuRemoteFlag, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuRemoteFlag();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getSpcSolarPower() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSpcSolarPower, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSpcSolarPower();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLluAndroidLlSt(int st) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(st);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLluAndroidLlSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLluAndroidLlSt(st);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmMaintainModeSw(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmMaintainModeSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmMaintainModeSw(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMcuTrunkPowerOnRequest() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuTrunkPowerOnRequest, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuTrunkPowerOnRequest();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmScSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmScSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmScSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmScEcuStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmScEcuStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmScEcuStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmScThermalProtectSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmScThermalProtectSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmScThermalProtectSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmScAntiPinchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmScAntiPinchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmScAntiPinchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmScIceBreakMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmScIceBreakMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmScIceBreakMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmScLinStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmScLinStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmScLinStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVcuSpecialDrivingMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVcuSpecialDrivingMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVcuSpecialDrivingMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuSpecialDrivingMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuSpecialDrivingMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuSpecialDrivingMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVcuPowerResponseMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVcuPowerResponseMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVcuPowerResponseMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuPowerResponseMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuPowerResponseMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuPowerResponseMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVcuMotorPowerMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVcuMotorPowerMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVcuMotorPowerMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuMotorPowerMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuMotorPowerMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuMotorPowerMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVcuXpedalModeSwitchStatus(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVcuXpedalModeSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVcuXpedalModeSwitchStatus(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuXpedalModeSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuXpedalModeSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuXpedalModeSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmHeightLvlConfigValue(int config) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(config);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmHeightLvlConfigValue, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmHeightLvlConfigValue(config);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmHeightLvlConfigValue() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmHeightLvlConfigValue, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmHeightLvlConfigValue();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmSoftLvlConfigValue(int config) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(config);
                    boolean _status = this.mRemote.transact(1400, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmSoftLvlConfigValue(config);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmSoftLvlConfigValue() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmSoftLvlConfigValue, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmSoftLvlConfigValue();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmHandleAutoSwitch(int onOff) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(onOff);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmHandleAutoSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmHandleAutoSwitch(onOff);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmHandleAutoState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmHandleAutoState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmHandleAutoState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setEspOffRoadSwitch(int onOff) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(onOff);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setEspOffRoadSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setEspOffRoadSwitch(onOff);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmEasyLoadingState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmEasyLoadingState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmEasyLoadingState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmEasyLoadingSwitch(int onOff) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(onOff);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmEasyLoadingSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmEasyLoadingSwitch(onOff);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmMaintainModeSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmMaintainModeSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmMaintainModeSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmSuspenWelcomeSwitchState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmSuspenWelcomeSwitchState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmSuspenWelcomeSwitchState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmSuspenWelcomeSwitch(int onOff) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(onOff);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmSuspenWelcomeSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmSuspenWelcomeSwitch(onOff);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuExhibModeSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuExhibModeSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuExhibModeSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuRoadAttribType(int road) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(road);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuRoadAttribType, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setScuRoadAttribType(road);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuSpeedLimitDriverConfirmSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuSpeedLimitDriverConfirmSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setScuSpeedLimitDriverConfirmSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuSpeedLimitRange(int range) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(range);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuSpeedLimitRange, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setScuSpeedLimitRange(range);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuSpeedLimitSwitchState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuSpeedLimitSwitchState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuSpeedLimitSwitchState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuSpeedLimitSwitchState(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuSpeedLimitSwitchState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setScuSpeedLimitSwitchState(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuIntelligentSpeedLimitValue(int value) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(value);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuIntelligentSpeedLimitValue, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setScuIntelligentSpeedLimitValue(value);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float[] getImuSystemStateFromCan() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getImuSystemStateFromCan, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getImuSystemStateFromCan();
                    }
                    _reply.readException();
                    float[] _result = _reply.createFloatArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float[] getImuNavigationDataFromCan() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getImuNavigationDataFromCan, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getImuNavigationDataFromCan();
                    }
                    _reply.readException();
                    float[] _result = _reply.createFloatArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float[] getImuSystemStateAndSpeedFromCan() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getImuSystemStateAndSpeedFromCan, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getImuSystemStateAndSpeedFromCan();
                    }
                    _reply.readException();
                    float[] _result = _reply.createFloatArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmSaberLightSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmSaberLightSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmSaberLightSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendMcuMapVersion(String version) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(version);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendMcuMapVersion, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendMcuMapVersion(version);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuSpeedLimitDriverConfirmStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuSpeedLimitDriverConfirmStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuSpeedLimitDriverConfirmStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuSpeedLimitRange() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuSpeedLimitRange, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuSpeedLimitRange();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuSpeedLimitControlSystemState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuSpeedLimitControlSystemState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuSpeedLimitControlSystemState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getBcmLRMirrorHeatSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmLRMirrorHeatSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmLRMirrorHeatSwitchStatus();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuCltcAvailableDrivingDistance() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuCltcAvailableDrivingDistance, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuCltcAvailableDrivingDistance();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendMcuTboxVBusControlCommand(int cmd) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(cmd);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendMcuTboxVBusControlCommand, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendMcuTboxVBusControlCommand(cmd);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendTboxMultiBleRenewalRequest(String req) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(req);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendTboxMultiBleRenewalRequest, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendTboxMultiBleRenewalRequest(req);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public String getTboxMultiBleRenewalResponse() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTboxMultiBleRenewalResponse, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTboxMultiBleRenewalResponse();
                    }
                    _reply.readException();
                    String _result = _reply.readString();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuMemoryParkingState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuMemoryParkingState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuMemoryParkingState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuObcFaultPhaseLossStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuObcFaultPhaseLossStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuObcFaultPhaseLossStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuSpeedLimitRemindVoice() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuSpeedLimitRemindVoice, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuSpeedLimitRemindVoice();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuDsmStatus(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuDsmStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setScuDsmStatus(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuDsmStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuDsmStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuDsmStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendTboxFactoryPreCert(String cert) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(cert);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendTboxFactoryPreCert, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendTboxFactoryPreCert(cert);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public String getTboxFactoryPreCert() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTboxFactoryPreCert, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTboxFactoryPreCert();
                    }
                    _reply.readException();
                    String _result = _reply.readString();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendScuNaviLoadLinkType(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendScuNaviLoadLinkType, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendScuNaviLoadLinkType(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setXpuApRemoteSw(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setXpuApRemoteSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setXpuApRemoteSw(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuApRemoteSw() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuApRemoteSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuApRemoteSw();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setEspEpbSystemSwitch(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setEspEpbSystemSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setEspEpbSystemSwitch(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getEspInterventionStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getEspInterventionStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getEspInterventionStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVcuTrailerModeSwitchStatus(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVcuTrailerModeSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVcuTrailerModeSwitchStatus(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuTrailerModeSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuTrailerModeSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuTrailerModeSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmdAllPositions(int seatHorizonPos, int seatVerticalPos, int seatTiltingPos, int legHeightPos, int legHorzPos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(seatHorizonPos);
                    _data.writeInt(seatVerticalPos);
                    _data.writeInt(seatTiltingPos);
                    _data.writeInt(legHeightPos);
                    _data.writeInt(legHorzPos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmdAllPositions, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmdAllPositions(seatHorizonPos, seatVerticalPos, seatTiltingPos, legHeightPos, legHorzPos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void saveMsmDAllPositionsToMcu(int seatHorizonPos, int seatVerticalPos, int seatTiltingPos, int legHeightPos, int legHorzPos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(seatHorizonPos);
                    _data.writeInt(seatVerticalPos);
                    _data.writeInt(seatTiltingPos);
                    _data.writeInt(legHeightPos);
                    _data.writeInt(legHorzPos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_saveMsmDAllPositionsToMcu, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().saveMsmDAllPositionsToMcu(seatHorizonPos, seatVerticalPos, seatTiltingPos, legHeightPos, legHorzPos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmDriverSeatTiltLevelOff(int cmd) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(cmd);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmDriverSeatTiltLevelOff, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmDriverSeatTiltLevelOff(cmd);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmDriverSeatCushTiltPos(int control, int direction) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(direction);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmDriverSeatCushTiltPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmDriverSeatCushTiltPos(control, direction);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmPassengerSeatCushExt(int control, int direction) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(direction);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmPassengerSeatCushExt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmPassengerSeatCushExt(control, direction);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmSecrowLtSeatTiltReq(int control, int direction) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(direction);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmSecrowLtSeatTiltReq, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmSecrowLtSeatTiltReq(control, direction);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmSecrowLtSeatUnfoldReq(int cmd) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(cmd);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmSecrowLtSeatUnfoldReq, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmSecrowLtSeatUnfoldReq(cmd);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmSecrowLtSeatSTopMoveReq(int cmd) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(cmd);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmSecrowLtSeatSTopMoveReq, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmSecrowLtSeatSTopMoveReq(cmd);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmSecrowRtSeatTiltReq(int control, int direction) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(direction);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmSecrowRtSeatTiltReq, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmSecrowRtSeatTiltReq(control, direction);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmSecrowRtSeatSTopMoveReq(int cmd) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(cmd);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmSecrowRtSeatSTopMoveReq, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmSecrowRtSeatSTopMoveReq(cmd);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmSecrowRTSeatUnfoldReq(int cmd) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(cmd);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmSecrowRTSeatUnfoldReq, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmSecrowRTSeatUnfoldReq(cmd);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLluPowerRequestSwitchStatus(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLluPowerRequestSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLluPowerRequestSwitchStatus(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getTpmsAllSensorStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTpmsAllSensorStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTpmsAllSensorStatus();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacDisinfSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacDisinfSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacDisinfSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacFrogingRiskStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacFrogingRiskStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacFrogingRiskStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVcuSpecialCarbinModeSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVcuSpecialCarbinModeSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVcuSpecialCarbinModeSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVcuSecondaryPowerOffRequest(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVcuSecondaryPowerOffRequest, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVcuSecondaryPowerOffRequest(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuSecondaryPowerOffResponce() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuSecondaryPowerOffResponce, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuSecondaryPowerOffResponce();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVcuCdcuChargeGunCommand(int command) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(command);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVcuCdcuChargeGunCommand, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVcuCdcuChargeGunCommand(command);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuCdcuChargeGunStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuCdcuChargeGunStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuCdcuChargeGunStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVcuDcPreWarmSwitchStatus(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVcuDcPreWarmSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVcuDcPreWarmSwitchStatus(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuDcPreWarmSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuDcPreWarmSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuDcPreWarmSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVcuDcPreWarmRequestStatus(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVcuDcPreWarmRequestStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVcuDcPreWarmRequestStatus(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuDcPreWarmRequestStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuDcPreWarmRequestStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuDcPreWarmRequestStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuDcPreWarmInStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuDcPreWarmInStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuDcPreWarmInStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmTemporaryStopLockActivateStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmTemporaryStopLockActivateStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmTemporaryStopLockActivateStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMcuLluPowerRequestSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuLluPowerRequestSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuLluPowerRequestSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getVcuDischargeQuantityFloat() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuDischargeQuantityFloat, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuDischargeQuantityFloat();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getVcuChargeSocQuantityFloat() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuChargeSocQuantityFloat, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuChargeSocQuantityFloat();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmFootKickSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmFootKickSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmFootKickSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmFrontMirrorHeatSwitchStatus(int onOff) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(onOff);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmFrontMirrorHeatSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmFrontMirrorHeatSwitchStatus(onOff);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmFrontMirrorHeatSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmFrontMirrorHeatSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmFrontMirrorHeatSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmRearWiperServiceSwitchStatus(int onOff) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(onOff);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmRearWiperServiceSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmRearWiperServiceSwitchStatus(onOff);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmRearWiperServiceSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmRearWiperServiceSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmRearWiperServiceSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmSteeringWheelHeatingStatus(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmSteeringWheelHeatingStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmSteeringWheelHeatingStatus(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmSteeringWheelHeatingStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmSteeringWheelHeatingStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmSteeringWheelHeatingStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmLeftChildLockSwitchStatus(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmLeftChildLockSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmLeftChildLockSwitchStatus(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmLeftChildLockSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmLeftChildLockSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmLeftChildLockSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmRightChildLockSwitchStatus(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmRightChildLockSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmRightChildLockSwitchStatus(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmRightChildLockSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmRightChildLockSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmRightChildLockSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAmpPowerRequestSwitchStatus(int onOff) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(onOff);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAmpPowerRequestSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAmpPowerRequestSwitchStatus(onOff);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAmpPowerRequestSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAmpPowerRequestSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAmpPowerRequestSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAtlPowerRequestSwitchStatus(int onOff) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(onOff);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAtlPowerRequestSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAtlPowerRequestSwitchStatus(onOff);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getAtlLrPowerRequestSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAtlLrPowerRequestSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAtlLrPowerRequestSwitchStatus();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmLockHazardLightSwitchStatus(int onOff) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(onOff);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmLockHazardLightSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmLockHazardLightSwitchStatus(onOff);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmLockHazardLightSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmLockHazardLightSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmLockHazardLightSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmLockHornSwitchStatus(int onOff) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(onOff);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmLockHornSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmLockHornSwitchStatus(onOff);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmLockHornSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmLockHornSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmLockHornSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmLockAvasSwitchStatus(int onOff) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(onOff);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmLockAvasSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmLockAvasSwitchStatus(onOff);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmLockAvasSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmLockAvasSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmLockAvasSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmDomeLightModeStatus(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmDomeLightModeStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmDomeLightModeStatus(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmDomeLightModeStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmDomeLightModeStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmDomeLightModeStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmDomeLightBrightLevel(int level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(level);
                    boolean _status = this.mRemote.transact(1500, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmDomeLightBrightLevel(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmDomeLightBrightLevel() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmDomeLightBrightLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmDomeLightBrightLevel();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmFrontLeftDomeLightSwitchStatus(int onOff) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(onOff);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmFrontLeftDomeLightSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmFrontLeftDomeLightSwitchStatus(onOff);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmFrontLeftDomeLightSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmFrontLeftDomeLightSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmFrontLeftDomeLightSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmFrontRightDomeLightSwitchStatus(int onOff) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(onOff);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmFrontRightDomeLightSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmFrontRightDomeLightSwitchStatus(onOff);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmFrontRightDomeLightSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmFrontRightDomeLightSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmFrontRightDomeLightSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmRearLeftDomeLightSwitchStatus(int onOff) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(onOff);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmRearLeftDomeLightSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmRearLeftDomeLightSwitchStatus(onOff);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmRearLeftDomeLightSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmRearLeftDomeLightSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmRearLeftDomeLightSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmRearRightDomeLightSwitchStatus(int onOff) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(onOff);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmRearRightDomeLightSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmRearRightDomeLightSwitchStatus(onOff);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmRearRightDomeLightSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmRearRightDomeLightSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmRearRightDomeLightSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmFootKickSwitchStatus(int onOff) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(onOff);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmFootKickSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmFootKickSwitchStatus(onOff);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmPassengerSeatTitlLevelOff(int cmd) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(cmd);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmPassengerSeatTitlLevelOff, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmPassengerSeatTitlLevelOff(cmd);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmWashCarModeSwitchStatus(int onOff) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(onOff);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmWashCarModeSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmWashCarModeSwitchStatus(onOff);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmHeadLampLevelingReqValue(int level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(level);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmHeadLampLevelingReqValue, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmHeadLampLevelingReqValue(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmHeadLampLevelingCtrlMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmHeadLampLevelingCtrlMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmHeadLampLevelingCtrlMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmHeadLampCtrlLevel() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmHeadLampCtrlLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmHeadLampCtrlLevel();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmTrunkOpenRequestPosition(int position) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(position);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmTrunkOpenRequestPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmTrunkOpenRequestPosition(position);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmTrunkSetPositionRequest(int position) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(position);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmTrunkSetPositionRequest, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmTrunkSetPositionRequest(position);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAtlSwitchStatus(int onOff) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(onOff);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAtlSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAtlSwitchStatus(onOff);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAtlSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAtlSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAtlSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAtlLin2Data(byte[] data) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeByteArray(data);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAtlLin2Data, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAtlLin2Data(data);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAtlLin3Data(byte[] data) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeByteArray(data);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAtlLin3Data, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAtlLin3Data(data);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMsmSecrowLtSeatTiltPosition() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmSecrowLtSeatTiltPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmSecrowLtSeatTiltPosition();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMsmSecrowRtSeatTiltPosition() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmSecrowRtSeatTiltPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmSecrowRtSeatTiltPosition();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMsmPassengerSeatCushExtPosition() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmPassengerSeatCushExtPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmPassengerSeatCushExtPosition();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMsmDriverSeatCushTiltPosition() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmDriverSeatCushTiltPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmDriverSeatCushTiltPosition();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmTrailerHitchSwitchStatus(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmTrailerHitchSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmTrailerHitchSwitchStatus(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmTrailerHitchSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmTrailerHitchSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmTrailerHitchSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getBcmLeftRightRearMirrorFoldOutputStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmLeftRightRearMirrorFoldOutputStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmLeftRightRearMirrorFoldOutputStatus();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmPassengerSeatBlowLevel(int level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(level);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmPassengerSeatBlowLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmPassengerSeatBlowLevel(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmPassengerSeatBlowLevel() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmPassengerSeatBlowLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmPassengerSeatBlowLevel();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacSfsTypeMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacSfsTypeMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacSfsTypeMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacSfsChannelResetRequest(int channel, int request) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(channel);
                    _data.writeInt(request);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacSfsChannelResetRequest, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacSfsChannelResetRequest(channel, request);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmEngineeringModeStatus(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(1536, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmEngineeringModeStatus(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmEngineeringModeStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(1537, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmEngineeringModeStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmTransportModeSwitchStatus(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(1538, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmTransportModeSwitchStatus(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmAsTrailerModeSwitchStatus(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(1539, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmAsTrailerModeSwitchStatus(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmDriverSeatCushTiltPosition(int pos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(pos);
                    boolean _status = this.mRemote.transact(1540, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmDriverSeatCushTiltPosition(pos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmPassengerSeatCushExtPosition(int pos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(pos);
                    boolean _status = this.mRemote.transact(1541, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmPassengerSeatCushExtPosition(pos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setEspTsmSwitchStatus(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(1542, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setEspTsmSwitchStatus(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setXpuScpSwitchStatus(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(1543, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setXpuScpSwitchStatus(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuScpSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuScpSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuScpSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setXpuRaebSwitchStatus(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setXpuRaebSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setXpuRaebSwitchStatus(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuRaebSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuRaebSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuRaebSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmHeadLampLevelingReqValue() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmHeadLampLevelingReqValue, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmHeadLampLevelingReqValue();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmColumnVerticalMove(int control, int direction) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(direction);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmColumnVerticalMove, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmColumnVerticalMove(control, direction);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmColumnHorizonalMove(int control, int direction) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(direction);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmColumnHorizonalMove, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmColumnHorizonalMove(control, direction);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmTrunkSetPositionResponcePosition() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmTrunkSetPositionResponcePosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmTrunkSetPositionResponcePosition();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmColumnVerticalPosition() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmColumnVerticalPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmColumnVerticalPosition();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmColumnHorizonalPosition() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmColumnHorizonalPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmColumnHorizonalPosition();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVcuNaviDestInfo(String info) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(info);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVcuNaviDestInfo, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVcuNaviDestInfo(info);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVcuNaviDestType(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVcuNaviDestType, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVcuNaviDestType(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVcuNaviRemainDistance(int distance) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(distance);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVcuNaviRemainDistance, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVcuNaviRemainDistance(distance);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVcuNaviPathId(int id) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(id);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVcuNaviPathId, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVcuNaviPathId(id);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVcuNaviType(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVcuNaviType, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVcuNaviType(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVcuNaviKValue(float k) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeFloat(k);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVcuNaviKValue, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVcuNaviKValue(k);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAvasLockUnlockSoundSwitchStatus(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAvasLockUnlockSoundSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAvasLockUnlockSoundSwitchStatus(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAvasLockUnlockSoundSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAvasLockUnlockSoundSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAvasLockUnlockSoundSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAvasChargeSoundSwitchStatus(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAvasChargeSoundSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAvasChargeSoundSwitchStatus(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAvasChargeSoundSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAvasChargeSoundSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAvasChargeSoundSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAvasSocSoundSwitchStatus(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAvasSocSoundSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAvasSocSoundSwitchStatus(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAvasSocSoundSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAvasSocSoundSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAvasSocSoundSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAvasUnlockSoundEffect(int sound) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sound);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAvasUnlockSoundEffect, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAvasUnlockSoundEffect(sound);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAvasUnlockSoundEffect() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAvasUnlockSoundEffect, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAvasUnlockSoundEffect();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAvasLockSoundEffect(int sound) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sound);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAvasLockSoundEffect, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAvasLockSoundEffect(sound);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAvasLockSoundEffect() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAvasLockSoundEffect, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAvasLockSoundEffect();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAvasMcuAvasRunnningStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAvasMcuAvasRunnningStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAvasMcuAvasRunnningStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAvasUnlockSoundSpeedVolume() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAvasUnlockSoundSpeedVolume, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAvasUnlockSoundSpeedVolume();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAvasChargeSoundSpeedVolume() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAvasChargeSoundSpeedVolume, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAvasChargeSoundSpeedVolume();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAvasSocSoundSpeedVolume() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAvasSocSoundSpeedVolume, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAvasSocSoundSpeedVolume();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmColumnVerticalPosition(int pos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(pos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmColumnVerticalPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmColumnVerticalPosition(pos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmColumnHorizonalPosition(int pos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(pos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmColumnHorizonalPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmColumnHorizonalPosition(pos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getScuLeftRightBlindSpotDetectionSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuLeftRightBlindSpotDetectionSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuLeftRightBlindSpotDetectionSwitchStatus();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getScuLeftRightRearCollisionSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuLeftRightRearCollisionSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuLeftRightRearCollisionSwitchStatus();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVcuNaviRemainTime(int minutes) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(minutes);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVcuNaviRemainTime, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVcuNaviRemainTime(minutes);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getBcmWindowsInitSignalLostRequestStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmWindowsInitSignalLostRequestStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmWindowsInitSignalLostRequestStatus();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getScuLeftRightDoorOpenWarningSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuLeftRightDoorOpenWarningSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuLeftRightDoorOpenWarningSwitchStatus();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getScuLeftRightRearCrossTrafficAlertStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuLeftRightRearCrossTrafficAlertStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuLeftRightRearCrossTrafficAlertStatus();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuNaviRoadConnectAttrib(int attrib) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(attrib);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuNaviRoadConnectAttrib, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setScuNaviRoadConnectAttrib(attrib);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBmsChargeMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBmsChargeMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBmsChargeMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getDcdcInputVoltage() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getDcdcInputVoltage, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getDcdcInputVoltage();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getDcdcInputCurrent() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getDcdcInputCurrent, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getDcdcInputCurrent();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHavcCompressorConsumePower() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHavcCompressorConsumePower, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHavcCompressorConsumePower();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHavcHvhConsumePower() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHavcHvhConsumePower, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHavcHvhConsumePower();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmTrunkOpennerStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmTrunkOpennerStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmTrunkOpennerStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmBonnetStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmBonnetStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmBonnetStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuVirtualAccPedalStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuVirtualAccPedalStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuVirtualAccPedalStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMcuRvcEnable() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuRvcEnable, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuRvcEnable();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMcuRvcEnable(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMcuRvcEnable, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMcuRvcEnable(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMcuRvcVersion(int version) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(version);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMcuRvcVersion, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMcuRvcVersion(version);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAmpChannelSwitchControlStatus(byte[] sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeByteArray(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAmpChannelSwitchControlStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAmpChannelSwitchControlStatus(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAmpChannelVolumeControlValue(byte[] vol) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeByteArray(vol);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAmpChannelVolumeControlValue, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAmpChannelVolumeControlValue(vol);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAmpGroupSwitchControlStatus(byte[] sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeByteArray(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAmpGroupSwitchControlStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAmpGroupSwitchControlStatus(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAmpGroupVolumeControlValue(byte[] vol) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeByteArray(vol);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAmpGroupVolumeControlValue, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAmpGroupVolumeControlValue(vol);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBmsBatteryChargeStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBmsBatteryChargeStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBmsBatteryChargeStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBmsAcChargeStopReason() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBmsAcChargeStopReason, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBmsAcChargeStopReason();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuAsDriveModeStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuAsDriveModeStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuAsDriveModeStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getEspTsmSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getEspTsmSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getEspTsmSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmPassengerWelcomeSwitch(int onOff) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(onOff);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmPassengerWelcomeSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmPassengerWelcomeSwitch(onOff);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setXpuNaviTypeStatus(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setXpuNaviTypeStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setXpuNaviTypeStatus(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmColumnPositionMove(int vertpos, int horpos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(vertpos);
                    _data.writeInt(horpos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmColumnPositionMove, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmColumnPositionMove(vertpos, horpos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuRaebActiveStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuRaebActiveStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuRaebActiveStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendXpuTransferVpaCmd(String cmd) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(cmd);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendXpuTransferVpaCmd, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendXpuTransferVpaCmd(cmd);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendXpuTransferVpaAbInfo(String cmd) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(cmd);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendXpuTransferVpaAbInfo, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendXpuTransferVpaAbInfo(cmd);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getEspOffRoadSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getEspOffRoadSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getEspOffRoadSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmWindowLockState(int onOff) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(onOff);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmWindowLockState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmWindowLockState(onOff);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuDepolarizeStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuDepolarizeStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuDepolarizeStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setXpuNraSwitchStatus(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setXpuNraSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setXpuNraSwitchStatus(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuNraSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuNraSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuNraSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuNraControlStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuNraControlStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuNraControlStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmSecrowLtSeatTiltPosition(int pos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(pos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmSecrowLtSeatTiltPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmSecrowLtSeatTiltPosition(pos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmSecrowRtSeatTiltPosition(int pos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(pos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmSecrowRtSeatTiltPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmSecrowRtSeatTiltPosition(pos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmPassengerSeatLumbVerticalPos(int control, int direction) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(direction);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmPassengerSeatLumbVerticalPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmPassengerSeatLumbVerticalPos(control, direction);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmPassengerSeatLumbHorzPos(int control, int direction) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(direction);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmPassengerSeatLumbHorzPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmPassengerSeatLumbHorzPos(control, direction);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmSecRowLeftSeatCushExtReq(int control, int direction) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(direction);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmSecRowLeftSeatCushExtReq, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmSecRowLeftSeatCushExtReq(control, direction);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmSecRowRightSeatCushExtReq(int control, int direction) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(direction);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmSecRowRightSeatCushExtReq, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmSecRowRightSeatCushExtReq(control, direction);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmSecRowLeftSeatCushExtPosition(int legHorzPos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(legHorzPos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmSecRowLeftSeatCushExtPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmSecRowLeftSeatCushExtPosition(legHorzPos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMsmSecRowLeftSeatCushExtPosition() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmSecRowLeftSeatCushExtPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmSecRowLeftSeatCushExtPosition();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmSecRowRightSeatCushExtPosition(int legHorzPos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(legHorzPos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmSecRowRightSeatCushExtPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmSecRowRightSeatCushExtPosition(legHorzPos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMsmSecRowRightSeatCushExtPosition() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmSecRowRightSeatCushExtPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmSecRowRightSeatCushExtPosition();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmSecrowRightSeatUnlockReq(int cmd) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(cmd);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmSecrowRightSeatUnlockReq, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmSecrowRightSeatUnlockReq(cmd);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmSecrowLeftSeatUnlockReq(int cmd) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(cmd);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmSecrowLeftSeatUnlockReq, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmSecrowLeftSeatUnlockReq(cmd);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVcuBatBumpRecrdStatus(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVcuBatBumpRecrdStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVcuBatBumpRecrdStatus(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuBatBumpRecrdRequest() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuBatBumpRecrdRequest, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuBatBumpRecrdRequest();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuBrakeLightOnOffStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuBrakeLightOnOffStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuBrakeLightOnOffStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setXpuCityNgpSwitchStatus(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setXpuCityNgpSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setXpuCityNgpSwitchStatus(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuCityNgpSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuCityNgpSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuCityNgpSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmSwsControlSceneStatus(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmSwsControlSceneStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmSwsControlSceneStatus(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getVcuWltpAvailableDrivingDistanceFloat() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuWltpAvailableDrivingDistanceFloat, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuWltpAvailableDrivingDistanceFloat();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getVcuCltcAvailableDrivingDistanceFloat() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuCltcAvailableDrivingDistanceFloat, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuCltcAvailableDrivingDistanceFloat();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendXpuGeoFencingConfig(String config) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(config);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendXpuGeoFencingConfig, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendXpuGeoFencingConfig(config);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendXpuCountryCodeInfo(String info) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(info);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendXpuCountryCodeInfo, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendXpuCountryCodeInfo(info);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVcuSsaSwitchStatus(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVcuSsaSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVcuSsaSwitchStatus(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuSsaSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuSsaSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuSsaSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVcuPGearLimOffSwitchStatus(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVcuPGearLimOffSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVcuPGearLimOffSwitchStatus(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuSuperChargeFlag() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuSuperChargeFlag, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuSuperChargeFlag();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmRearWiperMotorStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmRearWiperMotorStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmRearWiperMotorStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmCustomerModeFlagSwitchStatus(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmCustomerModeFlagSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmCustomerModeFlagSwitchStatus(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmDriverSeatMassgProgMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmDriverSeatMassgProgMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmDriverSeatMassgProgMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMsmDriverSeatMassgProgMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmDriverSeatMassgProgMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmDriverSeatMassgProgMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmDriverSeatMassgIntensity(int level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(level);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmDriverSeatMassgIntensity, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmDriverSeatMassgIntensity(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMsmDriverSeatMassgIntensity() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmDriverSeatMassgIntensity, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmDriverSeatMassgIntensity();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmPassengerSeatMassgProgMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmPassengerSeatMassgProgMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmPassengerSeatMassgProgMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMsmPassengerSeatMassgProgMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmPassengerSeatMassgProgMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmPassengerSeatMassgProgMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmPassengerSeatMassgIntensity(int level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(level);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmPassengerSeatMassgIntensity, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmPassengerSeatMassgIntensity(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMsmPassengerSeatMassgIntensity() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmPassengerSeatMassgIntensity, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmPassengerSeatMassgIntensity();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmSecRowLeftSeatMassgProgMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmSecRowLeftSeatMassgProgMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmSecRowLeftSeatMassgProgMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMsmSecRowLeftSeatMassgProgMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmSecRowLeftSeatMassgProgMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmSecRowLeftSeatMassgProgMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmSecRowLeftSeatMassgIntensity(int level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(level);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmSecRowLeftSeatMassgIntensity, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmSecRowLeftSeatMassgIntensity(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMsmSecRowLeftSeatMassgIntensity() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmSecRowLeftSeatMassgIntensity, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmSecRowLeftSeatMassgIntensity();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmSecRowRightSeatMassgProgMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmSecRowRightSeatMassgProgMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmSecRowRightSeatMassgProgMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMsmSecRowRightSeatMassgProgMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmSecRowRightSeatMassgProgMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmSecRowRightSeatMassgProgMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmSecRowRightSeatMassgIntensity(int level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(level);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmSecRowRightSeatMassgIntensity, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmSecRowRightSeatMassgIntensity(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMsmSecRowRightSeatMassgIntensity() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmSecRowRightSeatMassgIntensity, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmSecRowRightSeatMassgIntensity();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAmpDolbyAtomsSwitchStatus(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAmpDolbyAtomsSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAmpDolbyAtomsSwitchStatus(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAmpEffectStatus(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAmpEffectStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAmpEffectStatus(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAmpEffectStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAmpEffectStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAmpEffectStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAmpDynSdvcLevel(int level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(level);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAmpDynSdvcLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAmpDynSdvcLevel(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAmpDynSdvcLevel() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAmpDynSdvcLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAmpDynSdvcLevel();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAmpDyn3DEffectLevel(int level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(level);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAmpDyn3DEffectLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAmpDyn3DEffectLevel(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAmpDyn3DEffectLevel() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAmpDyn3DEffectLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAmpDyn3DEffectLevel();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setXpuSlifSoundStatus(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setXpuSlifSoundStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setXpuSlifSoundStatus(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuSlifSoundStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuSlifSoundStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuSlifSoundStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setXpuSlwfVoiceStatus(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setXpuSlwfVoiceStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setXpuSlwfVoiceStatus(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuSlwfVoiceStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuSlwfVoiceStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuSlwfVoiceStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuNgpSwitchTransitionStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuNgpSwitchTransitionStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuNgpSwitchTransitionStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuNaviDangerAreaRDInfo(int dangerAreaLoc, int dangerLane, int dangerLaneNum, int dangerType, int dangerLevel, int dangerPro, int dangerAct) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                } catch (Throwable th) {
                    th = th;
                }
                try {
                    _data.writeInt(dangerAreaLoc);
                } catch (Throwable th2) {
                    th = th2;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
                try {
                    _data.writeInt(dangerLane);
                    try {
                        _data.writeInt(dangerLaneNum);
                    } catch (Throwable th3) {
                        th = th3;
                        _reply.recycle();
                        _data.recycle();
                        throw th;
                    }
                    try {
                        _data.writeInt(dangerType);
                    } catch (Throwable th4) {
                        th = th4;
                        _reply.recycle();
                        _data.recycle();
                        throw th;
                    }
                    try {
                        _data.writeInt(dangerLevel);
                        _data.writeInt(dangerPro);
                        _data.writeInt(dangerAct);
                        boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuNaviDangerAreaRDInfo, _data, _reply, 0);
                        if (!_status && Stub.getDefaultImpl() != null) {
                            Stub.getDefaultImpl().setScuNaviDangerAreaRDInfo(dangerAreaLoc, dangerLane, dangerLaneNum, dangerType, dangerLevel, dangerPro, dangerAct);
                            _reply.recycle();
                            _data.recycle();
                            return;
                        }
                        _reply.readException();
                        _reply.recycle();
                        _data.recycle();
                    } catch (Throwable th5) {
                        th = th5;
                        _reply.recycle();
                        _data.recycle();
                        throw th;
                    }
                } catch (Throwable th6) {
                    th = th6;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void saveMsmPassengerAllPositionsToMcu(int seatHorizonPos, int seatVerticalPos, int seatTiltingPos, int legHeightPos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(seatHorizonPos);
                    _data.writeInt(seatVerticalPos);
                    _data.writeInt(seatTiltingPos);
                    _data.writeInt(legHeightPos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_saveMsmPassengerAllPositionsToMcu, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().saveMsmPassengerAllPositionsToMcu(seatHorizonPos, seatVerticalPos, seatTiltingPos, legHeightPos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getXpuHeadPoseData() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuHeadPoseData, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuHeadPoseData();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuHmiDopRemind() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuHmiDopRemind, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuHmiDopRemind();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmDriverSeatMassgElem(int[] cmd) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeIntArray(cmd);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmDriverSeatMassgElem, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmDriverSeatMassgElem(cmd);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmPassengerSeatMassgElem(int[] cmd) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeIntArray(cmd);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmPassengerSeatMassgElem, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmPassengerSeatMassgElem(cmd);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmSecRowLeftSeatMassgElem(int[] cmd) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeIntArray(cmd);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmSecRowLeftSeatMassgElem, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmSecRowLeftSeatMassgElem(cmd);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmSecRowRightSeatMassgElem(int[] cmd) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeIntArray(cmd);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmSecRowRightSeatMassgElem, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmSecRowRightSeatMassgElem(cmd);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuDoorsLRadarDisplayLevel() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuDoorsLRadarDisplayLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuDoorsLRadarDisplayLevel();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuDoorsRRadarDisplayLevel() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuDoorsRRadarDisplayLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuDoorsRRadarDisplayLevel();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setXpuNgpULCSwMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setXpuNgpULCSwMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setXpuNgpULCSwMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuNgpULCSwMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuNgpULCSwMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuNgpULCSwMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setXpuNgpOptimalLaneSw(int lane) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(lane);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setXpuNgpOptimalLaneSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setXpuNgpOptimalLaneSw(lane);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuNgpOptimalLaneSw() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuNgpOptimalLaneSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuNgpOptimalLaneSw();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setXpuISLCDriverSet(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setXpuISLCDriverSet, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setXpuISLCDriverSet(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuISLCDriverSet() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuISLCDriverSet, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuISLCDriverSet();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmSecRowLeftSeatAllPos(int seatTiltingPos, int legHorzPos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(seatTiltingPos);
                    _data.writeInt(legHorzPos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmSecRowLeftSeatAllPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmSecRowLeftSeatAllPos(seatTiltingPos, legHorzPos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmSecRowRightSeatAllPos(int seatTiltingPos, int legHorzPos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(seatTiltingPos);
                    _data.writeInt(legHorzPos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmSecRowRightSeatAllPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmSecRowRightSeatAllPos(seatTiltingPos, legHorzPos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmWiperRainDetectSensitivity(int level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(level);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmWiperRainDetectSensitivity, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmWiperRainDetectSensitivity(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getMsmDriverSeatMassgElem() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmDriverSeatMassgElem, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmDriverSeatMassgElem();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getMsmPassengerSeatMassgElem() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmPassengerSeatMassgElem, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmPassengerSeatMassgElem();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getMsmSecRowLeftSeatMassgElem() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmSecRowLeftSeatMassgElem, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmSecRowLeftSeatMassgElem();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getMsmSecRowRightSeatMassgElem() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmSecRowRightSeatMassgElem, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmSecRowRightSeatMassgElem();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmAsAutoLevelingResult() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmAsAutoLevelingResult, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmAsAutoLevelingResult();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmTtmDenormalizeStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmTtmDenormalizeStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmTtmDenormalizeStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmTtmSystemErrorStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmTtmSystemErrorStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmTtmSystemErrorStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmAsCampingModeSwitchStatus(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmAsCampingModeSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmAsCampingModeSwitchStatus(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmAsCampingModeSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmAsCampingModeSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmAsCampingModeSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmHoistModeSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmHoistModeSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmHoistModeSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmAsYellowLampRequest() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmAsYellowLampRequest, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmAsYellowLampRequest();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmAsRedLampRequest() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmAsRedLampRequest, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmAsRedLampRequest();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getEspTsmFaultStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getEspTsmFaultStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getEspTsmFaultStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getEspDtcFaultStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getEspDtcFaultStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getEspDtcFaultStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getEspIbtFailureLampRequest() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getEspIbtFailureLampRequest, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getEspIbtFailureLampRequest();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuNgpModeIndexMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuNgpModeIndexMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuNgpModeIndexMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuModeIndexDefine() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuModeIndexDefine, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuModeIndexDefine();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmColumnPositionSaveToMcu(int vertpos, int horpos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(vertpos);
                    _data.writeInt(horpos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmColumnPositionSaveToMcu, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmColumnPositionSaveToMcu(vertpos, horpos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmTrailerModeSwitchStatus(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmTrailerModeSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmTrailerModeSwitchStatus(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVcuXpedalCtrlMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVcuXpedalCtrlMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVcuXpedalCtrlMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuXpedalCtrlMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuXpedalCtrlMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuXpedalCtrlMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVcuXPortIntellCalcCfg(float[] cfg) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeFloatArray(cfg);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVcuXPortIntellCalcCfg, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVcuXPortIntellCalcCfg(cfg);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float[] getVcuXPortIntellCalcCfg() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuXPortIntellCalcCfg, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuXPortIntellCalcCfg();
                    }
                    _reply.readException();
                    float[] _result = _reply.createFloatArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float[] getVcuXPortIntellCalcCfg20Hz() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuXPortIntellCalcCfg20Hz, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuXPortIntellCalcCfg20Hz();
                    }
                    _reply.readException();
                    float[] _result = _reply.createFloatArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float[] getVcuXPortIntellCalcCfg50Hz() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuXPortIntellCalcCfg50Hz, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuXPortIntellCalcCfg50Hz();
                    }
                    _reply.readException();
                    float[] _result = _reply.createFloatArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuDoorsLRadarDistance() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuDoorsLRadarDistance, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuDoorsLRadarDistance();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuDoorsRRadarDistance() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuDoorsRRadarDistance, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuDoorsRRadarDistance();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmAsLockModeStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmAsLockModeStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmAsLockModeStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuKeyBatteryStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuKeyBatteryStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuKeyBatteryStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuIntelligentChargePortTipsType() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuIntelligentChargePortTipsType, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuIntelligentChargePortTipsType();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuIntelligentChargePortTtsBroadcastType() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuIntelligentChargePortTtsBroadcastType, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuIntelligentChargePortTtsBroadcastType();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuIntelligentChargePortSystemToneType() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuIntelligentChargePortSystemToneType, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuIntelligentChargePortSystemToneType();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuAutoParkingTipsType() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuAutoParkingTipsType, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuAutoParkingTipsType();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuAsLockScenario() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuAsLockScenario, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuAsLockScenario();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuIntelligentChargePortSystemStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuIntelligentChargePortSystemStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuIntelligentChargePortSystemStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuSlaSpeedWarningStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuSlaSpeedWarningStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuSlaSpeedWarningStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuScpChargePortCommandStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuScpChargePortCommandStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuScpChargePortCommandStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setScuEventInfoRD(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setScuEventInfoRD, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setScuEventInfoRD(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getVcuNedcAvalibleDrivingDistanceFloat() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuNedcAvalibleDrivingDistanceFloat, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuNedcAvalibleDrivingDistanceFloat();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public String getTboxPigeonNotification() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTboxPigeonNotification, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTboxPigeonNotification();
                    }
                    _reply.readException();
                    String _result = _reply.readString();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuXmartPigeonMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuXmartPigeonMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuXmartPigeonMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmAsDrivingMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmAsDrivingMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmAsDrivingMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmAsSpecialDrivingMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmAsSpecialDrivingMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmAsSpecialDrivingMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmAsWelcomeModeStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmAsWelcomeModeStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmAsWelcomeModeStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmAsEspPataRequestStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmAsEspPataRequestStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmAsEspPataRequestStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmAsTargetHeight() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmAsTargetHeight, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmAsTargetHeight();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTboxEcallMuteRequest() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTboxEcallMuteRequest, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTboxEcallMuteRequest();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTboxEcallState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTboxEcallState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTboxEcallState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setXpuElectricEyeSpeedLimit(int speedlimit) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(speedlimit);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setXpuElectricEyeSpeedLimit, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setXpuElectricEyeSpeedLimit(speedlimit);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setXpuElectricEyeSpeedDistance(int distance) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(distance);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setXpuElectricEyeSpeedDistance, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setXpuElectricEyeSpeedDistance(distance);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setXpuMetaCountryCode(int code) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(code);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setXpuMetaCountryCode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setXpuMetaCountryCode(code);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuAsTargetMinimumHeightRequest() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuAsTargetMinimumHeightRequest, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuAsTargetMinimumHeightRequest();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuAsTargetMaximumHeightRequest() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuAsTargetMaximumHeightRequest, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuAsTargetMaximumHeightRequest();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendPigeonAndXPURemoteAPHeartBeat(String beat) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(beat);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendPigeonAndXPURemoteAPHeartBeat, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendPigeonAndXPURemoteAPHeartBeat(beat);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendPhoneRemoteAPEvent(String event) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(event);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendPhoneRemoteAPEvent, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendPhoneRemoteAPEvent(event);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public byte[] getPhoneRemoteAPInformation() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getPhoneRemoteAPInformation, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getPhoneRemoteAPInformation();
                    }
                    _reply.readException();
                    byte[] _result = _reply.createByteArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmTrailerModeStatus(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmTrailerModeStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmTrailerModeStatus(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setXpuMetaSpeedUnits(int unit) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(unit);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setXpuMetaSpeedUnits, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setXpuMetaSpeedUnits(unit);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setXpuEffectiveSpeedLimitType(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setXpuEffectiveSpeedLimitType, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setXpuEffectiveSpeedLimitType(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getEpsTorqControlStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getEpsTorqControlStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getEpsTorqControlStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmAsHeightChangingStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmAsHeightChangingStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmAsHeightChangingStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMcuRemindWarningStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMcuRemindWarningStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMcuRemindWarningStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendIcmLogCompressRequest(String req) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(req);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendIcmLogCompressRequest, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendIcmLogCompressRequest(req);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public String getIcmLogCompressInformation() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getIcmLogCompressInformation, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getIcmLogCompressInformation();
                    }
                    _reply.readException();
                    String _result = _reply.readString();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmAsModeAllowedCampingStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmAsModeAllowedCampingStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmAsModeAllowedCampingStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmModeInfoArray(int name, int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(name);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmModeInfoArray, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmModeInfoArray(name, status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMsmDriverSeatLumberSwitchMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmDriverSeatLumberSwitchMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmDriverSeatLumberSwitchMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMsmDriverSeatLumberSwitchCenterPressStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmDriverSeatLumberSwitchCenterPressStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmDriverSeatLumberSwitchCenterPressStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMsmPassengerSeatLumberSwitchMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmPassengerSeatLumberSwitchMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmPassengerSeatLumberSwitchMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMsmPassengerSeatLumberSwitchCenterPressStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmPassengerSeatLumberSwitchCenterPressStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmPassengerSeatLumberSwitchCenterPressStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendRoutingForTboxRequest(int cmd) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(cmd);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendRoutingForTboxRequest, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendRoutingForTboxRequest(cmd);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getRoutingForTboxResponse() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getRoutingForTboxResponse, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getRoutingForTboxResponse();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendTboxModemCaptureRequest(int cmd) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(cmd);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendTboxModemCaptureRequest, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendTboxModemCaptureRequest(cmd);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTboxModemCaptureResponse() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTboxModemCaptureResponse, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTboxModemCaptureResponse();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendStartCopyTboxLogRequest(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendStartCopyTboxLogRequest, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendStartCopyTboxLogRequest(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getStartCopyTboxLogResponse() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getStartCopyTboxLogResponse, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getStartCopyTboxLogResponse();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendFinishCopyTboxLogRequest() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendFinishCopyTboxLogRequest, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendFinishCopyTboxLogRequest();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getFinishCopyTboxLogResponse() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getFinishCopyTboxLogResponse, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getFinishCopyTboxLogResponse();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMsmPassengerWelcomeSwitch() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmPassengerWelcomeSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmPassengerWelcomeSwitch();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmFWiperMotorErr() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmFWiperMotorErr, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmFWiperMotorErr();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuHmiDopRemind() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuHmiDopRemind, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuHmiDopRemind();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmSdcBrakeCloseDoorCfg(int cfg) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(cfg);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmSdcBrakeCloseDoorCfg, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmSdcBrakeCloseDoorCfg(cfg);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmSdcBrakeCloseDoorCfg() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmSdcBrakeCloseDoorCfg, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmSdcBrakeCloseDoorCfg();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public byte[] getXpuLongLatPeriodData() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuLongLatPeriodData, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuLongLatPeriodData();
                    }
                    _reply.readException();
                    byte[] _result = _reply.createByteArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmCoverPlateStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmCoverPlateStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmCoverPlateStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmGroupLedControlStatus(int upStatus, int downStatus, int leftStatus, int rightStatus) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(upStatus);
                    _data.writeInt(downStatus);
                    _data.writeInt(leftStatus);
                    _data.writeInt(rightStatus);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmGroupLedControlStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmGroupLedControlStatus(upStatus, downStatus, leftStatus, rightStatus);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getBcmGroupLedControlStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmGroupLedControlStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmGroupLedControlStatus();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmGroupLedColor(int upColor, int downColor, int leftColor, int rightColor) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(upColor);
                    _data.writeInt(downColor);
                    _data.writeInt(leftColor);
                    _data.writeInt(rightColor);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmGroupLedColor, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmGroupLedColor(upColor, downColor, leftColor, rightColor);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getBcmGroupLedColor() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmGroupLedColor, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmGroupLedColor();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmGroupLedFadeTime(int upTime, int downTime, int leftTime, int rightTime) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(upTime);
                    _data.writeInt(downTime);
                    _data.writeInt(leftTime);
                    _data.writeInt(rightTime);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmGroupLedFadeTime, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmGroupLedFadeTime(upTime, downTime, leftTime, rightTime);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmGroupLedTemperature(int upTemp, int downTemp, int leftTemp, int rightTemp) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(upTemp);
                    _data.writeInt(downTemp);
                    _data.writeInt(leftTemp);
                    _data.writeInt(rightTemp);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmGroupLedTemperature, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmGroupLedTemperature(upTemp, downTemp, leftTemp, rightTemp);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getBcmGroupLedTemperature() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmGroupLedTemperature, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmGroupLedTemperature();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmGroupLedBrigntness(int upLux, int downLux, int leftLux, int rightLux) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(upLux);
                    _data.writeInt(downLux);
                    _data.writeInt(leftLux);
                    _data.writeInt(rightLux);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmGroupLedBrigntness, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmGroupLedBrigntness(upLux, downLux, leftLux, rightLux);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getBcmGroupLedBrigntness() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmGroupLedBrigntness, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmGroupLedBrigntness();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setXpuAdasTopSpeedLimitedValue(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(1792, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setXpuAdasTopSpeedLimitedValue(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAmpSdsscLevel(int level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(level);
                    boolean _status = this.mRemote.transact(1793, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAmpSdsscLevel(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAmpSdsscLevel() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(1794, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAmpSdsscLevel();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAmpSoundSourceDolbyFormat(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(1795, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAmpSoundSourceDolbyFormat(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAmpSoundStyle(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(1796, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAmpSoundStyle(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAmpSoundStyle() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(1797, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAmpSoundStyle();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAmpFreqGainGroupControlValue(int[] eqValue) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeIntArray(eqValue);
                    boolean _status = this.mRemote.transact(1798, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAmpFreqGainGroupControlValue(eqValue);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getAmpFreqGainGroupControlValue() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(1799, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAmpFreqGainGroupControlValue();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setXpuLssSensitivitySwitchStatus(int level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(level);
                    boolean _status = this.mRemote.transact(1800, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setXpuLssSensitivitySwitchStatus(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuLssSensitivitySwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(1801, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuLssSensitivitySwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getVcuBmsBatteryCurrent() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(1802, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuBmsBatteryCurrent();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuBmsBatteryVoltage() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(1803, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuBmsBatteryVoltage();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuBmsBatteryAverageTemperature() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(1804, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuBmsBatteryAverageTemperature();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuBmsChargeStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(1805, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuBmsChargeStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVcuXsportMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(1806, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVcuXsportMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuXsportMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(1807, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuXsportMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float[] getEspAllWheelSpeed() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(1808, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getEspAllWheelSpeed();
                    }
                    _reply.readException();
                    float[] _result = _reply.createFloatArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getEspAbsWorkStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(1809, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getEspAbsWorkStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getEspTcsWorkStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(1810, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getEspTcsWorkStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getEspVdcWorkStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(1811, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getEspVdcWorkStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getEspIpuFrontActualRotateSpeed() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getEspIpuFrontActualRotateSpeed, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getEspIpuFrontActualRotateSpeed();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getEspIpuRearActualRotateSpeed() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getEspIpuRearActualRotateSpeed, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getEspIpuRearActualRotateSpeed();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getBcmXPortAsSystemAllStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmXPortAsSystemAllStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmXPortAsSystemAllStatus();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getBcmAsWheelPositionHeightAll() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmAsWheelPositionHeightAll, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmAsWheelPositionHeightAll();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float[] getBcmAsAcceleratedSpeed() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmAsAcceleratedSpeed, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmAsAcceleratedSpeed();
                    }
                    _reply.readException();
                    float[] _result = _reply.createFloatArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmAsLeopardModeSwitchStatus(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmAsLeopardModeSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmAsLeopardModeSwitchStatus(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmAsLeopardModeSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmAsLeopardModeSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmAsLeopardModeSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmAsVehicleMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmAsVehicleMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmAsVehicleMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendXpuZgEventMessage(byte[] message) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeByteArray(message);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendXpuZgEventMessage, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendXpuZgEventMessage(message);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendXpuZgPeriodMessage(byte[] message) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeByteArray(message);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendXpuZgPeriodMessage, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendXpuZgPeriodMessage(message);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmTrunkActualPosition() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmTrunkActualPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmTrunkActualPosition();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmSecRowSeatEasyEntrySwitchStatus(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmSecRowSeatEasyEntrySwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmSecRowSeatEasyEntrySwitchStatus(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmMirrorAutoFoldSwitchStatus(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmMirrorAutoFoldSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmMirrorAutoFoldSwitchStatus(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmMirrorAutoFoldSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmMirrorAutoFoldSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmMirrorAutoFoldSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmAsAutoLevelingResultValue() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmAsAutoLevelingResultValue, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmAsAutoLevelingResultValue();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getAllSrsCrashOutputStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAllSrsCrashOutputStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAllSrsCrashOutputStatus();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmDriverSeatPositionMemoryRequest(int cmd) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(cmd);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmDriverSeatPositionMemoryRequest, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmDriverSeatPositionMemoryRequest(cmd);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMsmDriverSeatMassgErrorStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmDriverSeatMassgErrorStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmDriverSeatMassgErrorStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMsmPassengerSeatMassgErrorStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmPassengerSeatMassgErrorStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmPassengerSeatMassgErrorStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMsmSecRowLeftSeatMassgErrorStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmSecRowLeftSeatMassgErrorStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmSecRowLeftSeatMassgErrorStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMsmSecRowRightSeatMassgErrorStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmSecRowRightSeatMassgErrorStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmSecRowRightSeatMassgErrorStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getVcuBmsActualSocValue() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuBmsActualSocValue, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuBmsActualSocValue();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getVcuBmsMaximumAvailChargePower() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuBmsMaximumAvailChargePower, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuBmsMaximumAvailChargePower();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getVcuBmsMaximumAvailDischargePower() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuBmsMaximumAvailDischargePower, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuBmsMaximumAvailDischargePower();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getEspIpuFrontActualTorque() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getEspIpuFrontActualTorque, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getEspIpuFrontActualTorque();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getEspIpuFrontMotorActualTemperature() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getEspIpuFrontMotorActualTemperature, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getEspIpuFrontMotorActualTemperature();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getEspIpuRearActualTorque() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getEspIpuRearActualTorque, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getEspIpuRearActualTorque();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getEspIpuRearMotorActualTemperature() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getEspIpuRearMotorActualTemperature, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getEspIpuRearMotorActualTemperature();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getEspIbtBrakeTravelDistance() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getEspIbtBrakeTravelDistance, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getEspIbtBrakeTravelDistance();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getEspMasterCylinderPressure() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getEspMasterCylinderPressure, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getEspMasterCylinderPressure();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getVcuDynamicAvailableDrivingDistance() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuDynamicAvailableDrivingDistance, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuDynamicAvailableDrivingDistance();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTboxIOTBusinessType() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTboxIOTBusinessType, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTboxIOTBusinessType();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTboxACChargeUnlockST() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTboxACChargeUnlockST, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTboxACChargeUnlockST();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setEspCstStatus(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setEspCstStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setEspCstStatus(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setEspBpfStatus(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setEspBpfStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setEspBpfStatus(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAmpA2BLinkStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAmpA2BLinkStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAmpA2BLinkStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMcuSocRespDTCInfo(int module, int errCode, int errCodeSt) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(module);
                    _data.writeInt(errCode);
                    _data.writeInt(errCodeSt);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMcuSocRespDTCInfo, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMcuSocRespDTCInfo(module, errCode, errCodeSt);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmDriverAllPositionsToLDCU(int memoryReq, int seatHorizonPos, int seatVerticalPos, int seatTiltingPos, int legHeightPos, int legHorzPos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                } catch (Throwable th) {
                    th = th;
                }
                try {
                    _data.writeInt(memoryReq);
                } catch (Throwable th2) {
                    th = th2;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
                try {
                    _data.writeInt(seatHorizonPos);
                } catch (Throwable th3) {
                    th = th3;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
                try {
                    _data.writeInt(seatVerticalPos);
                } catch (Throwable th4) {
                    th = th4;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
                try {
                    _data.writeInt(seatTiltingPos);
                } catch (Throwable th5) {
                    th = th5;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
                try {
                    _data.writeInt(legHeightPos);
                } catch (Throwable th6) {
                    th = th6;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
                try {
                    _data.writeInt(legHorzPos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmDriverAllPositionsToLDCU, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmDriverAllPositionsToLDCU(memoryReq, seatHorizonPos, seatVerticalPos, seatTiltingPos, legHeightPos, legHorzPos);
                        _reply.recycle();
                        _data.recycle();
                        return;
                    }
                    _reply.readException();
                    _reply.recycle();
                    _data.recycle();
                } catch (Throwable th7) {
                    th = th7;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getScuMrrRadarEmissStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuMrrRadarEmissStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuMrrRadarEmissStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getScuAllSrrRadarEmissStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getScuAllSrrRadarEmissStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getScuAllSrrRadarEmissStatus();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getVcuBmsCurrentBatterySocDisp() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuBmsCurrentBatterySocDisp, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuBmsCurrentBatterySocDisp();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getVcuChargeDischargePower() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuChargeDischargePower, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuChargeDischargePower();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendMcuGeofenceStatus(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendMcuGeofenceStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendMcuGeofenceStatus(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmSoundThemeType(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmSoundThemeType, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmSoundThemeType(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getVcuChargeHighVoltageLoadPower() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuChargeHighVoltageLoadPower, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuChargeHighVoltageLoadPower();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setRearHvacAirDistributionMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setRearHvacAirDistributionMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setRearHvacAirDistributionMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setRearHvacFanPosition(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setRearHvacFanPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setRearHvacFanPosition(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getRearHvacFanPosition() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getRearHvacFanPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getRearHvacFanPosition();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAmpSoundSourceDolbyFormat() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAmpSoundSourceDolbyFormat, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAmpSoundSourceDolbyFormat();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmXsleepModeStatus(int active) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(active);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmXsleepModeStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmXsleepModeStatus(active);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmXmovieModeStatus(int active) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(active);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmXmovieModeStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmXmovieModeStatus(active);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmX5dCinemaModeStatus(int active) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(active);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmX5dCinemaModeStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmX5dCinemaModeStatus(active);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmXmeditationModeStatus(int active) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(active);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmXmeditationModeStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmXmeditationModeStatus(active);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setXpuRadarEmissionSwitchStatus(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setXpuRadarEmissionSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setXpuRadarEmissionSwitchStatus(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendXpuScpGeoInfo(String info) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(info);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendXpuScpGeoInfo, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendXpuScpGeoInfo(info);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLCMSAutoBrightSw(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLCMSAutoBrightSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLCMSAutoBrightSw(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLCMSAutoBrightSwSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLCMSAutoBrightSwSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLCMSAutoBrightSwSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLCMSBright(int level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(level);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLCMSBright, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLCMSBright(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLCMSBright() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLCMSBright, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLCMSBright();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLCMSHighSpeedViewSw(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLCMSHighSpeedViewSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLCMSHighSpeedViewSw(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLCMSHighSpeedViewSwSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLCMSHighSpeedViewSwSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLCMSHighSpeedViewSwSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLCMSLowSpeedViewSw(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLCMSLowSpeedViewSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLCMSLowSpeedViewSw(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLCMSLowSpeedViewSwSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLCMSLowSpeedViewSwSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLCMSLowSpeedViewSwSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLCMSDanObjectRecSw(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLCMSDanObjectRecSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLCMSDanObjectRecSw(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLCMSDanObjectRecSwSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLCMSDanObjectRecSwSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLCMSDanObjectRecSwSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLCMSReverseAssitSw(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLCMSReverseAssitSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLCMSReverseAssitSw(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLCMSReverseAssitSwSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLCMSReverseAssitSwSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLCMSReverseAssitSwSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLCMSTurnExtSw(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLCMSTurnExtSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLCMSTurnExtSw(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLCMSTurnExtSwSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLCMSTurnExtSwSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLCMSTurnExtSwSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLCMSViewRecovery(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLCMSViewRecovery, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLCMSViewRecovery(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLCMSViewRecoverySt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLCMSViewRecoverySt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLCMSViewRecoverySt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setArsWorkingMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setArsWorkingMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setArsWorkingMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getArsWorkingMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getArsWorkingMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getArsWorkingMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getArsWorkingState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getArsWorkingState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getArsWorkingState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getArsPosition() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getArsPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getArsPosition();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getArsInitState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getArsInitState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getArsInitState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmUserScenarioInfo(int[] info) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeIntArray(info);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmUserScenarioInfo, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmUserScenarioInfo(info);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setIcmUserScenarioExitDialog(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setIcmUserScenarioExitDialog, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setIcmUserScenarioExitDialog(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmDriverSeatLegHorzPosition(int pos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(pos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmDriverSeatLegHorzPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmDriverSeatLegHorzPosition(pos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmPassengerSeatLegHorzPosition(int pos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(pos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmPassengerSeatLegHorzPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmPassengerSeatLegHorzPosition(pos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMsmDriverSeatLegHorzPosition() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmDriverSeatLegHorzPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmDriverSeatLegHorzPosition();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMsmPassengerSeatLegHorzPosition() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmPassengerSeatLegHorzPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmPassengerSeatLegHorzPosition();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmSecRowLeftSeatLegHorzPosReq(int control, int direction) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(direction);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmSecRowLeftSeatLegHorzPosReq, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmSecRowLeftSeatLegHorzPosReq(control, direction);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmSecRowRightSeatLegHorzPosReq(int control, int direction) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(direction);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmSecRowRightSeatLegHorzPosReq, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmSecRowRightSeatLegHorzPosReq(control, direction);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmSecRowLeftSeatLegHorzPosition(int legHorzPos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(legHorzPos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmSecRowLeftSeatLegHorzPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmSecRowLeftSeatLegHorzPosition(legHorzPos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMsmSecRowLeftSeatLegHorzPosition() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmSecRowLeftSeatLegHorzPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmSecRowLeftSeatLegHorzPosition();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmSecRowRightSeatLegHorzPosition(int legHorzPos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(legHorzPos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmSecRowRightSeatLegHorzPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmSecRowRightSeatLegHorzPosition(legHorzPos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMsmSecRowRightSeatLegHorzPosition() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmSecRowRightSeatLegHorzPosition, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmSecRowRightSeatLegHorzPosition();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmTargetAsHeightLvlConfigValue() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmTargetAsHeightLvlConfigValue, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmTargetAsHeightLvlConfigValue();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmActualAsHeightLvlConfigValue() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmActualAsHeightLvlConfigValue, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmActualAsHeightLvlConfigValue();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmTargetAsHeightLvlConfigValue(int config) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(config);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmTargetAsHeightLvlConfigValue, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmTargetAsHeightLvlConfigValue(config);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmAsDrivingMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmAsDrivingMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmAsDrivingMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmDriverWelcomeActive(int active) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(active);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmDriverWelcomeActive, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmDriverWelcomeActive(active);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmPassengerWelcomeActive(int active) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(active);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmPassengerWelcomeActive, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmPassengerWelcomeActive(active);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacAutoDefogWorkSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacAutoDefogWorkSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacAutoDefogWorkSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmTtmLampConnectStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmTtmLampConnectStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmTtmLampConnectStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmTtmLampFaultStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmTtmLampFaultStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmTtmLampFaultStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getEspEpbDriverOffWarningMsg() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getEspEpbDriverOffWarningMsg, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getEspEpbDriverOffWarningMsg();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmTtmHookMotorStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmTtmHookMotorStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmTtmHookMotorStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAvasSocSoundVolumeToMcu(int vol) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(vol);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAvasSocSoundVolumeToMcu, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAvasSocSoundVolumeToMcu(vol);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getRearHvacPowerState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getRearHvacPowerState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getRearHvacPowerState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacSecRowLeftTempInc() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacSecRowLeftTempInc, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacSecRowLeftTempInc();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacSecRowLeftTempDec() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacSecRowLeftTempDec, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacSecRowLeftTempDec();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacSecRowRightTempInc() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacSecRowRightTempInc, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacSecRowRightTempInc();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacSecRowRightTempDec() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacSecRowRightTempDec, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacSecRowRightTempDec();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacTempSecRowLeftValue(float level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeFloat(level);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacTempSecRowLeftValue, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacTempSecRowLeftValue(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getHvacTempSecRowLeftValue() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacTempSecRowLeftValue, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacTempSecRowLeftValue();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacTempSecRowRightValue(float level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeFloat(level);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacTempSecRowRightValue, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacTempSecRowRightValue(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getHvacTempSecRowRightValue() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacTempSecRowRightValue, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacTempSecRowRightValue();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacRearAutoModeEnabled(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacRearAutoModeEnabled, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacRearAutoModeEnabled(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacRearAutoModeState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacRearAutoModeState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacRearAutoModeState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacRearWindSpeedAutoControlStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacRearWindSpeedAutoControlStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacRearWindSpeedAutoControlStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacRearAirDistributionAutoControlStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacRearAirDistributionAutoControlStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacRearAirDistributionAutoControlStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacRearFanSpeedInc() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacRearFanSpeedInc, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacRearFanSpeedInc();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacRearFanSpeedDec() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacRearFanSpeedDec, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacRearFanSpeedDec();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacRearFanSpeedLevel(int level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(level);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacRearFanSpeedLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacRearFanSpeedLevel(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacRearFanSpeedLevel() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacRearFanSpeedLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacRearFanSpeedLevel();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacThirdRowTempInc() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacThirdRowTempInc, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacThirdRowTempInc();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacThirdRowTempDec() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacThirdRowTempDec, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacThirdRowTempDec();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacTempThirdRowtValue(float level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeFloat(level);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacTempThirdRowtValue, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacTempThirdRowtValue(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getHvacTempThirdRowValue() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacTempThirdRowValue, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacTempThirdRowValue();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setRearHvacPowerEnabled(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setRearHvacPowerEnabled, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setRearHvacPowerEnabled(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacThirdRowWindBlowMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacThirdRowWindBlowMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacThirdRowWindBlowMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacThirdRowWindBlowMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacThirdRowWindBlowMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacThirdRowWindBlowMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmFrontWiperActiveStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmFrontWiperActiveStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmFrontWiperActiveStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getBcmAllWindowsActionFeedbackStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmAllWindowsActionFeedbackStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmAllWindowsActionFeedbackStatus();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendLCMSLogCtrlReq(int req) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(req);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendLCMSLogCtrlReq, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendLCMSLogCtrlReq(req);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendRCMSLogCtrlReq(int req) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(req);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendRCMSLogCtrlReq, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendRCMSLogCtrlReq(req);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuDriverHeadFaceArea() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuDriverHeadFaceArea, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuDriverHeadFaceArea();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendTboxOtaWorkingStatus(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendTboxOtaWorkingStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendTboxOtaWorkingStatus(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacNewFreshSwitchStatus(int onOff) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(onOff);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacNewFreshSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacNewFreshSwitchStatus(onOff);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacNewFreshSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacNewFreshSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacNewFreshSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setCmsAllExteriorMirrorsPositions(int lMirrorHorizonPos, int lMirrorVerticalPos, int rMirrorHorizonPos, int rMirrorVerticalPos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(lMirrorHorizonPos);
                    _data.writeInt(lMirrorVerticalPos);
                    _data.writeInt(rMirrorHorizonPos);
                    _data.writeInt(rMirrorVerticalPos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setCmsAllExteriorMirrorsPositions, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setCmsAllExteriorMirrorsPositions(lMirrorHorizonPos, lMirrorVerticalPos, rMirrorHorizonPos, rMirrorVerticalPos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setXpuLLCCDetourSw(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setXpuLLCCDetourSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setXpuLLCCDetourSw(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuLLCCDetourSw() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuLLCCDetourSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuLLCCDetourSw();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendCNGPCityMapCtrlReq(byte[] req) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeByteArray(req);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendCNGPCityMapCtrlReq, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendCNGPCityMapCtrlReq(req);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public byte[] getCNGPCityMapCtrlResp() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCNGPCityMapCtrlResp, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCNGPCityMapCtrlResp();
                    }
                    _reply.readException();
                    byte[] _result = _reply.createByteArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuSuperChargeDiffIncreaseRange() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuSuperChargeDiffIncreaseRange, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuSuperChargeDiffIncreaseRange();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmDriverSeatLumbControlSwitchEnable(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmDriverSeatLumbControlSwitchEnable, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmDriverSeatLumbControlSwitchEnable(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmPassengerSeatLumbControlSwitchEnable(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmPassengerSeatLumbControlSwitchEnable, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmPassengerSeatLumbControlSwitchEnable(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuChargerLowVolSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuChargerLowVolSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuChargerLowVolSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVcuChargerLowVolDiag(int ack) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(ack);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVcuChargerLowVolDiag, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVcuChargerLowVolDiag(ack);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLRCMSAllExteriorMirrorsPositions(float lMirrorHorizonPos, float lMirrorVerticalPos, float rMirrorHorizonPos, float rMirrorVerticalPos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeFloat(lMirrorHorizonPos);
                    _data.writeFloat(lMirrorVerticalPos);
                    _data.writeFloat(rMirrorHorizonPos);
                    _data.writeFloat(rMirrorVerticalPos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLRCMSAllExteriorMirrorsPositions, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLRCMSAllExteriorMirrorsPositions(lMirrorHorizonPos, lMirrorVerticalPos, rMirrorHorizonPos, rMirrorVerticalPos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float[] getLRCMSAllExteriorMirrorsPositions() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLRCMSAllExteriorMirrorsPositions, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLRCMSAllExteriorMirrorsPositions();
                    }
                    _reply.readException();
                    float[] _result = _reply.createFloatArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLRCMSViewAngle(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLRCMSViewAngle, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLRCMSViewAngle(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLRCMSViewAngle() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLRCMSViewAngle, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLRCMSViewAngle();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLCMSBrightWithStoreflag(int[] data) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeIntArray(data);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLCMSBrightWithStoreflag, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLCMSBrightWithStoreflag(data);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLRCMSStoreBrightSource() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLRCMSStoreBrightSource, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLRCMSStoreBrightSource();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setArsFoldOrUnfold(int type) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(type);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setArsFoldOrUnfold, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setArsFoldOrUnfold(type);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getLCMSBrightWithSource() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLCMSBrightWithSource, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLCMSBrightWithSource();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public byte[] getXpuVehLocationProto() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuVehLocationProto, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuVehLocationProto();
                    }
                    _reply.readException();
                    byte[] _result = _reply.createByteArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacRearWindLessSwitch(int onOff) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(onOff);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacRearWindLessSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacRearWindLessSwitch(onOff);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacRearWindLessSwitch() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacRearWindLessSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacRearWindLessSwitch();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAvm3603dAngle() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAvm3603dAngle, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAvm3603dAngle();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getAvmTransBodySwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getAvmTransBodySwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getAvmTransBodySwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendMcuOtaUpdateFile(String filePath) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(filePath);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendMcuOtaUpdateFile, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendMcuOtaUpdateFile(filePath);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAvm3603dAngle(int angle) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(angle);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAvm3603dAngle, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAvm3603dAngle(angle);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAvmTransBodySwitchStatus(int status) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(status);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAvmTransBodySwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAvmTransBodySwitchStatus(status);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getVcuAvalibleDrivingDistanceFloat() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuAvalibleDrivingDistanceFloat, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuAvalibleDrivingDistanceFloat();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getVcuLastTwoPointFiveKmAverageVehConsume() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuLastTwoPointFiveKmAverageVehConsume, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuLastTwoPointFiveKmAverageVehConsume();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getVcuLastTwentyKmAverageVehConsume() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuLastTwentyKmAverageVehConsume, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuLastTwentyKmAverageVehConsume();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getVcuLastHundredKmAverageVehConsume() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuLastHundredKmAverageVehConsume, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuLastHundredKmAverageVehConsume();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setXpuLccLStraightSw(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setXpuLccLStraightSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setXpuLccLStraightSw(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuLccLStraightSw() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuLccLStraightSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuLccLStraightSw();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setXpuNaviRemainingDistance(int distance) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(distance);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setXpuNaviRemainingDistance, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setXpuNaviRemainingDistance(distance);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public byte[] getXpuNaviConfirmProto() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuNaviConfirmProto, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuNaviConfirmProto();
                    }
                    _reply.readException();
                    byte[] _result = _reply.createByteArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setHvacMachineStateSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setHvacMachineStateSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setHvacMachineStateSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getHvacMachineStateSwitch() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getHvacMachineStateSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getHvacMachineStateSwitch();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendTboxWakeOrderRTC(String order) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(order);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendTboxWakeOrderRTC, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendTboxWakeOrderRTC(order);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVcuAutoEasyLoadingSwitchStatus(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVcuAutoEasyLoadingSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVcuAutoEasyLoadingSwitchStatus(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuAutoEasyLoadingSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuAutoEasyLoadingSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuAutoEasyLoadingSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLeftSlideDoorMoode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLeftSlideDoorMoode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLeftSlideDoorMoode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLeftSlideDoorStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLeftSlideDoorStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLeftSlideDoorStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLeftSlideDoorCtrl(int Ctrl) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(Ctrl);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLeftSlideDoorCtrl, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLeftSlideDoorCtrl(Ctrl);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLeftSlideDoorLockSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLeftSlideDoorLockSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLeftSlideDoorLockSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getRightSlideDoorMoode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getRightSlideDoorMoode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getRightSlideDoorMoode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getRightSlideDoorStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getRightSlideDoorStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getRightSlideDoorStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setRightSlideDoorCtrl(int Ctrl) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(Ctrl);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setRightSlideDoorCtrl, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setRightSlideDoorCtrl(Ctrl);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getRightSlideDoorLockSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getRightSlideDoorLockSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getRightSlideDoorLockSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getRearLogLight() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getRearLogLight, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getRearLogLight();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setRearLogLight(int onOff) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(onOff);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setRearLogLight, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setRearLogLight(onOff);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendTboxApnTrafficInfo(long apn0_traffic, long apn0_block, long apn1_traffic, long apn1_block) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                } catch (Throwable th) {
                    th = th;
                }
                try {
                    _data.writeLong(apn0_traffic);
                } catch (Throwable th2) {
                    th = th2;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
                try {
                    _data.writeLong(apn0_block);
                    _data.writeLong(apn1_traffic);
                    _data.writeLong(apn1_block);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendTboxApnTrafficInfo, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendTboxApnTrafficInfo(apn0_traffic, apn0_block, apn1_traffic, apn1_block);
                        _reply.recycle();
                        _data.recycle();
                        return;
                    }
                    _reply.readException();
                    _reply.recycle();
                    _data.recycle();
                } catch (Throwable th3) {
                    th = th3;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public String getTboxNetmConfInfo() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTboxNetmConfInfo, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTboxNetmConfInfo();
                    }
                    _reply.readException();
                    String _result = _reply.readString();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLaneSupportSystemStateAndWarning(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(1999, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLaneSupportSystemStateAndWarning(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getLaneSupportSystemStateAndWarning() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getLaneSupportSystemStateAndWarning, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getLaneSupportSystemStateAndWarning();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmTrunkWorkModeStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmTrunkWorkModeStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmTrunkWorkModeStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmLowBeamOffConfirmSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmLowBeamOffConfirmSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmLowBeamOffConfirmSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmLowBeamOffConfirmSt(int st) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(st);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmLowBeamOffConfirmSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmLowBeamOffConfirmSt(st);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setArsInitState(int st) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(st);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setArsInitState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setArsInitState(st);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getArsFaultState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getArsFaultState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getArsFaultState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmFRCwcSwitchState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmFRCwcSwitchState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmFRCwcSwitchState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmFRCwcSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmFRCwcSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmFRCwcSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getFRCwcChargeSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getFRCwcChargeSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getFRCwcChargeSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getFRCwcChargeErrorSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getFRCwcChargeErrorSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getFRCwcChargeErrorSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setCFPowerSwitch(int onOff) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(onOff);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setCFPowerSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setCFPowerSwitch(onOff);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCFPowerState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCFPowerState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCFPowerState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setCarFridgeDoorCtrl(int onOff) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(onOff);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setCarFridgeDoorCtrl, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setCarFridgeDoorCtrl(onOff);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCarFridgeDoorState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCarFridgeDoorState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCarFridgeDoorState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setCFTempInc() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setCFTempInc, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setCFTempInc();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setFCTempDec() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setFCTempDec, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setFCTempDec();
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setCFTempValue(int value) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(value);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setCFTempValue, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setCFTempValue(value);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCFTempValue() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCFTempValue, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCFTempValue();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setCFWorkMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setCFWorkMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setCFWorkMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCFWorkMode() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCFWorkMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCFWorkMode();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setCFChildLock(int onOff) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(onOff);
                    boolean _status = this.mRemote.transact(2020, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setCFChildLock(onOff);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCFChildLockState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCFChildLockState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCFChildLockState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setCFKeepTempSwitch(int onOff) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(onOff);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setCFKeepTempSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setCFKeepTempSwitch(onOff);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCFKeepTempState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCFKeepTempState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCFKeepTempState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setCFKeepTempTime(int value) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(value);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setCFKeepTempTime, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setCFKeepTempTime(value);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCFKeepTempTime() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCFKeepTempTime, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCFKeepTempTime();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCFKeepTempRemainTime() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCFKeepTempRemainTime, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCFKeepTempRemainTime();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setCFKeepTempTimeMemoryRequest(int onOff) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(onOff);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setCFKeepTempTimeMemoryRequest, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setCFKeepTempTimeMemoryRequest(onOff);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCFKeepTempWorkState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCFKeepTempWorkState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCFKeepTempWorkState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendSRHeartBeatInfoRequest(String beat) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(beat);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendSRHeartBeatInfoRequest, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendSRHeartBeatInfoRequest(beat);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public String getSRHeartBeatInfo() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSRHeartBeatInfo, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSRHeartBeatInfo();
                    }
                    _reply.readException();
                    String _result = _reply.readString();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendSRLagLogHeartBeatFeedBackRequest(String info) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(info);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendSRLagLogHeartBeatFeedBackRequest, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendSRLagLogHeartBeatFeedBackRequest(info);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVCUAWDModeSw(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVCUAWDModeSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVCUAWDModeSw(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVCUAWDModeSw() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVCUAWDModeSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVCUAWDModeSw();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setCarpetLightWelcomeSw(int onOff) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(onOff);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setCarpetLightWelcomeSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setCarpetLightWelcomeSw(onOff);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getCarpetLightWelcomeState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getCarpetLightWelcomeState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getCarpetLightWelcomeState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setPollingWelcomeSW(int onOff) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(onOff);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setPollingWelcomeSW, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setPollingWelcomeSW(onOff);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getPollingWelcomeState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getPollingWelcomeState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getPollingWelcomeState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void SetFcwAebSensitivitySwitchStatus(int level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(level);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_SetFcwAebSensitivitySwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().SetFcwAebSensitivitySwitchStatus(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getFcwAebSensitivitySwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getFcwAebSensitivitySwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getFcwAebSensitivitySwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSfmCtrl(int ctrl) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(ctrl);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSfmCtrl, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSfmCtrl(ctrl);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getSfmCtrlState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSfmCtrlState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSfmCtrlState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSfmAnglePos(int angel) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(angel);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSfmAnglePos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSfmAnglePos(angel);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getSfmAnglePos() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSfmAnglePos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSfmAnglePos();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setAtlLin1Data(byte[] data) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeByteArray(data);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setAtlLin1Data, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setAtlLin1Data(data);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSecRowLeftBlowLevel(int level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(level);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSecRowLeftBlowLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSecRowLeftBlowLevel(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getSecRowLeftBlowLevel() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSecRowLeftBlowLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSecRowLeftBlowLevel();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSecRowRightBlowLevel(int level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(level);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSecRowRightBlowLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSecRowRightBlowLevel(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getSecRowRightBlowLevel() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(2048, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSecRowRightBlowLevel();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSecRowLeftSeatPos(int memoryReq, int seatHorizonPos, int seatAngle, int seatTiltingPos, int legHeightPos, int legHorzPos, int HeadHeightPos, int HeadHorzPos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                } catch (Throwable th) {
                    th = th;
                }
                try {
                    _data.writeInt(memoryReq);
                } catch (Throwable th2) {
                    th = th2;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
                try {
                    _data.writeInt(seatHorizonPos);
                } catch (Throwable th3) {
                    th = th3;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
                try {
                    _data.writeInt(seatAngle);
                } catch (Throwable th4) {
                    th = th4;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
                try {
                    _data.writeInt(seatTiltingPos);
                    _data.writeInt(legHeightPos);
                    _data.writeInt(legHorzPos);
                    _data.writeInt(HeadHeightPos);
                    _data.writeInt(HeadHorzPos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSecRowLeftSeatPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSecRowLeftSeatPos(memoryReq, seatHorizonPos, seatAngle, seatTiltingPos, legHeightPos, legHorzPos, HeadHeightPos, HeadHorzPos);
                        _reply.recycle();
                        _data.recycle();
                        return;
                    }
                    _reply.readException();
                    _reply.recycle();
                    _data.recycle();
                } catch (Throwable th5) {
                    th = th5;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getSecRowLeftSeatPos() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSecRowLeftSeatPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSecRowLeftSeatPos();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSecRowRightSeatPos(int memoryReq, int seatHorizonPos, int seatAngle, int seatTiltingPos, int legHeightPos, int legHorzPos, int HeadHeightPos, int HeadHorzPos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                } catch (Throwable th) {
                    th = th;
                }
                try {
                    _data.writeInt(memoryReq);
                } catch (Throwable th2) {
                    th = th2;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
                try {
                    _data.writeInt(seatHorizonPos);
                } catch (Throwable th3) {
                    th = th3;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
                try {
                    _data.writeInt(seatAngle);
                } catch (Throwable th4) {
                    th = th4;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
                try {
                    _data.writeInt(seatTiltingPos);
                    _data.writeInt(legHeightPos);
                    _data.writeInt(legHorzPos);
                    _data.writeInt(HeadHeightPos);
                    _data.writeInt(HeadHorzPos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSecRowRightSeatPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSecRowRightSeatPos(memoryReq, seatHorizonPos, seatAngle, seatTiltingPos, legHeightPos, legHorzPos, HeadHeightPos, HeadHorzPos);
                        _reply.recycle();
                        _data.recycle();
                        return;
                    }
                    _reply.readException();
                    _reply.recycle();
                    _data.recycle();
                } catch (Throwable th5) {
                    th = th5;
                    _reply.recycle();
                    _data.recycle();
                    throw th;
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getSecRowRightSeatPos() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSecRowRightSeatPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSecRowRightSeatPos();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTrdRowSeatAllPos(int ltSeatTiltingPos, int ltHeadHeightPos, int rtSeatTiltingPos, int rtHeadHeightPos, int midHeadHeightPos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(ltSeatTiltingPos);
                    _data.writeInt(ltHeadHeightPos);
                    _data.writeInt(rtSeatTiltingPos);
                    _data.writeInt(rtHeadHeightPos);
                    _data.writeInt(midHeadHeightPos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setTrdRowSeatAllPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setTrdRowSeatAllPos(ltSeatTiltingPos, ltHeadHeightPos, rtSeatTiltingPos, rtHeadHeightPos, midHeadHeightPos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int[] getTrdRowSeatAllPos() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTrdRowSeatAllPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTrdRowSeatAllPos();
                    }
                    _reply.readException();
                    int[] _result = _reply.createIntArray();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSecRowLeftHorizMove(int control, int direction) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(direction);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSecRowLeftHorizMove, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSecRowLeftHorizMove(control, direction);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSecRowLeftAngleMove(int control, int direction) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(direction);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSecRowLeftAngleMove, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSecRowLeftAngleMove(control, direction);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSecRowLeftLegVertiMove(int control, int direction) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(direction);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSecRowLeftLegVertiMove, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSecRowLeftLegVertiMove(control, direction);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSecRowLeftHeadVertiMove(int control, int direction) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(direction);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSecRowLeftHeadVertiMove, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSecRowLeftHeadVertiMove(control, direction);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSecRowLeftHeadHorizMove(int control, int direction) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(direction);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSecRowLeftHeadHorizMove, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSecRowLeftHeadHorizMove(control, direction);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSecRowRightHorizMove(int control, int direction) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(direction);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSecRowRightHorizMove, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSecRowRightHorizMove(control, direction);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSecRowRighttAngleMove(int control, int direction) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(direction);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSecRowRighttAngleMove, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSecRowRighttAngleMove(control, direction);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSecRowRightLegVertiMove(int control, int direction) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(direction);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSecRowRightLegVertiMove, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSecRowRightLegVertiMove(control, direction);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSecRowRightHeadVertiMove(int control, int direction) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(direction);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSecRowRightHeadVertiMove, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSecRowRightHeadVertiMove(control, direction);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSecRowRightHeadHorizMove(int control, int direction) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(direction);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSecRowRightHeadHorizMove, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSecRowRightHeadHorizMove(control, direction);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTrdRowLeftSeatTiltMove(int control, int direction) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(direction);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setTrdRowLeftSeatTiltMove, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setTrdRowLeftSeatTiltMove(control, direction);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTrdRowLeftHeadVertiMove(int control, int direction) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(direction);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setTrdRowLeftHeadVertiMove, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setTrdRowLeftHeadVertiMove(control, direction);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTrdRowRightSeatTiltMove(int control, int direction) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(direction);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setTrdRowRightSeatTiltMove, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setTrdRowRightSeatTiltMove(control, direction);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTrdRowRightHeadVertiMove(int control, int direction) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(direction);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setTrdRowRightHeadVertiMove, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setTrdRowRightHeadVertiMove(control, direction);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTrdRowMiddleSeatTiltMove(int control, int direction) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(direction);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setTrdRowMiddleSeatTiltMove, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setTrdRowMiddleSeatTiltMove(control, direction);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSecRowLeftSeatLumbVertiMove(int control, int direction) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(direction);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSecRowLeftSeatLumbVertiMove, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSecRowLeftSeatLumbVertiMove(control, direction);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSecRowLeftSeatLumbHorzMove(int control, int direction) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(direction);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSecRowLeftSeatLumbHorzMove, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSecRowLeftSeatLumbHorzMove(control, direction);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSecRowRightSeatLumbVertiMove(int control, int direction) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(direction);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSecRowRightSeatLumbVertiMove, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSecRowRightSeatLumbVertiMove(control, direction);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSecRowRightSeatLumbHorzMove(int control, int direction) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(direction);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSecRowRightSeatLumbHorzMove, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSecRowRightSeatLumbHorzMove(control, direction);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSecRowLeftSeatZeroGravReq(int ctrl) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(ctrl);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSecRowLeftSeatZeroGravReq, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSecRowLeftSeatZeroGravReq(ctrl);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSecRowRightSeatZeroGravReq(int ctrl) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(ctrl);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSecRowRightSeatZeroGravReq, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSecRowRightSeatZeroGravReq(ctrl);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSecRowLeftSeatEasyEntryReq(int ctrl) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(ctrl);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSecRowLeftSeatEasyEntryReq, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSecRowLeftSeatEasyEntryReq(ctrl);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSecRowRightSeatEasyEntryReq(int ctrl) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(ctrl);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSecRowRightSeatEasyEntryReq, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSecRowRightSeatEasyEntryReq(ctrl);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getSecRowLeftSeatFuncSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSecRowLeftSeatFuncSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSecRowLeftSeatFuncSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getSecRowRightSeatFuncSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSecRowRightSeatFuncSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSecRowRightSeatFuncSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmtLeftSeatFoldReq(int ctrl) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(ctrl);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmtLeftSeatFoldReq, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmtLeftSeatFoldReq(ctrl);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMsmtLeftSeatFoldFunSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmtLeftSeatFoldFunSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmtLeftSeatFoldFunSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmtRightSeatFoldReq(int ctrl) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(ctrl);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmtRightSeatFoldReq, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmtRightSeatFoldReq(ctrl);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMsmtRightSeatFoldFunSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmtRightSeatFoldFunSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmtRightSeatFoldFunSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setMsmtSeatStowReq(int ctrl) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(ctrl);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setMsmtSeatStowReq, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setMsmtSeatStowReq(ctrl);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getMsmtSeatStowFunSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getMsmtSeatStowFunSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getMsmtSeatStowFunSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void stopSecRowLeftSeatMoving(int cmd) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(cmd);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_stopSecRowLeftSeatMoving, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().stopSecRowLeftSeatMoving(cmd);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void stopSecRowRightSeatMoving(int cmd) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(cmd);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_stopSecRowRightSeatMoving, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().stopSecRowRightSeatMoving(cmd);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVcuAcChargCurrentMaxLimitedValue(int value) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(value);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVcuAcChargCurrentMaxLimitedValue, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVcuAcChargCurrentMaxLimitedValue(value);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVcuAcChargCurrentMaxLimitedValue() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVcuAcChargCurrentMaxLimitedValue, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVcuAcChargCurrentMaxLimitedValue();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSecRowLtSeatHorzPos(int pos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(pos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSecRowLtSeatHorzPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSecRowLtSeatHorzPos(pos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getSecRowLtSeatHorzPos() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSecRowLtSeatHorzPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSecRowLtSeatHorzPos();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSecRowLtSeatAnglePos(int pos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(pos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSecRowLtSeatAnglePos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSecRowLtSeatAnglePos(pos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getSecRowLtSeatAnglePos() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSecRowLtSeatAnglePos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSecRowLtSeatAnglePos();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSecRowLtSeatLegVerticalPos(int pos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(pos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSecRowLtSeatLegVerticalPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSecRowLtSeatLegVerticalPos(pos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getSecRowLtSeatLegVerticalPos() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSecRowLtSeatLegVerticalPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSecRowLtSeatLegVerticalPos();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSecRowLtSeatHeadVerticalPos(int pos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(pos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSecRowLtSeatHeadVerticalPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSecRowLtSeatHeadVerticalPos(pos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getSecRowLtSeatHeadVerticalPos() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSecRowLtSeatHeadVerticalPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSecRowLtSeatHeadVerticalPos();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSecRowLtSeatHeadHorzPos(int pos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(pos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSecRowLtSeatHeadHorzPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSecRowLtSeatHeadHorzPos(pos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getSecRowLtSeatHeadHorzPos() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSecRowLtSeatHeadHorzPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSecRowLtSeatHeadHorzPos();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSecRowRtSeatHorzPos(int pos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(pos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSecRowRtSeatHorzPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSecRowRtSeatHorzPos(pos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getSecRowRtSeatHorzPos() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSecRowRtSeatHorzPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSecRowRtSeatHorzPos();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSecRowRtSeatAnglePos(int pos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(pos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSecRowRtSeatAnglePos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSecRowRtSeatAnglePos(pos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getSecRowRtSeatAnglePos() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSecRowRtSeatAnglePos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSecRowRtSeatAnglePos();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSecRowRtSeatLegVerticalPos(int pos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(pos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSecRowRtSeatLegVerticalPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSecRowRtSeatLegVerticalPos(pos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getSecRowRtSeatLegVerticalPos() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSecRowRtSeatLegVerticalPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSecRowRtSeatLegVerticalPos();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSecRowRtSeatHeadVerticalPos(int pos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(pos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSecRowRtSeatHeadVerticalPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSecRowRtSeatHeadVerticalPos(pos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getSecRowRtSeatHeadVerticalPos() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSecRowRtSeatHeadVerticalPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSecRowRtSeatHeadVerticalPos();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setSecRowRtSeatHeadHorzPos(int pos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(pos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setSecRowRtSeatHeadHorzPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setSecRowRtSeatHeadHorzPos(pos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getSecRowRtSeatHeadHorzPos() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSecRowRtSeatHeadHorzPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSecRowRtSeatHeadHorzPos();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTrdRowLtSeatTiltPos(int pos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(pos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setTrdRowLtSeatTiltPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setTrdRowLtSeatTiltPos(pos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTrdRowLtSeatTiltPos() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTrdRowLtSeatTiltPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTrdRowLtSeatTiltPos();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTrdRowLtSeatHeadVerticalPos(int pos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(pos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setTrdRowLtSeatHeadVerticalPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setTrdRowLtSeatHeadVerticalPos(pos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTrdRowLtSeatHeadVerticalPos() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTrdRowLtSeatHeadVerticalPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTrdRowLtSeatHeadVerticalPos();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTrdRowRtSeatTiltPos(int pos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(pos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setTrdRowRtSeatTiltPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setTrdRowRtSeatTiltPos(pos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTrdRowRtSeatTiltPos() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTrdRowRtSeatTiltPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTrdRowRtSeatTiltPos();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTrdRowRtSeatHeadVerticalPos(int pos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(pos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setTrdRowRtSeatHeadVerticalPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setTrdRowRtSeatHeadVerticalPos(pos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTrdRowRtSeatHeadVerticalPos() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTrdRowRtSeatHeadVerticalPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTrdRowRtSeatHeadVerticalPos();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTrdRowMidSeatHeadVerticalPos(int pos) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(pos);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setTrdRowMidSeatHeadVerticalPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setTrdRowMidSeatHeadVerticalPos(pos);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTrdRowMidSeatHeadVerticalPos() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTrdRowMidSeatHeadVerticalPos, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTrdRowMidSeatHeadVerticalPos();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVMCRwsSwitch(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVMCRwsSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVMCRwsSwitch(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVMCRwsSwitchState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVMCRwsSwitchState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVMCRwsSwitchState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setVMCZWalkModeSwitch(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setVMCZWalkModeSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setVMCZWalkModeSwitch(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVMCZWalkModeState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVMCZWalkModeState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVMCZWalkModeState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getVMCSystemState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getVMCSystemState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getVMCSystemState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setLeftSlideDoorMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setLeftSlideDoorMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setLeftSlideDoorMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setRightSlideDoorMode(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setRightSlideDoorMode, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setRightSlideDoorMode(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTrdRowMidHeadVertiMove(int control, int direction) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(direction);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setTrdRowMidHeadVertiMove, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setTrdRowMidHeadVertiMove(control, direction);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTrdRowLeftSeatTiltState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTrdRowLeftSeatTiltState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTrdRowLeftSeatTiltState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTrdRowRightSeatTiltState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTrdRowRightSeatTiltState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTrdRowRightSeatTiltState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTrdRowSeatStowState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTrdRowSeatStowState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTrdRowSeatStowState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getV2LDischargeErrorReason() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getV2LDischargeErrorReason, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getV2LDischargeErrorReason();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setImsModeReq(int mode) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(mode);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setImsModeReq, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setImsModeReq(mode);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getImsModeState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getImsModeState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getImsModeState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setImsAutoVisionSw(int onOff) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(onOff);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setImsAutoVisionSw, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setImsAutoVisionSw(onOff);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getImsAutoVisionSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getImsAutoVisionSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getImsAutoVisionSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setImsBrightLevel(int level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(level);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setImsBrightLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setImsBrightLevel(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getImsBrightLevel() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getImsBrightLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getImsBrightLevel();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setImsVisionCtrl(int control, int direction) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(control);
                    _data.writeInt(direction);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setImsVisionCtrl, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setImsVisionCtrl(control, direction);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getImsVisionVerticalLevel() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getImsVisionVerticalLevel, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getImsVisionVerticalLevel();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getImsVisionAngleLevl() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getImsVisionAngleLevl, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getImsVisionAngleLevl();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getImsSystemSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getImsSystemSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getImsSystemSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmRLCwcSwitchState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmRLCwcSwitchState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmRLCwcSwitchState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmRLCwcSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmRLCwcSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmRLCwcSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getRLCwcChargeSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getRLCwcChargeSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getRLCwcChargeSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getRLCwcChargeErrorSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getRLCwcChargeErrorSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getRLCwcChargeErrorSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmRRCwcSwitchState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmRRCwcSwitchState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmRRCwcSwitchState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setBcmRRCwcSwitch(int enable) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(enable);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setBcmRRCwcSwitch, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setBcmRRCwcSwitch(enable);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getRRCwcChargeSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getRRCwcChargeSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getRRCwcChargeSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getRRCwcChargeErrorSt() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getRRCwcChargeErrorSt, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getRRCwcChargeErrorSt();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public float getBattOutWaterTempature() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBattOutWaterTempature, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBattOutWaterTempature();
                    }
                    _reply.readException();
                    float _result = _reply.readFloat();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getChargeHighVoltageLockState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getChargeHighVoltageLockState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getChargeHighVoltageLockState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getDischargeHighVoltageLockState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getDischargeHighVoltageLockState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getDischargeHighVoltageLockState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getInsulativeResistanceValue() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getInsulativeResistanceValue, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getInsulativeResistanceValue();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTrdLeftDomeLightSwitchStatus(int onOff) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(onOff);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setTrdLeftDomeLightSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setTrdLeftDomeLightSwitchStatus(onOff);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTrdLeftDomeLightSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTrdLeftDomeLightSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTrdLeftDomeLightSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setTrdRightDomeLightSwitchStatus(int onOff) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(onOff);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setTrdRightDomeLightSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setTrdRightDomeLightSwitchStatus(onOff);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTrdRightDomeLightSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTrdRightDomeLightSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTrdRightDomeLightSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setXpuNgpCustomSpeedSwitchStatus(int sw) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(sw);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setXpuNgpCustomSpeedSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setXpuNgpCustomSpeedSwitchStatus(sw);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuNgpCustomSpeedSwitchStatus() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuNgpCustomSpeedSwitchStatus, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuNgpCustomSpeedSwitchStatus();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setXpuNgpCustomSpeedCountLever(int lever) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(lever);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setXpuNgpCustomSpeedCountLever, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setXpuNgpCustomSpeedCountLever(lever);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuNgpCustomSpeedCountLever() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuNgpCustomSpeedCountLever, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuNgpCustomSpeedCountLever();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setXpuNgpCustomSpeedCountPercent(int percent) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(percent);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setXpuNgpCustomSpeedCountPercent, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setXpuNgpCustomSpeedCountPercent(percent);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getXpuNgpCustomSpeedCountPercent() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getXpuNgpCustomSpeedCountPercent, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getXpuNgpCustomSpeedCountPercent();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getBcmPowerOffSource() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getBcmPowerOffSource, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getBcmPowerOffSource();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void sendIcmRandisDisplayType(String info) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeString(info);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_sendIcmRandisDisplayType, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().sendIcmRandisDisplayType(info);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public void setWiperRainDetectSensitivityAndInactive(int level) throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    _data.writeInt(level);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_setWiperRainDetectSensitivityAndInactive, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        Stub.getDefaultImpl().setWiperRainDetectSensitivityAndInactive(level);
                    } else {
                        _reply.readException();
                    }
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getSecRowLtSeatState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSecRowLtSeatState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSecRowLtSeatState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getSecRowRtSeatState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getSecRowRtSeatState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getSecRowRtSeatState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTrdRowLtSeatHeadMoveState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTrdRowLtSeatHeadMoveState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTrdRowLtSeatHeadMoveState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTrdRowMidSeatHeadMoveState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTrdRowMidSeatHeadMoveState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTrdRowMidSeatHeadMoveState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }

            @Override // android.car.hardware.XpVehicle.IXpVehicle
            public int getTrdRowRtSeatHeadMoveState() throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                try {
                    _data.writeInterfaceToken(Stub.DESCRIPTOR);
                    boolean _status = this.mRemote.transact(Stub.TRANSACTION_getTrdRowRtSeatHeadMoveState, _data, _reply, 0);
                    if (!_status && Stub.getDefaultImpl() != null) {
                        return Stub.getDefaultImpl().getTrdRowRtSeatHeadMoveState();
                    }
                    _reply.readException();
                    int _result = _reply.readInt();
                    return _result;
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
            }
        }

        private boolean onTransact$setMcuIsWakeUpByPhone$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setMcuIsWakeUpByPhone(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setMqttLogInfo$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _arg0 = data.readString();
            String _arg1 = data.readString();
            String _arg2 = data.readString();
            String _arg3 = data.readString();
            setMqttLogInfo(_arg0, _arg1, _arg2, _arg3);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setMcuHorn$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setMcuHorn(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setMcuFlash$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setMcuFlash(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setDrivingMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setDrivingMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$sendTestMsgToMcu$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int[] _arg0 = data.createIntArray();
            sendTestMsgToMcu(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$sendPwrDebugMsgToMcu$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int[] _arg0 = data.createIntArray();
            sendPwrDebugMsgToMcu(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$sendDugReqMsgToMcu$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int[] _arg0 = data.createIntArray();
            sendDugReqMsgToMcu(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$sendDisplayTypeMsgToMcu$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            sendDisplayTypeMsgToMcu(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$sendPmSilentMsgToMcu$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            sendPmSilentMsgToMcu(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$sendMcuBmsMsgToMcu$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            sendMcuBmsMsgToMcu(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$sendOta1MsgToMcu$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int[] _arg0 = data.createIntArray();
            sendOta1MsgToMcu(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$sendPsuOtaMsgToMcu$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int[] _arg0 = data.createIntArray();
            sendPsuOtaMsgToMcu(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$sendSecretKeyToMcu$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            byte[] _arg0 = data.createByteArray();
            sendSecretKeyToMcu(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$sendRequestWakeToMcu$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            sendRequestWakeToMcu(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$sendDiagnoseMsgToMcu$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int[] _arg0 = data.createIntArray();
            sendDiagnoseMsgToMcu(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$sendReset4gMsgToMcu$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int[] _arg0 = data.createIntArray();
            sendReset4gMsgToMcu(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$sendResetModemMsgToMcu$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            sendResetModemMsgToMcu(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$sendGpsInfoMsgToMcu$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int[] _arg0 = data.createIntArray();
            sendGpsInfoMsgToMcu(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$updateMcuBin$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _arg0 = data.readString();
            updateMcuBin(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setMcuRtcTime$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            long _arg0 = data.readLong();
            setMcuRtcTime(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setMcuTimeZone$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setMcuTimeZone(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmRearFogLampOn$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmRearFogLampOn(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmFrontLampMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmFrontLampMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmRearViewMirrorPos$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmRearViewMirrorPos(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmInternalLightOn$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmInternalLightOn(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmEmergencyBrakeWarning$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmEmergencyBrakeWarning(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmLightMeHomeMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmLightMeHomeMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmDrvAutoLockEnabled$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmDrvAutoLockEnabled(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmParkingAutoUnlockEnabled$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmParkingAutoUnlockEnabled(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmHazardLampsFlash$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmHazardLampsFlash(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmDoorLock$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmDoorLock(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmTrunkOpen$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmTrunkOpen(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmWiperInterval$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmWiperInterval(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setChairSlowlyAhead$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setChairSlowlyAhead(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setChairSlowlyBack$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setChairSlowlyBack(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setChairSlowlyEnd$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setChairSlowlyEnd(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setChairPositionStart$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _arg1 = data.readInt();
            int _arg2 = data.readInt();
            setChairPositionStart(_arg0, _arg1, _arg2);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmChairWelcomeMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmChairWelcomeMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmElectricSeatBeltEnabled$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmElectricSeatBeltEnabled(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmRearSeatBeltWarningEnabled$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmRearSeatBeltWarningEnabled(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmUnlockResponseMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmUnlockResponseMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmBackDefrostMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmBackDefrostMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmBackMirrorHeatMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmBackMirrorHeatMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmSeatHeatLevel$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmSeatHeatLevel(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmSeatBlowLevel$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmSeatBlowLevel(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setFactoryOledData$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            byte[] _arg0 = data.createByteArray();
            setFactoryOledData(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setFactoryOledDisplayMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setFactoryOledDisplayMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmChargePortUnlock$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _arg1 = data.readInt();
            setBcmChargePortUnlock(_arg0, _arg1);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setVcuChargeMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setVcuChargeMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setVcuEnergyRecycleLevel$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setVcuEnergyRecycleLevel(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacFanSpeedUp$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setHvacFanSpeedUp(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacFanSpeedLevel$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setHvacFanSpeedLevel(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacFanSpeedDown$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setHvacFanSpeedDown(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacFanPosition$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setHvacFanPosition(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacTempLeftSyncEnabled$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setHvacTempLeftSyncEnabled(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacPsnSeatTempValue$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float _arg0 = data.readFloat();
            setHvacPsnSeatTempValue(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacPsnSeatTempUp$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float _arg0 = data.readFloat();
            setHvacPsnSeatTempUp(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacPsnSeatTempDown$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float _arg0 = data.readFloat();
            setHvacPsnSeatTempDown(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacDrvSeatTempValue$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float _arg0 = data.readFloat();
            setHvacDrvSeatTempValue(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacDrvSeatTempUp$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float _arg0 = data.readFloat();
            setHvacDrvSeatTempUp(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacDrvSeatTempDown$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float _arg0 = data.readFloat();
            setHvacDrvSeatTempDown(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacAcEnabled$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setHvacAcEnabled(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacAirPurgeEnabed$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setHvacAirPurgeEnabed(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacPowerEnabled$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setHvacPowerEnabled(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacDefrostMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setHvacDefrostMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacAirCycleMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setHvacAirCycleMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacAutoModePreference$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setHvacAutoModePreference(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacAutoModeEnabled$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setHvacAutoModeEnabled(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setSuperParkMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setSuperParkMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setSideReversingWarning$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setSideReversingWarning(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setScuTest$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setScuTest(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setRadarWarningVoiceStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setRadarWarningVoiceStatus(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setPhoneSMButton$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setPhoneSMButton(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setPhoneAPButton$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setPhoneAPButton(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setParkLotRecvIndex2Scu$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setParkLotRecvIndex2Scu(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setParkLotChoseIndex2Scu$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setParkLotChoseIndex2Scu(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setLocationInfo$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float _arg0 = data.readFloat();
            float _arg1 = data.readFloat();
            float _arg2 = data.readFloat();
            float _arg3 = data.readFloat();
            float _arg4 = data.readFloat();
            long _arg5 = data.readLong();
            setLocationInfo(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setLaneDepartureWarning$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setLaneDepartureWarning(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setLaneChangeAssist$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setLaneChangeAssist(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setIntelligentSpeedLimit$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setIntelligentSpeedLimit(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setFrontCollisionSecurity$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setFrontCollisionSecurity(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBlindAreaDetectionWarning$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBlindAreaDetectionWarning(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAutoPilotLocationInfo$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float _arg0 = data.readFloat();
            float _arg1 = data.readFloat();
            float _arg2 = data.readFloat();
            float _arg3 = data.readFloat();
            float _arg4 = data.readFloat();
            float _arg5 = data.readFloat();
            long _arg6 = data.readLong();
            setAutoPilotLocationInfo(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAutoParkOutState$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setAutoParkOutState(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAutoParkInState$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setAutoParkInState(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAvmCameraAngle$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setAvmCameraAngle(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAvmRoofCameraRaise$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setAvmRoofCameraRaise(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAvmCameraDisplayMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setAvmCameraDisplayMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAdasMeta$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            byte[] _arg0 = data.createByteArray();
            setAdasMeta(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAdasPosition$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            byte[] _arg0 = data.createByteArray();
            setAdasPosition(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAdasProfLong$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            byte[] _arg0 = data.createByteArray();
            setAdasProfLong(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAdasProfShort$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            byte[] _arg0 = data.createByteArray();
            setAdasProfShort(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAdasSegment$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            byte[] _arg0 = data.createByteArray();
            setAdasSegment(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAdasStub$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            byte[] _arg0 = data.createByteArray();
            setAdasStub(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setEpsWorkMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setEpsWorkMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setEspHdcEnabled$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setEspHdcEnabled(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setEspWorkMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setEspWorkMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setEspAvhEnabled$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setEspAvhEnabled(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setIcmAlarmVolume$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setIcmAlarmVolume(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setIcmTimeFormat$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setIcmTimeFormat(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setIcmTemperature$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setIcmTemperature(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setIcmWindPower$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setIcmWindPower(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setIcmWindMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setIcmWindMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setIcmMediaSource$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setIcmMediaSource(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setIcmScreenLight$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setIcmScreenLight(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setIcmNavigation$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setIcmNavigation(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setIcmDayNightSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setIcmDayNightSwitch(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setSpeedLimitWarningSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setSpeedLimitWarningSwitch(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setSpeedLimitWarningValue$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setSpeedLimitWarningValue(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setIcmWindBlowMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setIcmWindBlowMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setIcmWindLevel$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setIcmWindLevel(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setIcmDriverTempValue$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float _arg0 = data.readFloat();
            setIcmDriverTempValue(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setMeterSoundState$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _arg1 = data.readInt();
            int _arg2 = data.readInt();
            setMeterSoundState(_arg0, _arg1, _arg2);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$sendContacts$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            byte[] _arg0 = data.createByteArray();
            sendContacts(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setWeatherInfo$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            byte[] _arg0 = data.createByteArray();
            setWeatherInfo(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setNavigationInfo$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            byte[] _arg0 = data.createByteArray();
            setNavigationInfo(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setMusicInfo$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            byte[] _arg0 = data.createByteArray();
            byte[] _arg1 = data.createByteArray();
            setMusicInfo(_arg0, _arg1);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setNetRadioInfo$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            byte[] _arg0 = data.createByteArray();
            byte[] _arg1 = data.createByteArray();
            setNetRadioInfo(_arg0, _arg1);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setRadioInfo$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            byte[] _arg0 = data.createByteArray();
            setRadioInfo(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBtMusicState$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            byte[] _arg0 = data.createByteArray();
            setBtMusicState(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setIcmSystemTimeValue$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _arg1 = data.readInt();
            setIcmSystemTimeValue(_arg0, _arg1);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setMeterBackLightLevel$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setMeterBackLightLevel(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setSpeechStateInfo$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            byte[] _arg0 = data.createByteArray();
            setSpeechStateInfo(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$sendRomBinMsg$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            byte[] _arg1 = data.createByteArray();
            byte[] _arg2 = data.createByteArray();
            sendRomBinMsg(_arg0, _arg1, _arg2);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setIcmAccount$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _arg0 = data.readString();
            setIcmAccount(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setNotifyMessage$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            byte[] _arg0 = data.createByteArray();
            setNotifyMessage(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setRadioBand$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setRadioBand(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setRadioVolumePercent$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _arg1 = data.readInt();
            setRadioVolumePercent(_arg0, _arg1);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setRadioVolumeAutoFocus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setRadioVolumeAutoFocus(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setFmVolume$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _arg1 = data.readInt();
            setFmVolume(_arg0, _arg1);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setCarExhibitionModeVol$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setCarExhibitionModeVol(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setRadioFrequency$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _arg1 = data.readInt();
            setRadioFrequency(_arg0, _arg1);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAudioMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _arg1 = data.readInt();
            setAudioMode(_arg0, _arg1);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAudioGEQParams$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _arg1 = data.readInt();
            int _arg2 = data.readInt();
            int _arg3 = data.readInt();
            setAudioGEQParams(_arg0, _arg1, _arg2, _arg3);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAudioBalanceFader$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _arg1 = data.readInt();
            setAudioBalanceFader(_arg0, _arg1);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setTboxWifiStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setTboxWifiStatus(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setTboxWifiGatewayInfo$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _arg0 = data.readString();
            setTboxWifiGatewayInfo(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$sendTboxRemoteDiagInfo$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _arg0 = data.readString();
            sendTboxRemoteDiagInfo(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setRemoteDiagCaptureResponse$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _arg0 = data.readString();
            setRemoteDiagCaptureResponse(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAnalogSoundEffect$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setAnalogSoundEffect(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAnalogSoundEnable$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setAnalogSoundEnable(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setEspIbsBrakeMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setEspIbsBrakeMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setTBoxChargeLimitValue$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setTBoxChargeLimitValue(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAtlOpen$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setAtlOpen(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setDoubleThemeColor$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setDoubleThemeColor(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setThemeFirstColor$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setThemeFirstColor(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setThemeSecondColor$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setThemeSecondColor(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAutoBrightness$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setAutoBrightness(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBrightnessLevel$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBrightnessLevel(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setTwoLightData$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            byte _arg0 = data.readByte();
            byte[] _arg1 = data.createByteArray();
            boolean _arg2 = data.readInt() != 0;
            byte[] _arg3 = data.createByteArray();
            byte[] _arg4 = data.createByteArray();
            byte[] _arg5 = data.createByteArray();
            setTwoLightData(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setGroutLightData$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            byte _arg0 = data.readByte();
            byte _arg1 = data.readByte();
            int _arg2 = data.readInt();
            boolean _arg3 = data.readInt() != 0;
            byte _arg4 = data.readByte();
            byte _arg5 = data.readByte();
            byte _arg6 = data.readByte();
            setGroutLightData(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAllLightData$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            boolean _arg0 = data.readInt() != 0;
            byte[] _arg1 = data.createByteArray();
            byte[] _arg2 = data.createByteArray();
            byte[] _arg3 = data.createByteArray();
            setAllLightData(_arg0, _arg1, _arg2, _arg3);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmWindowMovePosition$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            float _arg1 = data.readFloat();
            setBcmWindowMovePosition(_arg0, _arg1);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setTBoxBandModem$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _arg0 = data.readString();
            setTBoxBandModem(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAtlDowOpen$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setAtlDowOpen(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setLluEnableStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setLluEnableStatus(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setLluWakeWaitSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setLluWakeWaitSwitch(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setLluShowOffSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setLluShowOffSwitch(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setLluSleepSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setLluSleepSwitch(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setLluChargingSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setLluChargingSwitch(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setLluPhotoSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setLluPhotoSwitch(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setLluPrivateCtrl$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            boolean _arg0 = data.readInt() != 0;
            int _arg1 = data.readInt();
            int _arg2 = data.readInt();
            int _arg3 = data.readInt();
            int _arg4 = data.readInt();
            int _arg5 = data.readInt();
            int _arg6 = data.readInt();
            setLluPrivateCtrl(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAvasWaitForWakeUpSoundSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setAvasWaitForWakeUpSoundSwitch(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAvasFullChargeWaitForWakeUpSoundSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setAvasFullChargeWaitForWakeUpSoundSwitch(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAvasSleepSoundSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setAvasSleepSoundSwitch(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAvasAcChargingSoundSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setAvasAcChargingSoundSwitch(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAvasDcChargingSoundSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setAvasDcChargingSoundSwitch(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAvasDisconnectChargingSoundSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setAvasDisconnectChargingSoundSwitch(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAvasLowSpeedSoundSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setAvasLowSpeedSoundSwitch(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAvasLowSpeedSoundEffect$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setAvasLowSpeedSoundEffect(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAvasExternalSoundCmd$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setAvasExternalSoundCmd(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAvasFriendlySayHiSound$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setAvasFriendlySayHiSound(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAvasExternalVolume$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setAvasExternalVolume(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAvasLowSpeedVolume$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setAvasLowSpeedVolume(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setLluBreathMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setLluBreathMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAvasExternalSoundModeCmd$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setAvasExternalSoundModeCmd(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmDrvSeatHorizMove$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _arg1 = data.readInt();
            setMsmDrvSeatHorizMove(_arg0, _arg1);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmDrvSeatBackMove$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _arg1 = data.readInt();
            setMsmDrvSeatBackMove(_arg0, _arg1);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmDrvSeatVertiMove$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _arg1 = data.readInt();
            setMsmDrvSeatVertiMove(_arg0, _arg1);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmDrvLegVertiMove$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _arg1 = data.readInt();
            setMsmDrvLegVertiMove(_arg0, _arg1);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmDrvLumbHorzMove$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _arg1 = data.readInt();
            setMsmDrvLumbHorzMove(_arg0, _arg1);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmDrvLumbVertiMove$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _arg1 = data.readInt();
            setMsmDrvLumbVertiMove(_arg0, _arg1);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmDrvSeatHorizPosition$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setMsmDrvSeatHorizPosition(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmDrvSeatVertiPosition$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setMsmDrvSeatVertiPosition(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmDrvSeatBackPosition$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setMsmDrvSeatBackPosition(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmDrvSeatLegPosition$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setMsmDrvSeatLegPosition(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmPsnSeatHorizMove$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _arg1 = data.readInt();
            setMsmPsnSeatHorizMove(_arg0, _arg1);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmPsnSeatBackMove$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _arg1 = data.readInt();
            setMsmPsnSeatBackMove(_arg0, _arg1);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmPsnSeatVertiMove$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _arg1 = data.readInt();
            setMsmPsnSeatVertiMove(_arg0, _arg1);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getBcmWindowMovePosition$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            float _result = getBcmWindowMovePosition(_arg0);
            reply.writeNoException();
            reply.writeFloat(_result);
            return true;
        }

        private boolean onTransact$setBcmWindowMoveCmd$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _arg1 = data.readInt();
            setBcmWindowMoveCmd(_arg0, _arg1);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmNfcCardEnabled$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmNfcCardEnabled(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmAutoWindowCmd$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmAutoWindowCmd(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmWindowRemoteCtrlCfg$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmWindowRemoteCtrlCfg(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmChildLockCfg$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmChildLockCfg(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmLeftMirrorCtrlCmd$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmLeftMirrorCtrlCmd(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmRightMirrorCtrlCmd$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmRightMirrorCtrlCmd(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmLeftMirrorHorizPos$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmLeftMirrorHorizPos(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmRightMirrorHorizPos$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmRightMirrorHorizPos(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmLeftMirrorVerticalPos$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmLeftMirrorVerticalPos(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmRightMirrorVerticalPos$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmRightMirrorVerticalPos(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmReverseMirrorCfgCmd$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmReverseMirrorCfgCmd(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmShcReq$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmShcReq(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmFollowMeTime$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmFollowMeTime(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmDayLightMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmDayLightMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmDomeLightCfg$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmDomeLightCfg(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getTpmsTirePressureValue$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            float _result = getTpmsTirePressureValue(_arg0);
            reply.writeNoException();
            reply.writeFloat(_result);
            return true;
        }

        private boolean onTransact$setHvacTempRightSyncEnabled$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setHvacTempRightSyncEnabled(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacDrvLeftFanHorPos$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setHvacDrvLeftFanHorPos(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacDrvLeftFanVerPos$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setHvacDrvLeftFanVerPos(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacDrvRightFanHorPos$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setHvacDrvRightFanHorPos(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacDrvRightFanVerPos$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setHvacDrvRightFanVerPos(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacPsnLeftFanHorPos$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setHvacPsnLeftFanHorPos(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacPsnLeftFanVerPos$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setHvacPsnLeftFanVerPos(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacPsnRightFanHorPos$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setHvacPsnRightFanHorPos(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacPsnRightFanVerPos$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setHvacPsnRightFanVerPos(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacAqsEnabled$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setHvacAqsEnabled(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacAqsSensitivity$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setHvacAqsSensitivity(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacSweepWindStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setHvacSweepWindStatus(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacEconEnabled$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setHvacEconEnabled(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacEavDrvWindMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setHvacEavDrvWindMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacEavPsnWindMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setHvacEavPsnWindMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacAirCirculationPeriod$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setHvacAirCirculationPeriod(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacAirDistributionMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setHvacAirDistributionMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setSocCoolingRequestTemp$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float _arg0 = data.readFloat();
            setSocCoolingRequestTemp(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAmpCoolingRequestTemp$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float _arg0 = data.readFloat();
            setAmpCoolingRequestTemp(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAmpTempRiseSpeedState$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setAmpTempRiseSpeedState(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAvmCalibrationMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setAvmCalibrationMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAvmOverlayWorkSt$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setAvmOverlayWorkSt(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAvmTransparentChassisState$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setAvmTransparentChassisState(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAvmFineTuneMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setAvmFineTuneMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAmpMusicStyle$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setAmpMusicStyle(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setAmpMusicScene$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setAmpMusicScene(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getAmpMusicScene$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getAmpMusicScene();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setAmpStandByEnabled$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setAmpStandByEnabled(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$isAmpStandByEnabled$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = isAmpStandByEnabled();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setAmpSoundFieldMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setAmpSoundFieldMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getAmpSoundFieldMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getAmpSoundFieldMode();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setApmAudioEffect$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setApmAudioEffect(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getApmAudioEffect$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getApmAudioEffect();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setAmpMute$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setAmpMute(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$isAmpMute$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = isAmpMute();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setAmpVolume$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setAmpVolume(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getAmpVolume$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getAmpVolume();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setAmpSoundTrackMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setAmpSoundTrackMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getAmpSoundTrackMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getAmpSoundTrackMode();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setFarLampAutoSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setFarLampAutoSwitch(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getFarLampAutoSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getFarLampAutoSwitch();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setCutLinePreventSw$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setCutLinePreventSw(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getCutLinePreventSw$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getCutLinePreventSw();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setRearCrossEmergencyWarning$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setRearCrossEmergencyWarning(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getRearCrossEmergencyWarning$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getRearCrossEmergencyWarning();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setRearCollisionSecurity$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setRearCollisionSecurity(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getRearCollisionSecurity$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getRearCollisionSecurity();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setDoorOpenWarning$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setDoorOpenWarning(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getDoorOpenWarning$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getDoorOpenWarning();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setFatigueDetectionSw$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setFatigueDetectionSw(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getFatigueDetectionSw$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getFatigueDetectionSw();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setTrafficSignRecognition$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setTrafficSignRecognition(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getTrafficSignRecognition$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getTrafficSignRecognition();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setSpdLimitWarnType$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setSpdLimitWarnType(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getSpdLimitWarnType$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getSpdLimitWarnType();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setLaneAlignmentAssist$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setLaneAlignmentAssist(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getLaneAlignmentAssist$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getLaneAlignmentAssist();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setHighSpeedNavigation$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setHighSpeedNavigation(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getHighSpeedNavigation$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getHighSpeedNavigation();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setAutoParkReq$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setAutoParkReq(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setKeyRemoteParkType$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setKeyRemoteParkType(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getKeyRemoteType$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getKeyRemoteType();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setIntelligentCallButton$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setIntelligentCallButton(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getIntelligentCallButton$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getIntelligentCallButton();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getPhoneSMButton$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getPhoneSMButton();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setAutoParkSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setAutoParkSwitch(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getAutoParkSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getAutoParkSwitch();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setPhoneParkType$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setPhoneParkType(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getPhoneParkType$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getPhoneParkType();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setKeyRemoteSMButton$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setKeyRemoteSMButton(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getKeyRemoteSMButton$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getKeyRemoteSMButton();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setAdasMapInfo$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            byte[] _arg0 = data.createByteArray();
            setAdasMapInfo(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getParkSlotInfo$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float[] _result = getParkSlotInfo();
            reply.writeNoException();
            reply.writeFloatArray(_result);
            return true;
        }

        private boolean onTransact$getEnvCharacterInfo$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float[] _result = getEnvCharacterInfo();
            reply.writeNoException();
            reply.writeFloatArray(_result);
            return true;
        }

        private boolean onTransact$getCarPositionInfo$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float[] _result = getCarPositionInfo();
            reply.writeNoException();
            reply.writeFloatArray(_result);
            return true;
        }

        private boolean onTransact$getRadarDataInfo$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float[] _result = getRadarDataInfo();
            reply.writeNoException();
            reply.writeFloatArray(_result);
            return true;
        }

        private boolean onTransact$getEpsSteeringAngle$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float _result = getEpsSteeringAngle();
            reply.writeNoException();
            reply.writeFloat(_result);
            return true;
        }

        private boolean onTransact$getEpsSteeringAngleSpeed$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float _result = getEpsSteeringAngleSpeed();
            reply.writeNoException();
            reply.writeFloat(_result);
            return true;
        }

        private boolean onTransact$setCdcFunctionMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setCdcFunctionMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setMsbEnabled$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setMsbEnabled(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$isMsbEnabled$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = isMsbEnabled();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setDhcDoorknobAutoOpenEnabled$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setDhcDoorknobAutoOpenEnabled(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$isDhcDoorknobAutoOpenEnabled$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = isDhcDoorknobAutoOpenEnabled();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getCdcFunctionMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getCdcFunctionMode();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setSrsBackBeltWarningEnabled$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setSrsBackBeltWarningEnabled(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$isSrsBackBeltWarningEnabled$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = isSrsBackBeltWarningEnabled();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$isSrsPsnOnSeat$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = isSrsPsnOnSeat();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setChargeGunUnlock$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            setChargeGunUnlock();
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setChargeAppointTime$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int[] _arg0 = data.createIntArray();
            setChargeAppointTime(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getVcuResHeatManaTime$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getVcuResHeatManaTime();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getVcuAcChargeVolt$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float _result = getVcuAcChargeVolt();
            reply.writeNoException();
            reply.writeFloat(_result);
            return true;
        }

        private boolean onTransact$getVcuAcChargeCur$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float _result = getVcuAcChargeCur();
            reply.writeNoException();
            reply.writeFloat(_result);
            return true;
        }

        private boolean onTransact$getVcuDcChargeCur$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float _result = getVcuDcChargeCur();
            reply.writeNoException();
            reply.writeFloat(_result);
            return true;
        }

        private boolean onTransact$getVcuDcChargeVolt$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float _result = getVcuDcChargeVolt();
            reply.writeNoException();
            reply.writeFloat(_result);
            return true;
        }

        private boolean onTransact$setVcuDisChargeLimit$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setVcuDisChargeLimit(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getVcuDisCargeLimit$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getVcuDisCargeLimit();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setVcuDisChargeEnabled$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setVcuDisChargeEnabled(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getVcuDischargeQuantity$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getVcuDischargeQuantity();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getVcuChargeSocQuantity$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getVcuChargeSocQuantity();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getVcuEvsysReadyState$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getVcuEvsysReadyState();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setBcmWiperServiceMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmWiperServiceMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getBcmWiperServiceMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getBcmWiperServiceMode();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getBcmManualFrontLeftWinStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getBcmManualFrontLeftWinStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getBcmManualFrontRightWinStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getBcmManualFrontRightWinStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getBcmManualRearLeftWinStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getBcmManualRearLeftWinStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getBcmManualRearRightWinStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getBcmManualRearRightWinStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getLeftFrontDoorOpened$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int[] _result = getLeftFrontDoorOpened();
            reply.writeNoException();
            reply.writeIntArray(_result);
            return true;
        }

        private boolean onTransact$isBcmDriverOnSeat$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = isBcmDriverOnSeat();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setBcmHighBeamMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmHighBeamMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getVcuBatteryLevelPercent$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getVcuBatteryLevelPercent();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getVcuBatteryVolt$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float _result = getVcuBatteryVolt();
            reply.writeNoException();
            reply.writeFloat(_result);
            return true;
        }

        private boolean onTransact$getVcuBatteryCur$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float _result = getVcuBatteryCur();
            reply.writeNoException();
            reply.writeFloat(_result);
            return true;
        }

        private boolean onTransact$getVcuStopChargeReason$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getVcuStopChargeReason();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setVcuBrakeLightOn$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setVcuBrakeLightOn(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getSrsDrvBeltFastenStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getSrsDrvBeltFastenStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getSrsPsnBeltFastenStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getSrsPsnBeltFastenStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getSrsBackLeftBeltFastenStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getSrsBackLeftBeltFastenStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getSrsBackMiddleBeltFastenStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getSrsBackMiddleBeltFastenStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getSrsBackRightBeltFastenStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getSrsBackRightBeltFastenStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getSrsCrashOutputStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getSrsCrashOutputStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getSrsAirbagFaultStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getSrsAirbagFaultStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getSrsSelfCheckStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getSrsSelfCheckStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getNetWorkType$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getNetWorkType();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setAmpChannelVolAndSource$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _arg1 = data.readInt();
            int _arg2 = data.readInt();
            int _arg3 = data.readInt();
            setAmpChannelVolAndSource(_arg0, _arg1, _arg2, _arg3);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getVcuBreakPedalStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getVcuBreakPedalStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getVcuAccPedalStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getVcuAccPedalStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getBcmLeftTurnLampStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getBcmLeftTurnLampStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getBcmRightTurnLampStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getBcmRightTurnLampStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setLluWakeWaitMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setLluWakeWaitMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getLluWakeWaitMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getLluWakeWaitMode();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setLluShowOffMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setLluShowOffMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getLluShowOffMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getLluShowOffMode();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setLluSleepMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setLluSleepMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getLluSleepMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getLluSleepMode();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setLluAcChargeMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setLluAcChargeMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getLluAcChargeMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getLluAcChargeMode();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setLluDcChargeMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setLluDcChargeMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getLluDcChargeMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getLluDcChargeMode();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setLluPhotoMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setLluPhotoMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getLluPhotoMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getLluPhotoMode();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$isVcuParkingGearValid$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = isVcuParkingGearValid();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getBcmChargePortStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _result = getBcmChargePortStatus(_arg0);
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getVpmLdwLeftWarningStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getVpmLdwLeftWarningStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getVpmLdwRightWarningStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getVpmLdwRightWarningStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getBlindAreaLeftWarning$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getBlindAreaLeftWarning();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getBlindAreaRightWarning$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getBlindAreaRightWarning();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getRearCrossLeftWarning$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getRearCrossLeftWarning();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getRearCrossRightWarning$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getRearCrossRightWarning();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getXpuLongCtrlRemind$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getXpuLongCtrlRemind();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getXpilotStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getXpilotStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getXpuLatCtrlRemind$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getXpuLatCtrlRemind();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getVcuVehLast100mConsume$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float _result = getVcuVehLast100mConsume();
            reply.writeNoException();
            reply.writeFloat(_result);
            return true;
        }

        private boolean onTransact$isVcuBatteryCold$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = isVcuBatteryCold();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$isVcuChargeSpeedSlow$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = isVcuChargeSpeedSlow();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getAccStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getAccStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getChargeAppointTime$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int[] _result = getChargeAppointTime();
            reply.writeNoException();
            reply.writeIntArray(_result);
            return true;
        }

        private boolean onTransact$getHvacTempSyncMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getHvacTempSyncMode();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getSimStatusAsync$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            getSimStatusAsync();
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getApmAllChannelVolume$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int[] _result = getApmAllChannelVolume();
            reply.writeNoException();
            reply.writeIntArray(_result);
            return true;
        }

        private boolean onTransact$getApmAllChannelSoundSource$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int[] _result = getApmAllChannelSoundSource();
            reply.writeNoException();
            reply.writeIntArray(_result);
            return true;
        }

        private boolean onTransact$setNetWorkType$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setNetWorkType(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getBcmWiperInterval$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getBcmWiperInterval();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getMcuUpdateReqStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getMcuUpdateReqStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setMcuUpdateReqStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setMcuUpdateReqStatus(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getOtaMcuReqUpdatefile$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getOtaMcuReqUpdatefile();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setOtaMcuReqUpdatefile$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setOtaMcuReqUpdatefile(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setOtaMcuSendUpdatefile$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _arg0 = data.readString();
            setOtaMcuSendUpdatefile(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getOtaMcuUpdateStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getOtaMcuUpdateStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getTboxVersionInfoResponse$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _result = getTboxVersionInfoResponse();
            reply.writeNoException();
            reply.writeString(_result);
            return true;
        }

        private boolean onTransact$setTboxVersionInfoRequest$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            setTboxVersionInfoRequest();
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$startTboxOTA$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _arg0 = data.readString();
            startTboxOTA(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getStartTboxOTAResponse$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _result = getStartTboxOTAResponse();
            reply.writeNoException();
            reply.writeString(_result);
            return true;
        }

        private boolean onTransact$getStopTboxOTAResponse$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _result = getStopTboxOTAResponse();
            reply.writeNoException();
            reply.writeString(_result);
            return true;
        }

        private boolean onTransact$setIcmSyncSignal$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _arg0 = data.readString();
            setIcmSyncSignal(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setIcmOsdShow$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _arg0 = data.readString();
            setIcmOsdShow(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setIcmInfoCardAdd$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _arg0 = data.readString();
            setIcmInfoCardAdd(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setIcmInfoCardUpdate$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _arg0 = data.readString();
            setIcmInfoCardUpdate(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setIcmInfoCardRemove$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _arg0 = data.readString();
            setIcmInfoCardRemove(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setIcmAllCardsRefresh$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _arg0 = data.readString();
            setIcmAllCardsRefresh(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setIcmInfoFlowMsg$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _arg0 = data.readString();
            setIcmInfoFlowMsg(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setIcmCarSetting$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _arg0 = data.readString();
            setIcmCarSetting(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setIcmWeather$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _arg0 = data.readString();
            setIcmWeather(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setIcmWheelkey$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setIcmWheelkey(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setIcmSyncTime$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _arg0 = data.readString();
            setIcmSyncTime(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setIcmNavigationBmp$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _arg1 = data.readInt();
            int _arg2 = data.readInt();
            int _arg3 = data.readInt();
            byte[] _arg4 = data.createByteArray();
            setIcmNavigationBmp(_arg0, _arg1, _arg2, _arg3, _arg4);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setIcmNavigationInfo$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _arg0 = data.readString();
            setIcmNavigationInfo(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setGpsReset$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setGpsReset(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getGpsResetResp$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getGpsResetResp();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setTboxPsuMsg$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _arg0 = data.readString();
            setTboxPsuMsg(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getTboxPsuMsg$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _result = getTboxPsuMsg();
            reply.writeNoException();
            reply.writeString(_result);
            return true;
        }

        private boolean onTransact$getBcmPowerMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getBcmPowerMode();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setBcmPsnSeatHeatLevel$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmPsnSeatHeatLevel(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getBcmPsnSeatHeatLevel$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getBcmPsnSeatHeatLevel();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setIcmBrightness$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setIcmBrightness(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getIcmBrightness$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getIcmBrightness();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getIcmTimeFormat$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getIcmTimeFormat();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getCwcChargeSt$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getCwcChargeSt();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getCwcChargeErrorSt$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getCwcChargeErrorSt();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setAutoWindowLockSw$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setAutoWindowLockSw(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getAutoWindowLockSw$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getAutoWindowLockSw();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setLeavePollingLockSw$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setLeavePollingLockSw(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getLeavePollingLockSw$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getLeavePollingLockSw();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setNearPollingUnLockSw$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setNearPollingUnLockSw(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getNearePollingUnLockSw$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getNearePollingUnLockSw();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setStealthMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setStealthMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getStealthMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            getStealthMode();
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setVcuSnowMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setVcuSnowMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getVcuSnowMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getVcuSnowMode();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$hasEspFault$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = hasEspFault();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$hasEspHdcFault$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = hasEspHdcFault();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$hasEspAvhFault$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = hasEspAvhFault();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getCiuDmsStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getCiuDmsStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setCiuDmsStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setCiuDmsStatus(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setCiuFaceIdMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setCiuFaceIdMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getCiuUid$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getCiuUid();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setCiuUid$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setCiuUid(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getCiuFaceIdStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getCiuFaceIdStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getCiuFaceIdPrimalStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getCiuFaceIdPrimalStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getCiuFaceShieldStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getCiuFaceShieldStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getCiuErrorType$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getCiuErrorType();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getCiuLightIntensity$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getCiuLightIntensity();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getCiuFaceIDSwitchStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getCiuFaceIDSwitchStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setCiuFaceIdSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setCiuFaceIdSwitch(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setCiuDeleteFaceId$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setCiuDeleteFaceId(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getCiuDeleteFaceIdResult$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getCiuDeleteFaceIdResult();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setCiuRegHint$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setCiuRegHint(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setCiuStartRegFlow$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setCiuStartRegFlow(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setCiuStartRegFlag$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setCiuStartRegFlag(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getCiuFaceAction$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getCiuFaceAction();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setCiuFaceActionRequest$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setCiuFaceActionRequest(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setCiuFirmFaceCancel$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setCiuFirmFaceCancel(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setCiuRegisterRequestMulti$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _arg1 = data.readInt();
            int _arg2 = data.readInt();
            setCiuRegisterRequestMulti(_arg0, _arg1, _arg2);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setCiuDeleteMulti$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _arg1 = data.readInt();
            setCiuDeleteMulti(_arg0, _arg1);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getCiuValid$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getCiuValid();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getCiuAutoLockSt$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getCiuAutoLockSt();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getCiuDvrMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getCiuDvrMode();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setCiuDvrMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setCiuDvrMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setCiuPhotoProcess$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            setCiuPhotoProcess();
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setCiuDvrLockMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setCiuDvrLockMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setCiuVideoOutputMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setCiuVideoOutputMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getCiuSdStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getCiuSdStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getCiuDvrStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getCiuDvrStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setCiuFormatMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setCiuFormatMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getCiuDvrFormatStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getCiuDvrFormatStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getCiuDvrLockFb$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getCiuDvrLockFb();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setScuPhoneSmMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setScuPhoneSmMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getScuPhoneSmMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getScuPhoneSmMode();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setScuKeyPark$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setScuKeyPark(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getScuKeyPark$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getScuKeyPark();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getScuAltimeter$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float[] _result = getScuAltimeter();
            reply.writeNoException();
            reply.writeFloatArray(_result);
            return true;
        }

        private boolean onTransact$getScuSlotTheta$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int[] _result = getScuSlotTheta();
            reply.writeNoException();
            reply.writeIntArray(_result);
            return true;
        }

        private boolean onTransact$getScuTargetParkingPosition$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int[] _result = getScuTargetParkingPosition();
            reply.writeNoException();
            reply.writeIntArray(_result);
            return true;
        }

        private boolean onTransact$getScuFrontMinDistance$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getScuFrontMinDistance();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getScuRearMinDistance$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getScuRearMinDistance();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getScuModeIndex$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getScuModeIndex();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setScuLocalWeather$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _arg1 = data.readInt();
            int _arg2 = data.readInt();
            int _arg3 = data.readInt();
            setScuLocalWeather(_arg0, _arg1, _arg2, _arg3);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getVcuRawCarSpeed$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float _result = getVcuRawCarSpeed();
            reply.writeNoException();
            reply.writeFloat(_result);
            return true;
        }

        private boolean onTransact$getVcuPureDriveModeFeedback$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getVcuPureDriveModeFeedback();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getVcuEbsBatterySoc$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getVcuEbsBatterySoc();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getVcuSupDebugInfo$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getVcuSupDebugInfo();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getVcuErhDebugInfo$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getVcuErhDebugInfo();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getVcuChargeError$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getVcuChargeError();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getVcuAcInputStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getVcuAcInputStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$startVcuCharge$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            startVcuCharge(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$stopVcuAcCharge$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            stopVcuAcCharge(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$stopVcuDcCharge$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            stopVcuDcCharge();
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setVcuBestCharge$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            setVcuBestCharge();
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setVcuFullyCharge$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            setVcuFullyCharge();
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setVcuChargeLimit$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setVcuChargeLimit(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getMcuDtcReportEv$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int[] _result = getMcuDtcReportEv();
            reply.writeNoException();
            reply.writeIntArray(_result);
            return true;
        }

        private boolean onTransact$getMcuFactoryDisplayTypeMsgToMcu$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _result = getMcuFactoryDisplayTypeMsgToMcu();
            reply.writeNoException();
            reply.writeString(_result);
            return true;
        }

        private boolean onTransact$getMcuFaultInfo$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            byte[] _result = getMcuFaultInfo();
            reply.writeNoException();
            reply.writeByteArray(_result);
            return true;
        }

        private boolean onTransact$setTboxCanControlMsg$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _arg0 = data.readString();
            setTboxCanControlMsg(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getTboxCanControlMsg$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _result = getTboxCanControlMsg();
            reply.writeNoException();
            reply.writeString(_result);
            return true;
        }

        private boolean onTransact$setCiuRainSw$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setCiuRainSw(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getCiuRainSw$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getCiuRainSw();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getCiuCarWash$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getCiuCarWash();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setCiuCarWash$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setCiuCarWash(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getCiuDistractionStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getCiuDistractionStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setCiuDistractionStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setCiuDistractionStatus(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getCiuFatigueStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getCiuFatigueStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setCiuFatigueStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setCiuFatigueStatus(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setCiuDmsMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setCiuDmsMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getCiuFatigueLevel$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getCiuFatigueLevel();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getCiuDistractionLevel$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getCiuDistractionLevel();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setScuRoadAttr$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setScuRoadAttr(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setScuAssLineChanged$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setScuAssLineChanged(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getScuAssLineChanged$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getScuAssLineChanged();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setScuDmsMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setScuDmsMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setScuSeatBeltReq$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setScuSeatBeltReq(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacTempPtcStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setHvacTempPtcStatus(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getBcmPollingOpenCfg$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getBcmPollingOpenCfg();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setBcmPollingOpenCfg$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmPollingOpenCfg(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getBcmDriverBeltWarning$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getBcmDriverBeltWarning();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getBcmRearViewAutoDownCfg$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getBcmRearViewAutoDownCfg();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setBcmRearViewAutoDownCfg$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmRearViewAutoDownCfg(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getBcmChargeGunLockSt$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getBcmChargeGunLockSt();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getScuRadarDisplayActive$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getScuRadarDisplayActive();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getScuErrorTips$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getScuErrorTips();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setIcmDmsMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setIcmDmsMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setIcmFatigueLevel$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setIcmFatigueLevel(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setIcmDistractionLevel$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setIcmDistractionLevel(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getTboxAvpStartStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getTboxAvpStartStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getBmsAcMaxCurrent$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float _result = getBmsAcMaxCurrent();
            reply.writeNoException();
            reply.writeFloat(_result);
            return true;
        }

        private boolean onTransact$getBmsDtcErrorStopCurrent$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getBmsDtcErrorStopCurrent();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getBmsDtcChargeCurrentOver$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getBmsDtcChargeCurrentOver();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getBmsDcChargeStopReason$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getBmsDcChargeStopReason();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getBmsBatteryTotalVolt$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float _result = getBmsBatteryTotalVolt();
            reply.writeNoException();
            reply.writeFloat(_result);
            return true;
        }

        private boolean onTransact$getBmsDcCurrent$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float _result = getBmsDcCurrent();
            reply.writeNoException();
            reply.writeFloat(_result);
            return true;
        }

        private boolean onTransact$getBmsDcVolt$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float _result = getBmsDcVolt();
            reply.writeNoException();
            reply.writeFloat(_result);
            return true;
        }

        private boolean onTransact$startTboxCertInstall$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            startTboxCertInstall();
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$startTboxCertVerify$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            startTboxCertVerify();
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getTboxDvBattMsg$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _result = getTboxDvBattMsg();
            reply.writeNoException();
            reply.writeString(_result);
            return true;
        }

        private boolean onTransact$setMcuRepairMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setMcuRepairMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setLluSelfActive$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setLluSelfActive(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setTboxChargeGunLock$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            setTboxChargeGunLock();
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setMultipleDmsStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _arg1 = data.readInt();
            int _arg2 = data.readInt();
            int _arg3 = data.readInt();
            setMultipleDmsStatus(_arg0, _arg1, _arg2, _arg3);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getEspEpbWarningLampStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getEspEpbWarningLampStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getEspEpsWarninglampStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getEspEpsWarninglampStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getVcuEvErrLampDsp$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getVcuEvErrLampDsp();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getVcuEvErrMsgDsp$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getVcuEvErrMsgDsp();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getScuSuperParkMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getScuSuperParkMode();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getScuLocatData$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float[] _result = getScuLocatData();
            reply.writeNoException();
            reply.writeFloatArray(_result);
            return true;
        }

        private boolean onTransact$getScuParkingProgress$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float[] _result = getScuParkingProgress();
            reply.writeNoException();
            reply.writeFloatArray(_result);
            return true;
        }

        private boolean onTransact$getScuSensorData$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float[] _result = getScuSensorData();
            reply.writeNoException();
            reply.writeFloatArray(_result);
            return true;
        }

        private boolean onTransact$getScuLAvmData$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float[] _result = getScuLAvmData();
            reply.writeNoException();
            reply.writeFloatArray(_result);
            return true;
        }

        private boolean onTransact$getScuRAvmData$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float[] _result = getScuRAvmData();
            reply.writeNoException();
            reply.writeFloatArray(_result);
            return true;
        }

        private boolean onTransact$getScuSlotForPark$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float[] _result = getScuSlotForPark();
            reply.writeNoException();
            reply.writeFloatArray(_result);
            return true;
        }

        private boolean onTransact$getScuRadarVoiceActive$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getScuRadarVoiceActive();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getScuRadarVoiceTone$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getScuRadarVoiceTone();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setBcmLeftMirrorMove$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _arg1 = data.readInt();
            setBcmLeftMirrorMove(_arg0, _arg1);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmRightMirrorMove$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _arg1 = data.readInt();
            setBcmRightMirrorMove(_arg0, _arg1);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setMsmDriverAllPositions$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _arg1 = data.readInt();
            int _arg2 = data.readInt();
            int _arg3 = data.readInt();
            setMsmDriverAllPositions(_arg0, _arg1, _arg2, _arg3);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmAllExteriorMirrorsPositions$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _arg1 = data.readInt();
            int _arg2 = data.readInt();
            int _arg3 = data.readInt();
            setBcmAllExteriorMirrorsPositions(_arg0, _arg1, _arg2, _arg3);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getScuSlotData$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float[] _result = getScuSlotData();
            reply.writeNoException();
            reply.writeFloatArray(_result);
            return true;
        }

        private boolean onTransact$setLluCurrentFunction$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setLluCurrentFunction(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setTboxDvTestReq$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setTboxDvTestReq(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setTboxDvTempSamplingPeriod$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setTboxDvTempSamplingPeriod(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getTboxDvTempMsg$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _result = getTboxDvTempMsg();
            reply.writeNoException();
            reply.writeString(_result);
            return true;
        }

        private boolean onTransact$setMcuPsuTestReq$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setMcuPsuTestReq(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getMcuPsuTestResult$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getMcuPsuTestResult();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getDvTestMcuTemp$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float _result = getDvTestMcuTemp();
            reply.writeNoException();
            reply.writeFloat(_result);
            return true;
        }

        private boolean onTransact$getMcuDvBattMsg$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            byte[] _result = getMcuDvBattMsg();
            reply.writeNoException();
            reply.writeByteArray(_result);
            return true;
        }

        private boolean onTransact$getDvTestBatTemp$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float _result = getDvTestBatTemp();
            reply.writeNoException();
            reply.writeFloat(_result);
            return true;
        }

        private boolean onTransact$getDvTestPcbTemp$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float _result = getDvTestPcbTemp();
            reply.writeNoException();
            reply.writeFloat(_result);
            return true;
        }

        private boolean onTransact$setMcuDvTestReq$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setMcuDvTestReq(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setMcuDvTempSamplingPeriod$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setMcuDvTempSamplingPeriod(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setHvacSelfDrySwStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setHvacSelfDrySwStatus(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getHvacSelfDrySwStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getHvacSelfDrySwStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setLluLockSocDspSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setLluLockSocDspSwitch(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getLluLockSocDspSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getLluLockSocDspSwitch();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setLluUnLockSocDspSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setLluUnLockSocDspSwitch(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getLluUnLockSocDspSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getLluUnLockSocDspSwitch();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setAvasPhotoSoundSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setAvasPhotoSoundSwitch(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getAvasPhotoSoundSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getAvasPhotoSoundSwitch();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$saveMsmDriverAllPositionsToMcu$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _arg1 = data.readInt();
            int _arg2 = data.readInt();
            int _arg3 = data.readInt();
            saveMsmDriverAllPositionsToMcu(_arg0, _arg1, _arg2, _arg3);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getMcuChairWelcomeMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getMcuChairWelcomeMode();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setMcuChairWelcomeMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setMcuChairWelcomeMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBtPhoneCall$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _arg0 = data.readString();
            setBtPhoneCall(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$startTboxUpgradingTmcu$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            startTboxUpgradingTmcu();
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getTboxTmcuUpgradingProgress$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getTboxTmcuUpgradingProgress();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$startTboxUpgrading4G$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            startTboxUpgrading4G();
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getTbox4GUpgradingProgress$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getTbox4GUpgradingProgress();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getTpmsSystemFaultWarnLampStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getTpmsSystemFaultWarnLampStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getTpmsAbnormalTirePressureWarnLampStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getTpmsAbnormalTirePressureWarnLampStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getTpmsTirePressureWarningInfo$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _result = getTpmsTirePressureWarningInfo(_arg0);
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setMcuRemoteControlFeedback$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setMcuRemoteControlFeedback(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setTboxCameraRemoteControlFeedback$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _arg0 = data.readString();
            setTboxCameraRemoteControlFeedback(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$registerScuListener$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            IScuEventListener _arg0 = IScuEventListener.Stub.asInterface(data.readStrongBinder());
            registerScuListener(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$unregisterScuListener$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            IScuEventListener _arg0 = IScuEventListener.Stub.asInterface(data.readStrongBinder());
            unregisterScuListener(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setIcmMusicInfo$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _arg0 = data.readString();
            setIcmMusicInfo(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setIcmMusicPlaybackTimeInfo$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _arg0 = data.readString();
            setIcmMusicPlaybackTimeInfo(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$sendUpgradingTboxByUdiskReq$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _arg0 = data.readString();
            sendUpgradingTboxByUdiskReq(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getUpgradingTboxByUdiskResponse$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _result = getUpgradingTboxByUdiskResponse();
            reply.writeNoException();
            reply.writeString(_result);
            return true;
        }

        private boolean onTransact$getPmStatusWithParameter$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            byte[] _result = getPmStatusWithParameter();
            reply.writeNoException();
            reply.writeByteArray(_result);
            return true;
        }

        private boolean onTransact$getMcuOcuState$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getMcuOcuState();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getMcuCiuState$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getMcuCiuState();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getNaviBmpInfoRequiredByIcm$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _result = getNaviBmpInfoRequiredByIcm();
            reply.writeNoException();
            reply.writeString(_result);
            return true;
        }

        private boolean onTransact$getImuSystemState$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float[] _result = getImuSystemState();
            reply.writeNoException();
            reply.writeFloatArray(_result);
            return true;
        }

        private boolean onTransact$getImuQuatData$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float[] _result = getImuQuatData();
            reply.writeNoException();
            reply.writeFloatArray(_result);
            return true;
        }

        private boolean onTransact$getImuUbxPvtData1$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float[] _result = getImuUbxPvtData1();
            reply.writeNoException();
            reply.writeFloatArray(_result);
            return true;
        }

        private boolean onTransact$getImuUbxPvtData2$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float[] _result = getImuUbxPvtData2();
            reply.writeNoException();
            reply.writeFloatArray(_result);
            return true;
        }

        private boolean onTransact$getImuUbxRawXData$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float[] _result = getImuUbxRawXData();
            reply.writeNoException();
            reply.writeFloatArray(_result);
            return true;
        }

        private boolean onTransact$getImuTboxPackGgaData$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int[] _result = getImuTboxPackGgaData();
            reply.writeNoException();
            reply.writeIntArray(_result);
            return true;
        }

        private boolean onTransact$getImuAddData$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            long[] _result = getImuAddData();
            reply.writeNoException();
            reply.writeLongArray(_result);
            return true;
        }

        private boolean onTransact$getImuDiagMessage$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int[] _result = getImuDiagMessage();
            reply.writeNoException();
            reply.writeIntArray(_result);
            return true;
        }

        private boolean onTransact$getImuNavigationData$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float[] _result = getImuNavigationData();
            reply.writeNoException();
            reply.writeFloatArray(_result);
            return true;
        }

        private boolean onTransact$getImuUbxSfrbxData$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float[] _result = getImuUbxSfrbxData();
            reply.writeNoException();
            reply.writeFloatArray(_result);
            return true;
        }

        private boolean onTransact$getMcuAtlsState$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getMcuAtlsState();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$startTboxSlowCharge$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            startTboxSlowCharge();
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$stopTboxSlowCharge$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            stopTboxSlowCharge();
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setTboxAutoPowerOffConfig$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setTboxAutoPowerOffConfig(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getTboxAutoPowerOffSt$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getTboxAutoPowerOffSt();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setTboxCancelPowerOffConfig$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setTboxCancelPowerOffConfig(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getTboxCancelPowerOffSt$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getTboxCancelPowerOffSt();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getTboxPowerOffCountdown$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int[] _result = getTboxPowerOffCountdown();
            reply.writeNoException();
            reply.writeIntArray(_result);
            return true;
        }

        private boolean onTransact$getScuSlotsNumber$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getScuSlotsNumber();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getHvacMinWindSpeedLevel$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getHvacMinWindSpeedLevel();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getHvacMaxWindSpeedLevel$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getHvacMaxWindSpeedLevel();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getMinHavcTemperature$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getMinHavcTemperature();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getMaxHavcTemperature$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getMaxHavcTemperature();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setTboxSoldierSw$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setTboxSoldierSw(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getTboxSoldierSwState$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getTboxSoldierSwState();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getTboxSoldierWorkState$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getTboxSoldierWorkState();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getTboxSoldierGsensorData$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int[] _result = getTboxSoldierGsensorData();
            reply.writeNoException();
            reply.writeIntArray(_result);
            return true;
        }

        private boolean onTransact$sendTboxSoldierTick$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            sendTboxSoldierTick();
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getTpmsAllTirePressureWarnings$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int[] _result = getTpmsAllTirePressureWarnings();
            reply.writeNoException();
            reply.writeIntArray(_result);
            return true;
        }

        private boolean onTransact$getTpmsAllTireTemperatureWarnings$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int[] _result = getTpmsAllTireTemperatureWarnings();
            reply.writeNoException();
            reply.writeIntArray(_result);
            return true;
        }

        private boolean onTransact$getTpmsllTirePerssureSensorStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int[] _result = getTpmsllTirePerssureSensorStatus();
            reply.writeNoException();
            reply.writeIntArray(_result);
            return true;
        }

        private boolean onTransact$setVcuExtremeFastChargingMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setVcuExtremeFastChargingMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getVcuExtremeFastChargingSt$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getVcuExtremeFastChargingSt();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setScuRoadAttributes$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _arg1 = data.readInt();
            setScuRoadAttributes(_arg0, _arg1);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setScuDetailRoadClass$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setScuDetailRoadClass(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getTpmsAllTireTemperature$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int[] _result = getTpmsAllTireTemperature();
            reply.writeNoException();
            reply.writeIntArray(_result);
            return true;
        }

        private boolean onTransact$getMcuPsuOtaFeedbackMsg$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int[] _result = getMcuPsuOtaFeedbackMsg();
            reply.writeNoException();
            reply.writeIntArray(_result);
            return true;
        }

        private boolean onTransact$setMcuFaceIdSw$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setMcuFaceIdSw(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getMcuFaceIdSwState$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getMcuFaceIdSwState();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setFaceIdModeState$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setFaceIdModeState(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getMcuFaceIdMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getMcuFaceIdMode();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setLluScriptStRequest$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setLluScriptStRequest(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getLluScriptStResponse$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getLluScriptStResponse();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setLluScriptParameter$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int[] _arg0 = data.createIntArray();
            setLluScriptParameter(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setLluScriptData$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _arg1 = data.readInt();
            int _arg2 = data.readInt();
            int[] _arg3 = data.createIntArray();
            setLluScriptData(_arg0, _arg1, _arg2, _arg3);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setDvrEnable$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setDvrEnable(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getDvrEnableState$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getDvrEnableState();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setNotifyCiuAutoLightStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setNotifyCiuAutoLightStatus(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setCiuConfigurationActive$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setCiuConfigurationActive(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getCiuConfigurationActive$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getCiuConfigurationActive();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setCiuDelayOff$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setCiuDelayOff(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getCiuDelayOff$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getCiuDelayOff();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setCiuDeliveryUploadMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setCiuDeliveryUploadMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getCiuDeliveryUploadMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getCiuDeliveryUploadMode();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setBcmWindowsMovePositions$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float _arg0 = data.readFloat();
            float _arg1 = data.readFloat();
            float _arg2 = data.readFloat();
            float _arg3 = data.readFloat();
            setBcmWindowsMovePositions(_arg0, _arg1, _arg2, _arg3);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmSdcMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmSdcMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmTwcMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmTwcMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmTwcUpdownSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmTwcUpdownSwitch(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmLeftSdcSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmLeftSdcSwitch(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setBcmRightSdcSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmRightSdcSwitch(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$sendTboxGpsAntPowerControlReq$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            sendTboxGpsAntPowerControlReq(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getGpsAntPowerControlResponse$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int[] _result = getGpsAntPowerControlResponse();
            reply.writeNoException();
            reply.writeIntArray(_result);
            return true;
        }

        private boolean onTransact$setMcuAndroidOtaStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setMcuAndroidOtaStatus(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setLluFindCarSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setLluFindCarSwitch(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getLluFindCarSwitchState$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getLluFindCarSwitchState();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setLluLockUnlockSocDspSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setLluLockUnlockSocDspSwitch(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getLluLockUnlockSocDspSwitchState$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getLluLockUnlockSocDspSwitchState();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getLluAcChargingCfg$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getLluAcChargingCfg();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getLluDcChargingCfg$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getLluDcChargingCfg();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setLluSpeedLimitCfg$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setLluSpeedLimitCfg(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getLluSpeedLimitCfg$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getLluSpeedLimitCfg();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setLluPersonAngle$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setLluPersonAngle(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setLluPersonWalkDirection$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setLluPersonWalkDirection(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setMcuLluEnableStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setMcuLluEnableStatus(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getMcuLluEnableStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getMcuLluEnableStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setMcuLluWakeWaitSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setMcuLluWakeWaitSwitch(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getMcuLluWakeWaitSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getMcuLluWakeWaitSwitch();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setMcuLluShowOffSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setMcuLluShowOffSwitch(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getMcuLluShowOffSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getMcuLluShowOffSwitch();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setMcuLluSleepSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setMcuLluSleepSwitch(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getMcuLluSleepSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getMcuLluSleepSwitch();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setMcuLluChargingSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setMcuLluChargingSwitch(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getMcuLluChargingSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getMcuLluChargingSwitch();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setMcuLluPhotoSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setMcuLluPhotoSwitch(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getMcuLluPhotoSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getMcuLluPhotoSwitch();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getVcuRealGearLevel$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getVcuRealGearLevel();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setVcuNGearWarningSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setVcuNGearWarningSwitch(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getVcuNGearWarningSwitchStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getVcuNGearWarningSwitchStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setMcuAutoPowerOffSw$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setMcuAutoPowerOffSw(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getMcuAutoPowerOffSwitchState$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getMcuAutoPowerOffSwitchState();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setMcuPowerOffCountdownAction$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setMcuPowerOffCountdownAction(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getMcuPowerOffCountdownNotice$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getMcuPowerOffCountdownNotice();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getSwsButtonsRawData$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int[] _result = getSwsButtonsRawData();
            reply.writeNoException();
            reply.writeIntArray(_result);
            return true;
        }

        private boolean onTransact$sendTboxGpsHwResetRequest$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            sendTboxGpsHwResetRequest();
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setGpsPollingType$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setGpsPollingType(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setTboxGpsDebugSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setTboxGpsDebugSwitch(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$sendTboxGpsMgaRequest$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            sendTboxGpsMgaRequest();
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getTboxGpsMgaResponse$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getTboxGpsMgaResponse();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setIcmRadioType$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setIcmRadioType(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setIcmFaceInfo$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _arg0 = data.readString();
            setIcmFaceInfo(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getBcmLeftChargePortLockState$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getBcmLeftChargePortLockState();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getBcmRightChargePortLockState$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getBcmRightChargePortLockState();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getAlsInitializationStudyState$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getAlsInitializationStudyState();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getMcuVersion$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _result = getMcuVersion();
            reply.writeNoException();
            reply.writeString(_result);
            return true;
        }

        private boolean onTransact$getAlsInitializationStudyAndErrorState$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int[] _result = getAlsInitializationStudyAndErrorState();
            reply.writeNoException();
            reply.writeIntArray(_result);
            return true;
        }

        private boolean onTransact$setMcuHornsStates$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _arg1 = data.readInt();
            int _arg2 = data.readInt();
            int _arg3 = data.readInt();
            setMcuHornsStates(_arg0, _arg1, _arg2, _arg3);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$sendChargeCompleteTimeToMcu$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            sendChargeCompleteTimeToMcu(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getMcuRequestedMessage$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getMcuRequestedMessage();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setAvmMultipleDisplayProperties$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _arg1 = data.readInt();
            int _arg2 = data.readInt();
            int _arg3 = data.readInt();
            int _arg4 = data.readInt();
            setAvmMultipleDisplayProperties(_arg0, _arg1, _arg2, _arg3, _arg4);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$resetTbox$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            resetTbox();
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getScuMrrAssistSystemStates$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int[] _result = getScuMrrAssistSystemStates();
            reply.writeNoException();
            reply.writeIntArray(_result);
            return true;
        }

        private boolean onTransact$setBcmWiperRainDetectSensitivity$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmWiperRainDetectSensitivity(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getBcmWiperRainDetectSensitivity$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getBcmWiperRainDetectSensitivity();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getBcmWindowLockState$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getBcmWindowLockState();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getAvmWorkState$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getAvmWorkState();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getBcmLeftAndRightTurnLampStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int[] _result = getBcmLeftAndRightTurnLampStatus();
            reply.writeNoException();
            reply.writeIntArray(_result);
            return true;
        }

        private boolean onTransact$sendXpuUpdateRequest$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _arg0 = data.readString();
            sendXpuUpdateRequest(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getXpuUpdateResponse$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _result = getXpuUpdateResponse();
            reply.writeNoException();
            reply.writeString(_result);
            return true;
        }

        private boolean onTransact$setXpuUpdateFileTransferStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setXpuUpdateFileTransferStatus(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getXpuUpdateResult$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getXpuUpdateResult();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getXpuUpdateProgress$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getXpuUpdateProgress();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getXpuConnectionStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getXpuConnectionStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setBcmParkLightRelatedFMBLightConfig$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setBcmParkLightRelatedFMBLightConfig(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getBcmParkLightRelatedFMBLightConfigState$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getBcmParkLightRelatedFMBLightConfigState();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getScuRearCollisionWarning$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getScuRearCollisionWarning();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getAvmCamerasFaultStates$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int[] _result = getAvmCamerasFaultStates();
            reply.writeNoException();
            reply.writeIntArray(_result);
            return true;
        }

        private boolean onTransact$setMcuMonitorSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _arg1 = data.readInt();
            setMcuMonitorSwitch(_arg0, _arg1);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getMcuMonitorState$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getMcuMonitorState();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getBcmParkingLampsStates$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int[] _result = getBcmParkingLampsStates();
            reply.writeNoException();
            reply.writeIntArray(_result);
            return true;
        }

        private boolean onTransact$getBcmDoorUnlockRequestSource$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getBcmDoorUnlockRequestSource();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setScuCommonHomeSlotID$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setScuCommonHomeSlotID(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setScuFreeParking1Data$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float _arg0 = data.readFloat();
            float _arg1 = data.readFloat();
            float _arg2 = data.readFloat();
            int _arg3 = data.readInt();
            int _arg4 = data.readInt();
            float _arg5 = data.readFloat();
            float _arg6 = data.readFloat();
            setScuFreeParking1Data(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setScuFreeParking2Data$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float _arg0 = data.readFloat();
            float _arg1 = data.readFloat();
            float _arg2 = data.readFloat();
            int _arg3 = data.readInt();
            int _arg4 = data.readInt();
            float _arg5 = data.readFloat();
            float _arg6 = data.readFloat();
            setScuFreeParking2Data(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getScuLeftDoorOpenWarning$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getScuLeftDoorOpenWarning();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getScuRightDoorOpenWarning$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getScuRightDoorOpenWarning();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setTboxRepairMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setTboxRepairMode(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getTboxRepairModeState$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getTboxRepairModeState();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getBcmLeftSdcPsdMotorState$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getBcmLeftSdcPsdMotorState();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getBcmRightSdcPsdMotorState$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getBcmRightSdcPsdMotorState();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setXpuNedcSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setXpuNedcSwitch(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$setXpuLightChange$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setXpuLightChange(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$registerVcuListener$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            IVcuEventListener _arg0 = IVcuEventListener.Stub.asInterface(data.readStrongBinder());
            registerVcuListener(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$unregisterVcuListener$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            IVcuEventListener _arg0 = IVcuEventListener.Stub.asInterface(data.readStrongBinder());
            unregisterVcuListener(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$registerEpsListener$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            IEpsEventListener _arg0 = IEpsEventListener.Stub.asInterface(data.readStrongBinder());
            registerEpsListener(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$unregisterEpsListener$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            IEpsEventListener _arg0 = IEpsEventListener.Stub.asInterface(data.readStrongBinder());
            unregisterEpsListener(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getBcmKeyAuthState$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getBcmKeyAuthState();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setTboxSoliderCameraSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setTboxSoliderCameraSwitch(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getTboxSoliderCameraState$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getTboxSoliderCameraState();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setTboxThresholdSwitch$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _arg1 = data.readInt();
            int _arg2 = data.readInt();
            setTboxThresholdSwitch(_arg0, _arg1, _arg2);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getScuRearMirrorControlState$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getScuRearMirrorControlState();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$activateAndroidLluControl$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            activateAndroidLluControl();
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getMcuLluWorkStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getMcuLluWorkStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getTboxSoliderEnableState$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getTboxSoliderEnableState();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getEspApbSystemDisplayMessage$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getEspApbSystemDisplayMessage();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getEspApbSystemStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getEspApbSystemStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getEspHbcRequestStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getEspHbcRequestStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getIcmBrakeFluidLevelWarningMessage$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getIcmBrakeFluidLevelWarningMessage();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getVcuAcChargeCurAfterVoltBoosted$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float _result = getVcuAcChargeCurAfterVoltBoosted();
            reply.writeNoException();
            reply.writeFloat(_result);
            return true;
        }

        private boolean onTransact$getVcuAcChargeVoltAfterVoltBoosted$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            float _result = getVcuAcChargeVoltAfterVoltBoosted();
            reply.writeNoException();
            reply.writeFloat(_result);
            return true;
        }

        private boolean onTransact$getVcuCruiseControlStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getVcuCruiseControlStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$sendIcmUpdateRequest$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _arg0 = data.readString();
            sendIcmUpdateRequest(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getIcmUpdateResponse$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _result = getIcmUpdateResponse();
            reply.writeNoException();
            reply.writeString(_result);
            return true;
        }

        private boolean onTransact$setIcmUpdateFileTransferStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setIcmUpdateFileTransferStatus(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getIcmUpdateResult$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getIcmUpdateResult();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getIcmUpdateProgress$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getIcmUpdateProgress();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getBcmWiperSpeedSwitchState$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getBcmWiperSpeedSwitchState();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$sendTboxRenewalPartsRequest$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _arg0 = data.readString();
            sendTboxRenewalPartsRequest(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getTboxRenewalPartsResponse$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            String _result = getTboxRenewalPartsResponse();
            reply.writeNoException();
            reply.writeString(_result);
            return true;
        }

        private boolean onTransact$getTboxRemoteLluMode$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getTboxRemoteLluMode();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$sendBcmSeatBeltRequest$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            sendBcmSeatBeltRequest(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$sendCduVolumeToAmp$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            sendCduVolumeToAmp(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getBcmNfcCardIdInfo$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            byte[] _result = getBcmNfcCardIdInfo();
            reply.writeNoException();
            reply.writeByteArray(_result);
            return true;
        }

        private boolean onTransact$getBcmAutoLightState$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getBcmAutoLightState();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setXpuCduBrightness$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            setXpuCduBrightness(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getXpuBrightness$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getXpuBrightness();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$setMcuDelaySleep$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            int _arg1 = data.readInt();
            setMcuDelaySleep(_arg0, _arg1);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$sendTboxBleAccountLoginFeedback$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            sendTboxBleAccountLoginFeedback(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$sendMcuBleAccountDataFeedback$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _arg0 = data.readInt();
            sendMcuBleAccountDataFeedback(_arg0);
            reply.writeNoException();
            return true;
        }

        private boolean onTransact$getMcuBleAccountData$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            byte[] _result = getMcuBleAccountData();
            reply.writeNoException();
            reply.writeByteArray(_result);
            return true;
        }

        private boolean onTransact$getScuExtraLatCtrlRemindInfo$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getScuExtraLatCtrlRemindInfo();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getAvasFaultStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getAvasFaultStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }

        private boolean onTransact$getCiuStatus$(Parcel data, Parcel reply) throws RemoteException {
            data.enforceInterface(DESCRIPTOR);
            int _result = getCiuStatus();
            reply.writeNoException();
            reply.writeInt(_result);
            return true;
        }
    }
}
